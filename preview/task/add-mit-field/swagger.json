{
  "openapi": "3.0.1",
  "info": {
    "title": "Checkout.com API Reference",
    "description": "# Introduction\nCheckout.com provides a collection of APIs that enable you to process and manage payments.  \nOur APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors. You can consume the APIs directly using your favorite HTTP/REST library or, if you'd like to make use of one of our SDKs, please let our Integration team know at <a href=\"mailto:integration@checkout.com\" target=\"_blank\">integration@checkout.com</a>.  \n\nOur unified payments API allows you to accept payments, as well as pay out to a variety of destinations, all using the same integration. \n\nAnd with our workflow management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly. \n# Authentication\nWhen you sign up for an account, you are given a public API key, and an access key ID and secret for OAuth 2.0. You authenticate with our API by following the appropriate authentication flow, using either your API keys or your access key credentials.\n\nUnless explicitly stated, all endpoints require authentication using OAuth. Public keys should only be used in JavaScript or native applications.\n\nNever share your access key credentials or access tokens. Keep them guarded and secure.\n",
    "termsOfService": "https://checkout.com/terms/",
    "contact": {
      "name": "Checkout.com Support",
      "url": "https://checkout.com",
      "email": "support@checkout.com"
    },
    "license": {
      "name": "Checkout.com",
      "url": "https://checkout.com/api/license/"
    },
    "version": "1.0.0",
    "x-logo": {
      "url": "https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg",
      "backgroundColor": "#E6E7EC",
      "altText": "Checkout.com API logo"
    }
  },
  "servers": [
    {
      "url": "https://api.checkout.com",
      "description": "Live API"
    },
    {
      "url": "https://api.sandbox.checkout.com",
      "description": "Sandbox API"
    }
  ],
  "paths": {
    "/connect/token": {
      "post": {
        "tags": [
          "Access"
        ],
        "summary": "Request an access token",
        "description": "OAuth endpoint to exchange your access key ID and access key secret for an access token.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "enum": [
                      "client_credentials"
                    ],
                    "type": "string",
                    "example": "client_credentials"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "Access key ID"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "Access key secret"
                  },
                  "scope": {
                    "type": "string",
                    "description": "The access key scope",
                    "example": "gateway"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "grant_type": "client_credentials",
                    "client_id": "ack_clckqmmnyfiupexjew7shh5ahe",
                    "client_secret": "Pmg36sDWQ9WxtPR3"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - A successful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "example": "2YotnFZFEjr1zCsicMWpAA"
                    },
                    "token_type": {
                      "type": "string",
                      "example": "example"
                    },
                    "expires_in": {
                      "type": "number",
                      "example": 3600
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - An unsuccessful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "enum": [
                        "invalid_request",
                        "invalid_client",
                        "invalid_grant",
                        "unauthorized_client",
                        "unsupported_grant_type",
                        "invalid_scope"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://access.checkout.com/connect/token'\n  --header 'Content-Type: application/x-www-form-urlencoded'\n  --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ='\n  --data-urlencode 'grant_type=client_credentials'\n  --data-urlencode 'scope=gateway'"
          }
        ]
      },
      "servers": [
        {
          "url": "https://access.checkout.com",
          "description": "Live API"
        },
        {
          "url": "https://access.sandbox.checkout.com",
          "description": "Sandbox API"
        }
      ]
    },
    "/disputes": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get disputes",
        "description": "Returns a list of all disputes against your business. The results will be returned in reverse chronological order, showing the last modified dispute (for example, where you've recently added a piece of evidence) first. You can use the optional parameters below to skip or limit results.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The numbers of results to return",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of results to skip",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The date and time from which to filter disputes, based on the dispute's `last_update` field",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The date and time until which to filter disputes, based on the dispute's `last_update` field",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The unique identifier of the dispute",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_ids",
            "in": "query",
            "description": "One or more comma-separated client entities. This works like a logical *OR* operator",
            "schema": {
              "type": "string",
              "example": "ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku"
            }
          },
          {
            "name": "sub_entity_ids",
            "in": "query",
            "description": "One or more comma-separated sub-entities. This works like a logical *OR* operator",
            "schema": {
              "type": "string",
              "example": "ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "One or more comma-separated statuses. This works like a logical *OR* operator",
            "schema": {
              "type": "string",
              "example": "evidence_required,evidence_under_review"
            }
          },
          {
            "name": "payment_id",
            "in": "query",
            "description": "The unique identifier of the payment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_reference",
            "in": "query",
            "description": "An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_arn",
            "in": "query",
            "description": "The acquirer reference number (ARN) that you can use to query the issuing bank",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_mcc",
            "in": "query",
            "description": "The merchant category code (MCC) of the payment (ISO 18245)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "this_channel_only",
            "in": "query",
            "description": "If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disputes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputePaged"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable paging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:view"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputes = await cko.disputes.get({\n  limit: 5,\n  id: \"dsp_bc94ebda8d275i461229\",\n});"
          }
        ]
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get dispute details",
        "description": "Returns all the details of a dispute using the dispute identifier.",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:view"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputeDetails = await cko.disputes.getDetails(\n  \"dsp_bc94ebda8d275i461229\"\n);"
          }
        ]
      }
    },
    "/disputes/{dispute_id}/accept": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Accept dispute",
        "description": "If a dispute is legitimate, you can choose to accept it. This will close it for you and remove it from your list of open disputes. There are no further financial implications.",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dispute accepted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:accept"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst accept = await cko.disputes.accept(\"dsp_bc94ebda8d275i461229\");"
          }
        ]
      }
    },
    "/disputes/{dispute_id}/evidence": {
      "put": {
        "tags": [
          "Disputes"
        ],
        "summary": "Provide dispute evidence",
        "description": "Adds supporting evidence to a dispute. Before using this endpoint, you first need to [upload your files](#tag/Disputes/paths/~1files/post) using the file uploader. You will receive a file id (prefixed by `file_`) which you can then use in your request. Note that this only attaches the evidence to the dispute, it does not send it to us. Once ready, you will need to submit it. **You must provide at least one evidence type in the body of your request.**\n",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvideEvidenceRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Dispute evidence provided successfully"
          },
          "400": {
            "description": "Unprocessable"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:provide-evidence"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst evidence = await cko.disputes.provideEvidence(\n  \"dsp_bc94ebda8d275i461229\",\n  {\n    proof_of_delivery_or_service_text: \"http://checkout.com/document.pdf\",\n  }\n);"
          }
        ]
      },
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get dispute evidence",
        "description": "Retrieves a list of the evidence submitted in response to a specific dispute. \n",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute evidence retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evidence"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:view"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getEvidence = await cko.disputes.getEvidence(\"dsp_bc94ebda8d275i461229\");"
          }
        ]
      },
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Submit dispute evidence",
        "description": "With this final request, you can submit the evidence that you have previously provided. Make sure you have provided all the relevant information before using this request. You will not be able to amend your evidence once you have submitted it.",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dispute evidence submitted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:provide-evidence"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst submitEvidence = await cko.disputes.submit(\"dsp_bc94ebda8d275i461229\");"
          }
        ]
      }
    },
    "/files": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Upload file",
        "description": "Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG, PNG or PDF format, and be no larger than 4MB.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:provide-evidence"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst file = await cko.files.upload({\n  path: fs.createReadStream(\"./test/files/evidence.jpg\"),\n  purpose: \"dispute_evidence\",\n});"
          }
        ]
      }
    },
    "/files/{file_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get file information",
        "description": "Retrieve information about a file that was previously uploaded.",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The file identifier. It is always prefixed by `file_`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          },
          "429": {
            "description": "Too many requests or duplicate request detected"
          }
        },
        "security": [
          {
            "OAuth": [
              "disputes",
              "disputes:view"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getFile = await cko.files.getFile(\"file_zna32sccqbwevd3ldmejtplbhu\");"
          }
        ]
      }
    },
    "/workflows": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get all workflows",
        "description": "Get all workflows\n",
        "responses": {
          "200": {
            "description": "Workflows retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-all-workflows-response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "flow",
              "flow:workflows"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Add a workflow",
        "description": "Add a new Flow workflow\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-workflow-request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Workflow added successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add-workflow-response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "flow",
              "flow:workflows"
            ]
          }
        ]
      }
    },
    "/workflows/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get a workflow",
        "description": "Get the details of a workflow\n",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The workflow identifier",
            "required": true,
            "schema": {
              "pattern": "^wf_[a-z0-9]{26}$",
              "type": "string"
            },
            "example": "wf_c7svxlvo2bbuva4f6s3xu4f7wm"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-workflow-response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "flow",
              "flow:workflows"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Remove a workflow",
        "description": "Removes a workflow so it is no longer being executed. \nActions of already executed workflows will be still processed.\n",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "description": "The workflow identifier",
            "required": true,
            "schema": {
              "pattern": "^wf_[a-z0-9]{26}$",
              "type": "string"
            },
            "example": "wf_c7svxlvo2bbuva4f6s3xu4f7wm"
          }
        ],
        "responses": {
          "204": {
            "description": "Workflow removed successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/workflows/event-types": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get event types",
        "description": "Get a list of sources and their events for building new workflows\n",
        "responses": {
          "200": {
            "description": "Event types retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-event-types-response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "flow",
              "flow:workflows"
            ]
          }
        ]
      }
    },
    "/workflows/events/{eventId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get an event",
        "description": "Get the details of an event\n",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^evt_[a-z0-9]{26}$",
              "type": "string"
            },
            "example": "evt_x5zm2po6kimubhlfitgt2mfwgi"
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-event-response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "flow",
              "flow:events"
            ]
          }
        ]
      }
    },
    "/workflows/events/subject/{subjectId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get subject events",
        "description": "Get all events that relate to a specific subject\n",
        "parameters": [
          {
            "name": "subjectId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "pay_wlu3wxc26jounofs5iez75qaqa"
          }
        ],
        "responses": {
          "200": {
            "description": "Events retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subject-events-response"
                }
              }
            }
          },
          "404": {
            "description": "Subject not found",
            "headers": {
              "Cko-Request-Id": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Request-Id"
                }
              },
              "Cko-Version": {
                "schema": {
                  "$ref": "#/components/headers/Cko-Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "flow",
              "flow:events"
            ]
          }
        ]
      }
    },
    "/forex/quotes": {
      "post": {
        "tags": [
          "Forex"
        ],
        "summary": "Request a quote",
        "description": "Request a quote between a source and destination currency pair.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Quote created",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests or duplicate request detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "fx"
            ]
          }
        ]
      }
    },
    "/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Create an instrument",
        "description": "Create a bank account payment instrument that you can later use as the destination for one or more payouts.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreInstrumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Instrument created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreInstrumentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "OAuth": [
              "vault",
              "vault:instruments"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\ntry {\n  const instrument = await cko.instruments.create({\n    // infered type \"token\",\n    token: \"tok_bzi43qc6jeee5mmnfo4gnsnera\", // Generated by Checkout.Frames\n  });\n} catch (err) {\n  console.log(err.name);\n}"
          }
        ]
      }
    },
    "/marketplace/entities": {
      "post": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Onboard a sub-entity",
        "description": "Onboard a sub-entity, so they can start receiving payments. Upon creation, Checkout.com will run due diligence checks. \nIf the checks are successful, the payment capabilities for the sub-entity will be enabled and they can start receiving payments.\n",
        "requestBody": {
          "description": "The sub-entity to be onboarded",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityCreateRequest"
              },
              "examples": {
                "Company": {
                  "value": {
                    "reference": "superhero1234",
                    "contact_details": {
                      "phone": {
                        "number": 2345678910
                      }
                    },
                    "profile": {
                      "urls": [
                        "https://www.superheroexample.com"
                      ],
                      "mccs": [
                        5669
                      ]
                    },
                    "company": {
                      "business_registration_number": 452349600005,
                      "legal_name": "Super Hero Masks Inc.",
                      "trading_name": "Super Hero Masks",
                      "principal_address": {
                        "address_line1": "90 Tottenham Court Road",
                        "city": "London",
                        "zip": "W1T4TJ",
                        "country": "GB"
                      },
                      "registered_address": {
                        "address_line1": "90 Tottenham Court Road",
                        "city": "London",
                        "zip": "W1T4TJ",
                        "country": "GB"
                      },
                      "representatives": [
                        {
                          "first_name": "John",
                          "last_name": "Doe",
                          "address": {
                            "address_line1": "90 Tottenham Court Road",
                            "city": "London",
                            "zip": "W1T4TJ",
                            "country": "GB"
                          },
                          "identification": {
                            "description": "Identification of the representative, used for verification",
                            "national_id_number": "AB123456C"
                          },
                          "phone": {
                            "number": 2345678910
                          }
                        }
                      ]
                    }
                  }
                },
                "Individual": {
                  "value": {
                    "reference": "superhero1234",
                    "contact_details": {
                      "phone": {
                        "number": 2345678910
                      }
                    },
                    "profile": {
                      "urls": [
                        "https://www.superheroexample.com"
                      ],
                      "mccs": [
                        5669
                      ]
                    },
                    "individual": {
                      "first_name": "John",
                      "last_name": "Doe",
                      "trading_name": "John's Super Hero Masks",
                      "registered_address": {
                        "address_line1": "90 Tottenham Court Road",
                        "city": "London",
                        "zip": "W1T4TJ",
                        "country": "GB"
                      },
                      "national_tax_id": "TAX123456"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Sub-entity onboarded successfully",
            "headers": {
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              },
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBasicResponseWithLinks"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Sub-entity onboarding request conflicted with an existing sub-entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityLinks"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error_codes": {
                          "example": [
                            "error_code1",
                            "error_code2"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": [
              "marketplace"
            ]
          }
        ]
      }
    },
    "/marketplace/entities/{id}": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Get sub-entity details",
        "responses": {
          "200": {
            "description": "Sub-entity retrieved successfully",
            "headers": {
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              },
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityExtendedResponse"
                },
                "examples": {
                  "Company": {
                    "value": {
                      "id": "ent_wxglze3wwywujg4nna5fb7ldli",
                      "reference": "superhero1234",
                      "capabilities": {
                        "payments": {
                          "enabled": false
                        }
                      },
                      "contact_details": {
                        "phone": {
                          "number": 2345678910
                        }
                      },
                      "profile": {
                        "urls": [
                          "https://www.superheroexample.com"
                        ],
                        "mccs": [
                          5669
                        ]
                      },
                      "company": {
                        "business_registration_number": 452349600005,
                        "legal_name": "Super Hero Masks Inc.",
                        "trading_name": "Super Hero Masks",
                        "principal_address": {
                          "address_line1": "90 Tottenham Court Road",
                          "city": "London",
                          "zip": "W1T4TJ",
                          "country": "GB"
                        },
                        "registered_address": {
                          "address_line1": "90 Tottenham Court Road",
                          "city": "London",
                          "zip": "W1T4TJ",
                          "country": "GB"
                        },
                        "representatives": [
                          {
                            "first_name": "John",
                            "middle_name": "",
                            "last_name": "Doe",
                            "address": {
                              "address_line1": "90 Tottenham Court Road",
                              "city": "London",
                              "zip": "W1T4TJ",
                              "country": "GB"
                            },
                            "identification": {
                              "national_id_number": "AB123456C"
                            },
                            "phone": {
                              "number": 2345678910
                            }
                          }
                        ]
                      },
                      "_links": {
                        "self": {
                          "href": "https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli"
                        }
                      }
                    }
                  },
                  "Individual": {
                    "value": {
                      "id": "ent_wxglze3wwywujg4nna5fb7ldli",
                      "reference": "superhero1234",
                      "capabilities": {
                        "payments": {
                          "enabled": false
                        }
                      },
                      "contact_details": {
                        "phone": {
                          "number": 2345678910
                        }
                      },
                      "profile": {
                        "urls": [
                          "https://www.superheroexample.com"
                        ],
                        "mccs": [
                          5669
                        ]
                      },
                      "individual": {
                        "first_name": "John",
                        "middle_name": "Paul",
                        "last_name": "Doe",
                        "trading_name": "Super Hero Masks",
                        "legal_name": "John Paul Doe",
                        "national_tax_id": 1234567,
                        "registered_address": {
                          "address_line1": "90 Tottenham Court Road",
                          "city": "London",
                          "zip": "W1T4TJ",
                          "country": "GB"
                        }
                      },
                      "_links": {
                        "self": {
                          "href": "https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Sub-entity not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error_codes": {
                          "example": [
                            "error_code1",
                            "error_code2"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": [
              "marketplace"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Update sub-entity details",
        "description": "You can update all fields under the ContactDetails, Profile, and Company objects. \nPlease note that when you update a sub-entity we may conduct further due diligence checks when necessary. During these checks, your payment capabilities will remain the same.\n",
        "requestBody": {
          "description": "The sub-entity to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityUpdateRequest"
              },
              "examples": {
                "Company": {
                  "value": {
                    "contact_details": {
                      "phone": {
                        "number": 2345678910
                      }
                    },
                    "profile": {
                      "urls": [
                        "https://www.superheroexample.com"
                      ],
                      "mccs": [
                        5669
                      ]
                    },
                    "company": {
                      "business_registration_number": 452349600005,
                      "legal_name": "Super Hero Masks Inc.",
                      "trading_name": "Super Hero Masks",
                      "principal_address": {
                        "address_line1": "90 Tottenham Court Road",
                        "city": "London",
                        "zip": "W1T4TJ",
                        "country": "GB"
                      },
                      "registered_address": {
                        "address_line1": "90 Tottenham Court Road",
                        "city": "London",
                        "zip": "W1T4TJ",
                        "country": "GB"
                      },
                      "representatives": [
                        {
                          "first_name": "John",
                          "last_name": "Doe",
                          "address": {
                            "address_line1": "90 Tottenham Court Road",
                            "city": "London",
                            "zip": "W1T4TJ",
                            "country": "GB"
                          },
                          "identification": {
                            "description": "Identification of the representative, used for verification",
                            "national_id_number": "AB123456C"
                          },
                          "phone": {
                            "number": 2345678910
                          }
                        }
                      ]
                    }
                  }
                },
                "Individual": {
                  "value": {
                    "contact_details": {
                      "phone": {
                        "number": 2345678910
                      }
                    },
                    "profile": {
                      "urls": [
                        "https://www.superheroexample.com"
                      ],
                      "mccs": [
                        5669
                      ]
                    },
                    "individual": {
                      "first_name": "John",
                      "last_name": "Doe",
                      "trading_name": "John's Super Hero Masks",
                      "registered_address": {
                        "address_line1": "90 Tottenham Court Road",
                        "city": "London",
                        "zip": "W1T4TJ",
                        "country": "GB"
                      },
                      "national_tax_id": "TAX123456"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sub-entity updated successfully",
            "headers": {
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              },
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBasicResponseWithLinks"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Sub-entity not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error_codes": {
                          "example": [
                            "error_code1",
                            "error_code2"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": [
              "marketplace"
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The id of the sub-entity",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string"
          },
          "example": "ent_w4jelhppmfiufdnatam37wrfc4"
        }
      ]
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Request a payment or payout",
        "description": "To accept payments, specify the `source.type` field, along with the source-specific data.\n\nTo pay out to a bank account, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.\n\nTo verify the success of the payment, check the `approved` field in the response.\n",
        "parameters": [
          {
            "name": "Cko-Idempotency-Key",
            "in": "header",
            "description": "An optional idempotency key for safely retrying payment requests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              },
              "example": {
                "source": {
                  "type": "token",
                  "token": "tok_4gzeau5o2uqubbk6fufs3m7p54"
                },
                "amount": 6540,
                "currency": "USD",
                "payment_type": "Recurring",
                "reference": "ORD-5023-4E89",
                "description": "Set of 3 masks",
                "capture": true,
                "capture_on": "2019-09-10T10:11:12.0000000+00:00",
                "customer": {
                  "id": "cus_udst2tfldj6upmye2reztkmm4i",
                  "email": "jokershere@gmail.com",
                  "name": "Jack Napier"
                },
                "billing_descriptor": {
                  "name": "SUPERHEROES.COM",
                  "city": "GOTHAM"
                },
                "shipping": {
                  "address": {
                    "address_line1": "Checkout.com",
                    "address_line2": "90 Tottenham Court Road",
                    "city": "London",
                    "state": "London",
                    "zip": "W1T 4TJ",
                    "country": "GB"
                  },
                  "phone": {
                    "country_code": 1,
                    "number": "415 555 2671"
                  }
                },
                "3ds": {
                  "enabled": true,
                  "attempt_n3d": true,
                  "eci": 5,
                  "cryptogram": "AgAAAAAAAIR8CQrXcIhbQAAAAAA=",
                  "xid": "MDAwMDAwMDAwMDAwMDAwMzIyNzY=",
                  "version": "2.0.1"
                },
                "previous_payment_id": "pay_fun26akvvjjerahhctaq2uzhu4",
                "risk": {
                  "enabled": false
                },
                "success_url": "http://example.com/payments/success",
                "failure_url": "http://example.com/payments/fail",
                "payment_ip": "90.197.169.245",
                "recipient": {
                  "dob": "1985-05-15T00:00:00.0000000+00:00",
                  "account_number": 5555554444,
                  "zip": "W1T",
                  "last_name": "Jones"
                },
                "processing": {
                  "mid": 1234567
                },
                "metadata": {
                  "coupon_code": "NY2018",
                  "partner_id": 123989
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment processed successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                },
                "example": {
                  "id": "pay_mbabizu24mvu3mela5njyhpit4",
                  "action_id": "act_mbabizu24mvu3mela5njyhpit4",
                  "amount": 6540,
                  "currency": "USD",
                  "approved": true,
                  "status": "Authorized",
                  "auth_code": 770687,
                  "response_code": 10000,
                  "response_summary": "Approved",
                  "3ds": {
                    "downgraded": true,
                    "enrolled": "N"
                  },
                  "risk": {
                    "flagged": true
                  },
                  "source": {
                    "type": "card",
                    "id": "src_nwd3m4in3hkuddfpjsaevunhdy",
                    "billing_address": {
                      "address_line1": "Checkout.com",
                      "address_line2": "90 Tottenham Court Road",
                      "city": "London",
                      "state": "London",
                      "zip": "W1T 4TJ",
                      "country": "GB"
                    },
                    "phone": {
                      "country_code": 1,
                      "number": "415 555 2671"
                    },
                    "last4": 4242,
                    "fingerprint": "F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832",
                    "bin": 424242
                  },
                  "customer": {
                    "id": "cus_udst2tfldj6upmye2reztkmm4i",
                    "email": "jokershere@gmail.com",
                    "name": "Jack Napier"
                  },
                  "processed_on": "2019-09-10T10:11:12.0000000+00:00",
                  "reference": "ORD-5023-4E89",
                  "processing": {
                    "retrieval_reference_number": 909913440644,
                    "acquirer_transaction_id": 4.406443090994999E+20
                  },
                  "eci": 6,
                  "scheme_id": 489341065491658,
                  "links": {
                    "self": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                    },
                    "action": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions"
                    },
                    "void": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures"
                    },
                    "capture": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Payment asynchronous or further action required",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests or duplicate request detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n    Reference = \"ORD-090857\",\n    Capture = false,\n    ThreeDs = true\n};\n\ntry\n{\n    var response = await api.Payments.RequestAsync(paymentRequest);\n\n    if (response.IsPending && response.Pending.RequiresRedirect())\n    {\n        return Redirect(response.Pending.GetRedirectLink().Href);\n    }\n\n    if (response.Payment.Approved)\n        return PaymentSucessful(response.Payment);\n\n    return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n    return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n    Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n    throw;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nTokenSource tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nPaymentRequest<TokenSource> paymentRequest = PaymentRequest.fromSource(tokenSource, Currency.USD, 5600);\npaymentRequest.setReference(\"ORD-090857\");\npaymentRequest.setCapture(false);\npaymentRequest.setThreeDS(ThreeDSRequest.from(true));\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestAsync(paymentRequest).get();\n\n    if (response.isPending() && response.getPending().requiresRedirect()) {\n        return redirect(response.getPending().getRedirectLink().getHref());\n    }\n\n    if (response.getPayment().isApproved())\n        return paymentSucessful(response.getPayment());\n\n    return paymentDeclined(response.getPayment());\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n    const payment = await cko.payments.request({\n        source: {\n            // infered type: \"token\"\n            token: 'tok_bzi43qc6jeee5mmnfo4gnsnera' // Generated by Checkout.Frames\n            billing_address: {\n                address_line1: 'Wall Street',\n                address_line2: 'Dollar Avenue',\n                city: 'London',\n                state: 'London',\n                zip: 'W1W W1W',\n                country: 'GB'\n            },\n            phone: {\n                country_code: '44',\n                number: '7123456789'\n            }\n        },\n        currency: 'USD',\n        amount: 1000,\n        payment_type: 'Regular',\n        reference: 'ORDER 1234',\n        description: 'Mint Tea',\n        customer: {\n            email: 'new_user@email.com',\n            name: 'John Smith'\n        },\n        metadata: {\n            myCustomProp: {\n                value: 1\n            }\n        }\n    });\n\n} catch (err) {\n    console.log(err.name)\n}"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
          }
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment details",
        "description": "Returns the details of the payment with the specified identifier string.\n\nIf the payment method requires a redirection to a third party (e.g., 3D Secure),\nthe redirect URL back to your site will include a `cko-session-id` query parameter\ncontaining a payment session ID that can be used to obtain the details of the payment, for example:\n\nhttp://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment or payment session identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay|sid)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment-details"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = await api.Payments.GetAsync(sessionId);\n\nif (payment.Approved)\n{            \n    var cardSourceId = payment.Source.AsCard().Id;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = api.paymentsClient().getAsync(sessionId).get();\n\nif (payment.isApproved()) {\n    String cardSourceId = ((CardSourceResponse)payment.getSource()).getId();\n}"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.get(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n\t$details = $checkout->payments()->details($threeDsSessionId);\n\treturn $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n\treturn $ex->getErrors();\n}"
          }
        ]
      }
    },
    "/payments/{id}/actions": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment actions",
        "description": "Returns all the actions associated with a payment ordered by processing date in descending order (latest first).\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment actions retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentActionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment-details"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nIEnumerable<PaymentAction> paymentActions = await api.Payments.GetActionsAsync(paymentId);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nList<PaymentAction> paymentActions = api.paymentsClient().getActionsAsync(paymentId).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.getActions(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
          }
        ]
      }
    },
    "/payments/{id}/authorizations": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Increment authorization",
        "description": "Request an incremental authorization to increase the authorization amount or extend the authorization's validity period (Mastercard only).\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Authorization processed successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Capture not allowed"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment-authorizations"
            ]
          }
        ]
      }
    },
    "/payments/{id}/captures": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Capture a payment",
        "description": "Captures a payment if supported by the payment method.\n\nFor card payments, capture requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the capture is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptureRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Capture accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptureAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Capture not allowed"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment-captures"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\nawait api.Payments.CaptureAsync(paymentId);\n\n// Or partial capture\nvar captureRequest = new CaptureRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.CaptureAsync(paymentId, captureRequest);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\napi.paymentsClient().captureAsync(paymentId).get();\n\n// Or partial capture\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().captureAsync(paymentId, captureRequest).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n    amount: 1000,\n    reference: 'CAPTURE ORDER 1234',\n    metadata: {\n        value: 'my value'\n    }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
          }
        ]
      }
    },
    "/payments/{id}/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund a payment",
        "description": "Refunds a payment if supported by the payment method.\n\nFor card payments, refund requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the refund is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Refund accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Refund not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment-refunds"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\nawait api.Payments.RefundAsync(paymentId);\n\n// Or partial refund\nvar refundRequest = new RefundRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.RefundAsync(paymentId, refundRequest);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\napi.paymentsClient().refundAsync(paymentId).get();\n\n// Or partial refund\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().refundAsync(paymentId, refundRequest).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.refund(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"REFUND ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
          }
        ]
      }
    },
    "/payments/{id}/voids": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Void a payment",
        "description": "Voids a payment if supported by the payment method.\n\nFor card payments, void requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the void is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Void accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Void not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "gateway",
              "gateway:payment-voids"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nawait api.Payments.VoidAsync(paymentId);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\napi.paymentsClient().voidAsync(paymentId).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.void(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"VOID ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
          }
        ]
      }
    },
    "/sessions": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Request a session",
        "description": "Create a payment session to authenticate a cardholder before requesting a payment.\nPayment sessions can be linked to one or more payments (in the case of recurring and other merchant-initiated payments).\n\nThe `next_actions` object in the response tells you which actions can be performed next. \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Session created successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionOkResponse"
                }
              }
            }
          },
          "202": {
            "description": "Session accepted successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the `channel_data` property in the request is browser related.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsValidationError"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "sessions:app",
              "sessions:browser"
            ]
          }
        ]
      }
    },
    "/sessions/{id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get session details",
        "description": "Returns the details of the session with the specified identifier string.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Session ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "header",
            "description": "Optionally provide the type of channnel so you only get the relevant actions",
            "schema": {
              "enum": [
                "browser",
                "app"
              ],
              "type": "string",
              "description": "If a value is not provided, and if the `status` is `pending`, then `next_actions` will return `collect_channel_data` and if available, `issuer_fingerprint`.",
              "example": "browser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the session was initiated with the scope `sessions:browser`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "security": [
          {
            "OAuth": [
              "sessions:app",
              "sessions:browser"
            ]
          },
          {
            "SessionSecret": [ ]
          }
        ]
      }
    },
    "/sessions/{id}/collect-data": {
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update a session",
        "description": "Update a session by providing information about the environment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Session ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session updated. DS has processed the authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          },
          "422": {
            "description": "Unprocessable channel information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "SessionSecret": [ ]
          }
        ]
      }
    },
    "/sessions/{id}/complete": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Complete a session",
        "description": "Completes a session by posting the the following request to the callback URL (only relevant for non hosted sessions):\n```\n{\n   \"session_id\": \"sid_llraltf4jlwu5dxdtprcv7ba5i\",\n   \"amount\" : 6540,\n   \"currency\": \"USD\",\n   \"status\": \"approved\",\n   \"authentication_type\": \"regular\",\n   \"authentication_category\": \"payment\",\n   \"reference\": \"ORD-5023-4E89\",\n   \"approved\": true,\n   \"protocol_version\": \"2.1.0\",\n   \"response_code\": \"Y\",\n   \"response_reason\": \"01\",\n   \"cryptogram\": \"MTIzNDU2Nzg5MDA5ODc2NTQzMjE=\",\n   \"eci\": \"05\",\n   \"xid\": \"XSUErNftqkiTdlkpSk8p32GWOFA\",\n   \"cardholder_info\": \"Card declined. Please contact your issuing bank.\",\n   \"challenged\": true\n}\n```\n<br/>\nThe fields of the above are the same as they would be in a GET session response\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Session ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session completed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          }
        },
        "security": [
          {
            "SessionSecret": [ ]
          }
        ]
      }
    },
    "/sessions/{id}/issuer-fingerprint": {
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update session 3DS Method completion indicator",
        "description": "Update the session's 3DS Method completion indicator based on the result of accessing the 3DS Method URL.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Session ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreeDsMethodCompletion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session updated. Directory Server (DS) has processed the authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponseAfterChannelDataSupplied"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Session not found"
          },
          "422": {
            "description": "Unprocessable channel information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "SessionSecret": [ ]
          }
        ]
      }
    },
    "/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Request a token",
        "description": "Exchange card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes. \nTo create a token, please authenticate using your public key. \n\n**Please note:** You should only use this for testing purposes.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reference token created successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiPublicKey": [ ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\", { pk: \"pk_YYYY\" });\n\ntry {\n  const token = await cko.tokens.request({\n    // infered type: \"applepay\"\n    token_data: {\n      version: \"EC_v1\",\n      data: \"t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...\",\n      signature: \"MIAGCSqGbGUg...\",\n      header: {\n        ephemeralPublicKey: \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...\",\n        transactionId: \"3cee89679130a4b...\",\n      },\n    },\n  });\n} catch (err) {\n  console.log(err.name);\n}"
          }
        ]
      }
    },
    "/validation/bank-accounts/{country}/{currency}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get bank account fields",
        "description": "Returns the bank account fields required to create bank account instruments or perform payouts for the specified country and currency.\n",
        "parameters": [
          {
            "name": "country",
            "in": "path",
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a>\n",
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "path",
            "description": "The three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a>\n",
            "required": true,
            "schema": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "account-holder-type",
            "in": "query",
            "description": "The type of account holder that will be used to filter the fields returned\n",
            "schema": {
              "enum": [
                "individual",
                "corporate",
                "government"
              ],
              "type": "string"
            }
          },
          {
            "name": "payment-network",
            "in": "query",
            "description": "The banking network that will be used to filter the fields returned\n",
            "schema": {
              "enum": [
                "local",
                "sepa",
                "fps",
                "ach",
                "fedwire",
                "swift"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bank account fields retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountFields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Fields not found"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth": [
              "payout:bank-details"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "Checkout.com"
          },
          "address_line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "90 Tottenham Court Road"
          },
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "London"
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "London"
          },
          "zip": {
            "type": "string",
            "description": "The address zip/postal code",
            "example": "W1T 4TJ"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of the address",
            "example": "GB"
          }
        }
      },
      "Batch": {
        "required": [
          "id",
          "status",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^bat_(\\w{26})$",
            "type": "string",
            "description": "Batch identifier",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "Processing"
          },
          "_links": {
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "SubmitBatchRequest": {
        "required": [
          "file_id",
          "action"
        ],
        "type": "object",
        "properties": {
          "file_id": {
            "pattern": "^file_(\\w{26})$",
            "type": "string",
            "description": "The identifier of the batch file previously uploaded via the [Files API](#tag/Files)",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "action": {
            "enum": [
              "payment"
            ],
            "type": "string",
            "description": "The action to be performed against the batch",
            "example": "payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the batch. If provided, this will be validated against the batch file's header",
            "example": "payments-20180701"
          }
        },
        "description": "The batch request"
      },
      "SubmitBatchResponse": {
        "required": [
          "id",
          "status",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^bat_(\\w{26})$",
            "type": "string",
            "description": "Batch identifier",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The batch status",
            "example": "Processing"
          },
          "_links": {
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "CustomerRequest": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(cus)_(\\w{26})$",
            "type": "string",
            "description": "The identifier of an existing customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "format": "email",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jack Napier"
          }
        },
        "description": "The customer's details"
      },
      "CustomerResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(cus)_(\\w{26})$",
            "type": "string",
            "description": "The customer's unique identifier. This can be passed as a source when making a payment",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jack Napier"
          }
        },
        "description": "Stored customer details"
      },
      "Dispute": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(dsp)_(\\w{22})$",
            "type": "string",
            "description": "The dispute identifier. This is the same as the payment action ID",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "entity_id": {
            "type": "string",
            "description": "The client entity linked to this dispute",
            "example": "ent_wxglze3wwywujg4nna5fb7ldli"
          },
          "sub_entity_id": {
            "type": "string",
            "description": "The sub-entity linked to this dispute",
            "example": "ent_uzm3uxtssvmuxnyrfdffcyjxeu"
          },
          "category": {
            "enum": [
              "fraudulent",
              "unrecognized",
              "canceled_recurring",
              "product_service_not_received",
              "not_as_described",
              "credit_not_issued",
              "duplicate",
              "incorrect_amount",
              "general"
            ],
            "type": "string",
            "description": "The reason for the dispute. [Find out more](https://docs.checkout.com/four/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)",
            "example": "fraudulent"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency. This amount can be positive or negative depending on the type of transaction the dispute is received against",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The processing currency",
            "example": "GBP"
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code provided by the card scheme",
            "example": "C42"
          },
          "status": {
            "enum": [
              "evidence_required",
              "evidence_under_review",
              "resolved",
              "won",
              "lost",
              "canceled",
              "expired",
              "accepted",
              "arbitration_under_review",
              "arbitration_won",
              "arbitration_lost"
            ],
            "type": "string",
            "description": "The current status of the dispute",
            "example": "evidence_required"
          },
          "relevant_evidence": {
            "type": "array",
            "items": {
              "enum": [
                "proof_of_delivery_or_service",
                "invoice_or_receipt",
                "invoice_showing_distinct_transactions",
                "customer_communication",
                "refund_or_cancellation_policy",
                "recurring_transaction_agreement",
                "additional_evidence"
              ],
              "type": "strings",
              "example": "proof_of_delivery_or_service"
            },
            "description": "<i>This list and the dispute categories will change over time. Your evidence logic should be informed by this field, not hard coded.</i>"
          },
          "evidence_required_by": {
            "type": "string",
            "description": "The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer",
            "format": "ISO-8601",
            "example": "2018-08-21T00:00:00Z"
          },
          "received_on": {
            "type": "string",
            "description": "The date and time at which the dispute was issued",
            "format": "ISO-8601",
            "example": "2018-08-01T04:00:10Z"
          },
          "last_update": {
            "type": "string",
            "description": "The date and time at which the dispute was last updated",
            "format": "ISO-8601",
            "example": "2018-08-04T10:53:13Z"
          },
          "payment": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentData"
              }
            ],
            "description": "Provides details for the payment linked to the dispute"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
                  }
                },
                "description": "The dispute retrieval endpoint"
              },
              "evidence": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence"
                  }
                },
                "description": "The dispute evidence retrieval endpoint"
              }
            }
          }
        }
      },
      "DisputePaged": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The numbers of items to return",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The number of results to skip",
            "example": 10
          },
          "from": {
            "type": "string",
            "description": "The date and time from which to filter disputes, based on the dispute's `last_update` field",
            "format": "ISO-8601",
            "example": "2018-08-12T01:15:56Z"
          },
          "to": {
            "type": "string",
            "description": "The date and time until which to filter disputes, based on the dispute's `last_update` field",
            "format": "ISO-8601",
            "example": "2018-08-13T11:09:01Z"
          },
          "id": {
            "pattern": "^(dsp)_(\\w{22})$",
            "type": "string",
            "description": "The unique identifier of the dispute",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "entity_ids": {
            "type": "string",
            "description": "One or more comma-separated client entities. This works like a logical *OR* operator",
            "example": "ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku"
          },
          "sub_entity_ids": {
            "type": "string",
            "description": "One or more comma-separated sub-entities. This works like a logical *OR* operator",
            "example": "ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi"
          },
          "statuses": {
            "type": "string",
            "description": "One or more comma-separated statuses. This works like a logical *OR* operator",
            "example": "evidence_required,evidence_under_review"
          },
          "payment_id": {
            "pattern": "^(pay)_(\\w{26})$",
            "type": "string",
            "description": "The unique identifier of the payment",
            "example": "pay_88cb4e671m1da22e9bbbyx"
          },
          "payment_reference": {
            "type": "string",
            "description": "An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`",
            "example": "th7zxa1kcnqmes8"
          },
          "payment_arn": {
            "type": "string",
            "description": "The acquirer reference number (ARN) that you can use to query the issuing bank",
            "example": "74548998294293193445538"
          },
          "payment_mcc": {
            "type": "string",
            "description": "The merchant category code (MCC) of the payment (ISO 18245)",
            "example": "5021"
          },
          "this_channel_only": {
            "type": "boolean",
            "description": "If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business",
            "example": true
          },
          "total_count": {
            "type": "integer",
            "description": "The total number of disputes retrieved (without taking into consideration skip and limit parameters)",
            "example": 1
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeSummary"
            },
            "description": "The list of disputes"
          }
        }
      },
      "DisputeSummary": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(dsp)_(\\w{22})$",
            "type": "string",
            "description": "The dispute identifier. This is the same as the action ID in the reconciliation API or the charge ID in the Hub.",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "entity_id": {
            "type": "string",
            "description": "The client entity linked to this dispute",
            "example": "ent_wxglze3wwywujg4nna5fb7ldli"
          },
          "sub_entity_id": {
            "type": "string",
            "description": "The sub-entity linked to this dispute",
            "example": "ent_uzm3uxtssvmuxnyrfdffcyjxeu"
          },
          "category": {
            "enum": [
              "fraudulent",
              "unrecognized",
              "canceled_recurring",
              "product_service_not_received",
              "not_as_described",
              "credit_not_issued",
              "duplicate",
              "incorrect_amount",
              "general"
            ],
            "type": "string",
            "description": "The reason for the dispute. [Find out more](https://docs.checkout.com/four/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)",
            "example": "fraudulent"
          },
          "status": {
            "enum": [
              "evidence_required",
              "evidence_under_review",
              "resolved",
              "won",
              "lost",
              "canceled",
              "expired",
              "accepted",
              "arbitration_under_review",
              "arbitration_won",
              "arbitration_lost"
            ],
            "type": "string",
            "description": "The current status of the dispute",
            "example": "evidence_required"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The currency the payment was made in",
            "example": "GBP"
          },
          "payment_id": {
            "type": "string",
            "description": "The unique payment identifier",
            "example": "pay_88cb4e671m1da22e9bbbyx"
          },
          "payment_action_id": {
            "type": "string",
            "description": "The unique identifier of the payment action",
            "example": "act_mbabizu24mvu3mela5njyhpit4"
          },
          "payment_reference": {
            "type": "string",
            "description": "An optional reference (such as an order ID) a merchant can use to later identify the charge. Previously known as TrackId",
            "example": "th7zxa1kcnqmes8"
          },
          "payment_arn": {
            "type": "string",
            "description": "The acquirer reference number that can be used to query the issuing bank",
            "example": "74548998294293193445538"
          },
          "payment_mcc": {
            "type": "string",
            "description": "The merchant category code (MCC) of the payment (ISO 18245)",
            "example": "5021"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method/card scheme",
            "example": "VISA"
          },
          "evidence_required_by": {
            "type": "string",
            "description": "The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer",
            "format": "ISO-8601",
            "example": "2018-08-22T00:00:00Z"
          },
          "received_on": {
            "type": "string",
            "description": "The date and time at which the dispute was issued",
            "format": "ISO-8601",
            "example": "2018-08-01T01:15:56Z"
          },
          "last_update": {
            "type": "string",
            "description": "The date and time at which the dispute was last updated",
            "format": "ISO-8601",
            "example": "2018-08-12T04:15:56Z"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
                  }
                },
                "description": "The dispute retrieval endpoint"
              }
            }
          }
        }
      },
      "Evidence": {
        "type": "object",
        "properties": {
          "proof_of_delivery_or_service_file": {
            "type": "string",
            "description": "The file ID of the file you uploaded as a proof of delivery or service",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_text": {
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Delivery slip signed by the customer"
          },
          "proof_of_delivery_or_service_date_text": {
            "type": "string",
            "description": "The date on which the item was delivered. You can also use this field to provide a link",
            "example": "Merchandise was delivered on 2018-12-30"
          }
        }
      },
      "File": {
        "required": [
          "path",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The path of the file to upload and its type",
            "example": "file=@/path/receipt.png;type=image/png"
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the file upload. You must set this to `dispute_evidence`",
            "example": "dispute_evidence"
          }
        }
      },
      "FilePurpose": {
        "enum": [
          "dispute_evidence"
        ],
        "type": "string",
        "description": "The list of file upload purposes. Currently this is only `dispute_evidence`",
        "example": "dispute_evidence"
      },
      "FileResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "filename": {
            "type": "string",
            "description": "The filename, including its extension",
            "example": "receipt.jpg"
          },
          "purpose": {
            "$ref": "#/components/schemas/FilePurpose"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file upload object (in bytes)",
            "example": 1024
          },
          "uploaded_on": {
            "type": "string",
            "description": "The date and time file was uploaded (in UTC)",
            "format": "ISO-8601",
            "example": "2019-05-17T16:48:52Z"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
                  }
                },
                "description": "The file information retrieval URL"
              },
              "download": {
                "properties": {
                  "href": {
                    "example": "https://cabinet-upload-prod.s3.eu-west-1.amazonaws.com/ucdac/ucdac/6lbss42ezvoufcb2beo76rvwly?X-Amz-Expires=3600&x-amz-security-token=FQoDYXdzENL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEa"
                  }
                },
                "description": "The temporary file download URL. This expires after 60 minutes"
              }
            }
          }
        },
        "description": "File was retrieved successfully"
      },
      "FileUploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
                  }
                },
                "description": "The file information retrieval URL"
              }
            }
          }
        },
        "description": "File uploaded successfully"
      },
      "PaymentData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The payment's unique identifier",
            "example": "pay_mbabizu24mvu3mela5njyhpit4"
          },
          "action_id": {
            "type": "string",
            "description": "The unique identifier of the payment action",
            "example": "act_mbabizu24mvu3mela5njyhpit4"
          },
          "processing_channel_id": {
            "type": "string",
            "description": "The processing channel used for the payment",
            "example": "mer_q4dbxom5jbgudnjzjpz7j2z6uq"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The payment currency",
            "example": "GBP"
          },
          "method": {
            "type": "string",
            "description": "The payment method used",
            "example": "Visa"
          },
          "arn": {
            "type": "string",
            "description": "The acquirer reference number (ARN)",
            "example": "AA246873253573571073808"
          },
          "mcc": {
            "type": "string",
            "description": "The merchant category code (MCC) for the payment (ISO 18245)",
            "example": "5021"
          },
          "3ds": {
            "type": "object",
            "properties": {
              "enrolled": {
                "type": "string",
                "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
                "example": "Y"
              },
              "version": {
                "type": "string",
                "description": "Indicates the version of 3D Secure that was used for authentication",
                "example": "2.1.0"
              }
            },
            "description": "Provides information relating to the processing of 3D Secure payments"
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. \nApplicable for 3D Secure and network token payments\n",
            "example": "06"
          },
          "has_refund": {
            "type": "boolean",
            "description": "Indicates if there is any refund against the payment"
          },
          "processed_on": {
            "type": "string",
            "description": "The date and time at which the payment was requested",
            "format": "ISO-8601",
            "example": "2018-08-01T08:18:10Z"
          }
        }
      },
      "ProvideEvidenceRequest": {
        "type": "object",
        "properties": {
          "proof_of_delivery_or_service_file": {
            "type": "string",
            "description": "A file containing proof of delivery of goods or services",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "http://checkout.com/document.pdf"
          },
          "invoice_or_receipt_file": {
            "type": "string",
            "description": "A file containing an invoice/receipt",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "invoice_or_receipt_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the invoice"
          },
          "invoice_showing_distinct_transactions_file": {
            "type": "string",
            "description": "A file containing invoice showing two distinct transactions",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "invoice_showing_distinct_transactions_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of invoice #1244 showing two transactions"
          },
          "customer_communication_file": {
            "type": "string",
            "description": "A file containing customer cummunication",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "customer_communication_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of an email exchange with the cardholder"
          },
          "refund_or_cancellation_policy_file": {
            "type": "string",
            "description": "A file containing refund/cancellation policy",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "refund_or_cancellation_policy_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the refund policy"
          },
          "recurring_transaction_agreement_file": {
            "type": "string",
            "description": "A file containing the recurring transaction agreement",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "recurring_transaction_agreement_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the recurring transaction agreement"
          },
          "additional_evidence_file": {
            "type": "string",
            "description": "A file containing additional supporting documents",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "additional_evidence_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Scanned document"
          },
          "proof_of_delivery_or_service_date_file": {
            "type": "string",
            "description": "A file showing the delivery date of the provided service/merchandise",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_date_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the customer receipt showing the merchandise was delivered on 2018-12-20"
          }
        }
      },
      "EntityAddress": {
        "title": "Address",
        "type": "object",
        "properties": {
          "address_line1": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string",
            "description": "The first line of the address. Note that the length of line 1 and line 2 combined must be at least 5 characters long",
            "example": "90 Tottenham Court Road"
          },
          "address_line2": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string",
            "description": "The second line of the address",
            "example": null
          },
          "city": {
            "maxLength": 300,
            "minLength": 2,
            "type": "string",
            "description": "The address city",
            "example": "London"
          },
          "state": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string",
            "description": "The address state (in the US, this is required and needs to be an ISO 3166-1 state code)",
            "example": null
          },
          "zip": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "The address zip/postal code",
            "example": "W1T4TJ"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "pattern": "[a-zA-Z]{2}",
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">ISO country code</a> of the address",
            "format": "ISO 3166-1",
            "example": "GB"
          }
        }
      },
      "EntityBasicResponse": {
        "title": "BasicResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the sub-entity",
            "example": "ent_wxglze3wwywujg4nna5fb7ldli"
          },
          "reference": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "A unique reference you can later use to identify this sub-entity",
            "example": "superhero1234"
          },
          "capabilities": {
            "$ref": "#/components/schemas/EntityCapabilities"
          }
        },
        "readOnly": true
      },
      "EntityBasicResponseWithLinks": {
        "title": "BasicResponseWithLinks",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityBasicResponse"
          },
          {
            "$ref": "#/components/schemas/EntityLinks"
          }
        ]
      },
      "EntityCapabilities": {
        "title": "Capabilities",
        "type": "object",
        "properties": {
          "payments": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "True if payments are enabled"
              }
            },
            "description": "Payment related capabilities of a sub-entity",
            "example": {
              "enabled": false
            }
          }
        }
      },
      "EntityCompany": {
        "title": "Company",
        "type": "object",
        "properties": {
          "business_registration_number": {
            "maxLength": 16,
            "minLength": 2,
            "type": "string",
            "description": "The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number",
            "example": "452349600005"
          },
          "legal_name": {
            "maxLength": 300,
            "minLength": 2,
            "type": "string",
            "description": "The legal name of the sub-entity",
            "example": "Super Hero Masks Inc."
          },
          "trading_name": {
            "maxLength": 300,
            "minLength": 2,
            "type": "string",
            "description": "The trading name of the sub-entity, also referred to as 'doing business as'",
            "example": "Super Hero Masks"
          },
          "principal_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityAddress"
              }
            ],
            "description": "The primary location of the company where business is performed"
          },
          "registered_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityAddress"
              }
            ],
            "description": "The registered address of the company"
          },
          "representatives": {
            "title": "Representatives",
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityRepresentative"
            },
            "description": "Information about representatives of this company"
          }
        },
        "description": "Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted."
      },
      "EntityContactDetails": {
        "title": "ContactDetails",
        "type": "object",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/EntityPhone"
          }
        },
        "description": "Contact details of this sub-entity"
      },
      "EntityCreateRequest": {
        "title": "CreateRequest",
        "required": [
          "reference"
        ],
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "reference": {
                "maxLength": 15,
                "minLength": 1,
                "type": "string",
                "description": "A unique reference you can later use to identify this sub-entity",
                "example": "superhero1234"
              }
            }
          },
          {
            "$ref": "#/components/schemas/EntityUpdateRequest"
          }
        ]
      },
      "EntityExtendedResponse": {
        "title": "ExtendedResponse",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityBasicResponse"
          },
          {
            "type": "object",
            "properties": {
              "contact_details": {
                "$ref": "#/components/schemas/EntityContactDetails"
              },
              "profile": {
                "$ref": "#/components/schemas/EntityProfile"
              },
              "company": {
                "$ref": "#/components/schemas/EntityCompany"
              },
              "individual": {
                "$ref": "#/components/schemas/EntityIndividual"
              }
            }
          },
          {
            "$ref": "#/components/schemas/EntityLinks"
          }
        ]
      },
      "EntityIndividual": {
        "title": "Individual",
        "type": "object",
        "properties": {
          "first_name": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "The individual's first name",
            "example": "John"
          },
          "middle_name": {
            "maxLength": 50,
            "type": "string",
            "description": "The individual's middle name",
            "example": "Paul"
          },
          "last_name": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "The individual's last name",
            "example": "Doe"
          },
          "trading_name": {
            "maxLength": 300,
            "minLength": 2,
            "type": "string",
            "description": "If applicable, the individual's trading name",
            "example": "Super Hero Masks"
          },
          "national_tax_id": {
            "maxLength": 16,
            "minLength": 2,
            "type": "string",
            "description": "The sub-entity's Tax Identification Code; for example, a Value Added Tax (VAT) Number in the UK",
            "example": "1234567"
          },
          "registered_address": {
            "title": "Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityAddress"
              }
            ],
            "description": "The registered address of the individual"
          }
        },
        "description": "Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted."
      },
      "EntityLinks": {
        "title": "Links",
        "type": "object",
        "properties": {
          "_links": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Link"
            },
            "example": {
              "self": {
                "href": "https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli"
              }
            }
          }
        }
      },
      "EntityPhone": {
        "title": "Phone",
        "type": "object",
        "properties": {
          "number": {
            "maxLength": 16,
            "minLength": 8,
            "type": "string",
            "description": "The phone number. This must not contain non-numeric characters and can't contain only zeros (For US numbers: Cannot start with 0 or 1 and must be at least 10 characters in length)",
            "example": "2345678910"
          }
        }
      },
      "EntityProfile": {
        "title": "Profile",
        "type": "object",
        "properties": {
          "urls": {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 300,
              "minLength": 4,
              "type": "string",
              "description": "A URL of a website the sub-entity accepts payments on.",
              "example": "https://www.superheroexample.com"
            },
            "description": "A collection of URLs of websites the sub-entity accepts payments on. All URLs joined with a space must be no longer than 4000 characters."
          },
          "mccs": {
            "maxItems": 5,
            "minItems": 1,
            "type": "array",
            "items": {
              "maxLength": 4,
              "minLength": 4,
              "type": "string",
              "description": "A 4-digit ISO 18245 merchant category code classifying the sub-entity's industry",
              "example": "5669"
            },
            "description": "A collection of 4-digit ISO 18245 merchant category codes classifying the sub-entity's industry"
          }
        },
        "description": "Information about the profile of the sub-entity, primarily regarding the products/services offered."
      },
      "EntityRepresentative": {
        "title": "Representative",
        "type": "object",
        "properties": {
          "first_name": {
            "maxLength": 300,
            "minLength": 2,
            "type": "string",
            "description": "The person's first name",
            "example": "John"
          },
          "middle_name": {
            "maxLength": 300,
            "type": "string",
            "description": "The person's middle name",
            "example": null
          },
          "last_name": {
            "maxLength": 300,
            "minLength": 2,
            "type": "string",
            "description": "The person's last name",
            "example": "Doe"
          },
          "address": {
            "title": "Address",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "address_line1": {
                    "maxLength": 300,
                    "minLength": 0,
                    "type": "string",
                    "description": "The first line of the address. If provided, the length of line 1 and line 2 combined must be at least 5 characters long",
                    "example": "90 Tottenham Court Road"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/EntityAddress"
              }
            ],
            "description": "The representative's address"
          },
          "identification": {
            "title": "Identification",
            "type": "object",
            "properties": {
              "national_id_number": {
                "maxLength": 25,
                "minLength": 1,
                "type": "string",
                "description": "The official ID number, as applicable in the representative's country (For US, this must be numeric otherwise alpha-numeric)",
                "example": "AB123456C"
              }
            },
            "description": "Identification of the representative, used for verification"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityPhone"
              }
            ],
            "description": "The phone number of the representative"
          }
        }
      },
      "EntityUpdateRequest": {
        "title": "UpdateRequest",
        "required": [
          "contact_details",
          "profile"
        ],
        "type": "object",
        "properties": {
          "contact_details": {
            "title": "ContactDetails",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityContactDetails"
              },
              {
                "required": [
                  "phone"
                ],
                "type": "object",
                "properties": {
                  "phone": {
                    "required": [
                      "number"
                    ],
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EntityPhone"
                      }
                    ],
                    "description": "The phone number of the sub-entity"
                  }
                }
              }
            ]
          },
          "profile": {
            "title": "Profile",
            "required": [
              "urls",
              "mccs"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityProfile"
              }
            ]
          },
          "company": {
            "title": "Company",
            "required": [
              "legal_name",
              "trading_name",
              "principal_address",
              "registered_address",
              "representatives"
            ],
            "type": "object",
            "properties": {
              "business_registration_number": {
                "maxLength": 16,
                "minLength": 2,
                "type": "string",
                "description": "The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number",
                "example": "452349600005"
              },
              "legal_name": {
                "maxLength": 300,
                "minLength": 2,
                "type": "string",
                "description": "The legal name of the sub-entity",
                "example": "Super Hero Masks Inc."
              },
              "trading_name": {
                "maxLength": 300,
                "minLength": 2,
                "type": "string",
                "description": "The trading name of the sub-entity, also referred to as 'doing business as'",
                "example": "Super Hero Masks"
              },
              "principal_address": {
                "title": "Address",
                "required": [
                  "address_line1",
                  "city",
                  "zip",
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EntityAddress"
                  }
                ],
                "description": "The primary location of the company where business is performed"
              },
              "registered_address": {
                "title": "Address",
                "required": [
                  "address_line1",
                  "city",
                  "zip",
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EntityAddress"
                  }
                ],
                "description": "The registered address of the company"
              },
              "representatives": {
                "title": "Representatives",
                "maxItems": 5,
                "minItems": 1,
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EntityRepresentative"
                    },
                    {
                      "required": [
                        "first_name",
                        "last_name",
                        "address"
                      ],
                      "type": "object",
                      "properties": {
                        "address": {
                          "required": [
                            "country"
                          ]
                        }
                      }
                    }
                  ]
                },
                "description": "Information about representatives of this company"
              }
            },
            "description": "Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted."
          },
          "individual": {
            "title": "Individual",
            "required": [
              "first_name",
              "last_name",
              "trading_name",
              "registered_address"
            ],
            "type": "object",
            "properties": {
              "first_name": {
                "maxLength": 50,
                "minLength": 2,
                "type": "string",
                "description": "The individual's first name",
                "example": "John"
              },
              "middle_name": {
                "maxLength": 50,
                "type": "string",
                "description": "The individual's middle name",
                "example": "Paul"
              },
              "last_name": {
                "maxLength": 50,
                "minLength": 2,
                "type": "string",
                "description": "The individual's last name",
                "example": "Doe"
              },
              "trading_name": {
                "maxLength": 300,
                "minLength": 2,
                "type": "string",
                "description": "If applicable, the individual's trading name",
                "example": "Super Hero Masks"
              },
              "national_tax_id": {
                "maxLength": 16,
                "minLength": 2,
                "type": "string",
                "description": "The sub-entity's Tax Identification Code; for example, a Value Added Tax (VAT) Number in the UK",
                "example": "1234567"
              },
              "registered_address": {
                "title": "Address",
                "required": [
                  "address_line1",
                  "city",
                  "zip",
                  "country"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EntityAddress"
                  }
                ],
                "description": "The registered address of the individual"
              }
            },
            "description": "Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted."
          }
        },
        "example": {
          "contact_details": {
            "phone": {
              "number": 2345678910
            }
          },
          "profile": {
            "urls": [
              "https://www.superheroexample.com"
            ],
            "mccs": [
              5669
            ]
          },
          "company": {
            "business_registration_number": "452349600005",
            "legal_name": "Super Hero Masks Inc.",
            "trading_name": "Super Hero Masks",
            "principal_address": {
              "address_line1": "90 Tottenham Court Road",
              "address_line2": null,
              "city": "London",
              "state": null,
              "zip": "W1T4TJ",
              "country": "GB"
            },
            "registered_address": {
              "address_line1": "90 Tottenham Court Road",
              "address_line2": null,
              "city": "London",
              "state": null,
              "zip": "W1T4TJ",
              "country": "GB"
            },
            "representatives": [
              {
                "first_name": "John",
                "middle_name": null,
                "last_name": "Doe",
                "address": {
                  "address_line1": "90 Tottenham Court Road",
                  "address_line2": null,
                  "city": "London",
                  "state": null,
                  "zip": "W1T4TJ",
                  "country": "GB"
                },
                "identification": {
                  "national_id_number": "AB123456C"
                },
                "phone": {
                  "number": 2345678910
                }
              }
            ]
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_malformed"
          }
        }
      },
      "BillingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "372 Weimann Lane"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "ew1 7zb"
          },
          "country": {
            "type": "string",
            "example": "SJ"
          },
          "city": {
            "type": "string",
            "example": "North Benedicthaven"
          },
          "state": {
            "type": "string",
            "example": "Georgia"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "cust_7508EA38E86A4569AF12E483519E332D"
          },
          "expiry_month": {
            "type": "string",
            "example": "06"
          },
          "expiry_year": {
            "type": "string",
            "example": "2018"
          },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "id": {
            "type": "string",
            "example": "card_D44D7F4CCC6348698717CD80072808B0"
          },
          "last4": {
            "type": "string",
            "example": "424242******4242"
          },
          "payment_method": {
            "type": "string",
            "example": "VISA"
          },
          "fingerprint": {
            "type": "string",
            "example": "f639cab2745bee4140bf86df6b6d6e255c5945aac3788d923fa047ea4c208622"
          },
          "name": {
            "type": "string",
            "example": "Test Customer"
          },
          "cvv_check": {
            "type": "string",
            "example": "Y"
          },
          "avs_check": {
            "type": "string",
            "example": "S"
          }
        }
      },
      "CustomerPaymentPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customer_plan_id": {
            "type": "string"
          },
          "card_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plan_track_id": {
            "type": "string"
          },
          "auto_cap_time": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "recurring_count": {
            "type": "integer"
          },
          "recurring_count_left": {
            "type": "integer"
          },
          "total_collected_value": {
            "type": "integer"
          },
          "total_collected_count": {
            "type": "integer"
          },
          "current_recurring_status": {
            "type": "integer"
          },
          "start_date": {
            "type": "string"
          },
          "previous_recurring_date": {
            "type": "string"
          },
          "next_recurring_date": {
            "type": "string"
          }
        }
      },
      "Data": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The payment unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The currency in which the payment was made (<a href=\"https://docs.checkout.com/docs/currency-codes\" target=\"blank\">three-letter ISO code</a>)",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment request was approved",
            "example": true
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code, if the payment was authorized.",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the payment was flagged by a risk check",
            "default": false,
            "example": true
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerResponse"
              }
            ],
            "description": "The customer to which this payment is linked"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        },
        "description": "The event data"
      },
      "EventId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The unique event identifier",
        "example": "evt_az5sblvku4ge3dwpztvyizgcau"
      },
      "EventLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau"
            }
          },
          "webhooks-retry": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "A link to retry all of the webhooks configured for the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/retry"
            }
          }
        },
        "description": "The links related to the event"
      },
      "EventObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventId"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "version": {
            "type": "string",
            "description": "Determines the version of the event sent",
            "example": "2.0"
          },
          "created_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the event occurred"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationSummary"
            },
            "description": "The notifications (e.g., webhooks) that have been sent for the event"
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventResult": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The total number of events",
            "example": 100
          },
          "limit": {
            "type": "integer",
            "description": "The `limit` query parameter",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The `skip` query parameter",
            "example": 10
          },
          "from": {
            "type": "string",
            "description": "The `from` query parameter",
            "format": "date-time",
            "example": "2018-01-01T00:00:00.0000000+00:00"
          },
          "to": {
            "type": "string",
            "description": "The `to` query parameter",
            "format": "date-time",
            "example": "2018-01-15T12:00:00.0000000+00:00"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSummary"
            }
          }
        }
      },
      "EventSummary": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 30,
            "minLength": 30,
            "type": "string",
            "description": "The event identifier",
            "example": "evt_az5sblvku4ge3dwpztvyizgcau"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "created_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the event occurred"
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventTypesObject": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "2.0"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "card_verification_declined",
              "card_verified",
              "dispute_canceled",
              "dispute_evidence_required",
              "dispute_expired",
              "dispute_lost",
              "dispute_resolved",
              "dispute_won",
              "payment_approved",
              "payment_risk_matched",
              "payment_pending",
              "payment_declined",
              "payment_expired",
              "payment_cancelled",
              "payment_voided",
              "payment_void_declined",
              "payment_captured",
              "payment_capture_declined",
              "payment_capture_pending",
              "payment_refunded",
              "payment_refund_declined",
              "payment_refund_pending",
              "payment_chargeback",
              "payment_retrieval"
            ]
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the data sent to the endpoint",
            "example": "json"
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationAttempt"
            },
            "description": "The notification events ordered by timestamp in descending order (latest first)"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the notification",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              },
              "retry": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to retry the notification to the configured webhook",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/wh_5nuzkt62ddxuho5rwsvt6pyesi/retry"
                }
              }
            },
            "description": "The links related to the notification"
          }
        }
      },
      "NotificationAttempt": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The HTTP status code returned from the target server",
            "example": 400
          },
          "response_body": {
            "type": "string",
            "description": "The response body returned from the target server",
            "example": "Bad Request"
          },
          "retry_mode": {
            "enum": [
              "Automatic",
              "Manual"
            ],
            "type": "string",
            "description": "Whether the notification was sent automatically or requested manually"
          },
          "timestamp": {
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the attempt was made"
          }
        }
      },
      "NotificationId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The unique notification identifier",
        "example": "ntf_az5sblvku4ge3dwpztvyizgcau"
      },
      "NotificationSummary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              }
            },
            "description": "The links related to the notification"
          }
        }
      },
      "Phone": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "975"
          },
          "number": {
            "type": "string",
            "example": "174217187"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tablet 1 gold limited"
          },
          "description": {
            "type": "string",
            "example": "Nokia Lumia"
          },
          "sku": {
            "type": "string",
            "example": "1aab2aa"
          },
          "price": {
            "type": "integer",
            "example": 100
          },
          "quantity": {
            "type": "integer",
            "example": 1
          },
          "image": {
            "type": "string",
            "example": "http://www.test_Jabari.com/"
          },
          "shipping_cost": {
            "type": "integer",
            "example": 10
          },
          "tracking_url": {
            "type": "string",
            "example": "https://www.tracker.com"
          }
        }
      },
      "ShippingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "333 Cormier Bypass"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "BR3 6TK"
          },
          "country": {
            "type": "string",
            "example": "GB"
          },
          "city": {
            "type": "string",
            "example": "Bromley"
          },
          "state": {
            "type": "string",
            "example": "Greater London"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "get-event-action-response": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "string",
            "description": "The unique event identifier",
            "example": "evt_az5sblvku4ge3dwpztvyizgcau"
          },
          "workflow_action_id": {
            "type": "string",
            "description": "The worfklow action identifier",
            "example": "wfa_uzkxpffkvpiu5fe3h5ira7sqpa"
          },
          "type": {
            "type": "string",
            "description": "The workflow action type",
            "example": "webhook"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the workflow action was successful",
            "example": true
          },
          "invocations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "The date/time the action was invoked for the event",
                  "format": "date-time"
                },
                "success": {
                  "type": "boolean",
                  "description": "Whether the invocation completed successfully"
                },
                "result": {
                  "type": "object",
                  "description": "The results returned from the action"
                },
                "is_final": {
                  "type": "boolean",
                  "description": "Whether this is the final attempt",
                  "example": false
                }
              }
            },
            "description": "The results for each action invocation",
            "example": [
              {
                "timestamp": "2019-05-23T08:26:59.0000000+00:00",
                "success": false,
                "result": {
                  "status_code": 500,
                  "summary": "Server Error"
                },
                "is_final": false
              },
              {
                "timestamp": "2019-05-23T08:27:01.0000000+00:00",
                "success": true,
                "result": {
                  "status_code": 200,
                  "summary": "OK"
                },
                "is_final": true
              }
            ]
          }
        }
      },
      "get-event-response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique event identifier",
            "example": "evt_az5sblvku4ge3dwpztvyizgcau"
          },
          "source": {
            "type": "string",
            "description": "The source of the event",
            "example": "gateway"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "timestamp": {
            "type": "string",
            "description": "The date/time the event occurred",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "description": "The version of the event",
            "example": "1.0.0"
          },
          "data": {
            "$ref": "#/components/schemas/event-data"
          },
          "_links": {
            "$ref": "#/components/schemas/event-links"
          }
        }
      },
      "get-event-types-response": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the event source",
              "example": "gateway"
            },
            "display_name": {
              "type": "string",
              "description": "The display name of the event source",
              "example": "Gateway"
            },
            "description": {
              "type": "string",
              "description": "A description of the event source",
              "example": "Events from the Checkout.com payment gateway"
            },
            "events": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The event type identifier",
                    "example": "payment_approved"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "The display name of the event",
                    "example": "Payment Authorized"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the event",
                    "example": "Occurs when a payment is successfully authorized by the Checkout.com payment gateway"
                  }
                }
              },
              "description": "The events raised by the source"
            }
          }
        }
      },
      "event-data": {
        "type": "object",
        "description": "The event data",
        "example": {
          "id": "pay_mbabizu24mvu3mela5njyhpit4",
          "action_id": "act_y3oqhf46pyzuxjbcn2giaqnb44",
          "amount": 6540,
          "currency": "USD",
          "approved": true,
          "status": "Authorized",
          "auth_code": 643381,
          "response_code": 10000,
          "response_summary": "Approved",
          "3ds": {
            "downgraded": true,
            "enrolled": "N"
          },
          "flagged": true,
          "source": {
            "type": "card",
            "id": "src_nwd3m4in3hkuddfpjsaevunhdy",
            "billing_address": {
              "address_line1": "Checkout.com",
              "address_line2": "90 Tottenham Court Road",
              "city": "London",
              "state": "London",
              "zip": "W1T 4TJ",
              "country": "GB"
            },
            "phone": {
              "country_code": 1,
              "number": "415 555 2671"
            }
          },
          "customer": {
            "id": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "email": "jokershere@gmail.com",
            "name": "Jack Napier"
          },
          "processed_on": "2020-02-27T11:26:59.0000000+00:00",
          "reference": "ORD-5023-4E89",
          "metadata": {
            "coupon_code": "NY2018",
            "partner_id": 123989
          }
        }
      },
      "event-links": {
        "minItems": 1,
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the event"
          }
        },
        "description": "Links related to the event",
        "example": {
          "self": {
            "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau"
          }
        }
      },
      "source-events-hashmap": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The source event types",
            "example": "payment_approved"
          },
          "description": "The event source"
        },
        "example": {
          "gateway": [
            "card_verified",
            "card_verification_declined",
            "payment_approved",
            "payment_pending",
            "payment_declined",
            "payment_voided",
            "payment_captured",
            "payment_refunded"
          ],
          "disputes": [
            "dispute_canceled",
            "dispute_evidence_required",
            "dispute_expired",
            "dispute_lost",
            "dispute_resolved",
            "dispute_won"
          ]
        }
      },
      "subject-events-response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique event identifier",
                  "example": "evt_az5sblvku4ge3dwpztvyizgcau"
                },
                "type": {
                  "type": "string",
                  "description": "The event type",
                  "example": "payment_approved"
                },
                "timestamp": {
                  "type": "string",
                  "description": "The date/time the event occurred",
                  "format": "date-time"
                },
                "_links": {
                  "$ref": "#/components/schemas/event-links"
                }
              }
            },
            "example": [
              {
                "id": "evt_zrrgsvsr47ou7fng4shy4mtf64",
                "type": "payment_approved",
                "timestamp": "2019-05-23T08:25:53.0000000+00:00",
                "_links": {
                  "self": {
                    "href": "https://api.checkout.com/events/evt_zrrgsvsr47ou7fng4shy4mtf64"
                  }
                }
              },
              {
                "id": "evt_wgwdfyem4ode5furs5swyy6b2u",
                "type": "payment_captured",
                "timestamp": "2019-05-24T07:00:53.0000000+00:00",
                "_links": {
                  "self": {
                    "href": "https://api.checkout.com/events/evt_zrrgsvsr47ou7fng4shy4mtf64"
                  }
                }
              }
            ]
          }
        }
      },
      "webhook-action": {
        "required": [
          "url"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/workflow-action"
          },
          {
            "required": [
              "url"
            ],
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "Your webhook endpoint URL",
                "format": "uri",
                "example": "https://example.com/webhooks/checkout"
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "description": "The HTTP header value"
                },
                "description": "Optional [HTTP headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) added to the request",
                "example": {
                  "Authorization": "70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf"
                }
              },
              "signature": {
                "required": [
                  "key"
                ],
                "type": "object",
                "properties": {
                  "method": {
                    "type": "enum - HMACSHA256",
                    "description": "The signing method, defaults to HMAC SHA256",
                    "example": "HMACSHA256"
                  },
                  "key": {
                    "type": "string",
                    "description": "The key used the sign the webhook",
                    "example": "public-signing-key"
                  }
                },
                "description": "Used to produce a signature of the webhook contents that will be included in the `Cko-Signature` header. This value can be computed by you on receipt of a webhook to validate its authenticity."
              }
            }
          }
        ],
        "description": "Action that sends a webhook"
      },
      "workflow-action": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of workflow action",
            "example": "webhook"
          }
        },
        "description": "The workflow action",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "webhook": "#/components/schemas/webhook-action"
          }
        }
      },
      "add-workflow-request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name you can use to describe your workflow",
            "example": "Webhooks workflow"
          },
          "conditions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "event"
                  ],
                  "type": "string",
                  "example": "event"
                },
                "events": {
                  "$ref": "#/components/schemas/source-events-hashmap"
                }
              }
            },
            "description": "One or more workflow conditions"
          },
          "actions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workflow-action"
            },
            "description": "One or more workflow actions"
          }
        },
        "example": {
          "name": "Webhooks workflow",
          "conditions": [
            {
              "type": "event",
              "events": {
                "gateway": [
                  "payment_approved",
                  "payment_pending",
                  "payment_declined"
                ]
              }
            }
          ],
          "actions": [
            {
              "type": "webhook",
              "url": "https://example.com/webhooks",
              "signature": {
                "key": "8V8x0dLK%AyD*DNS8JJr"
              },
              "headers": {
                "Authorization": "70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf"
              }
            }
          ]
        }
      },
      "add-workflow-response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The workflow identifier",
            "example": "wf_wlu3wxc26jounofs5iez75qaqa"
          },
          "_links": {
            "$ref": "#/components/schemas/workflow-links"
          }
        }
      },
      "get-all-workflows-response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "pattern": "^wf_[a-z0-9]{26}$",
                  "type": "string",
                  "description": "The unique identifier of the workflow",
                  "example": "wf_wlu3wxc26jounofs5iez75qaqa"
                },
                "name": {
                  "type": "string",
                  "description": "The name of your workflow",
                  "example": "Webhooks workflow"
                },
                "_links": {
                  "$ref": "#/components/schemas/workflow-links"
                }
              }
            }
          }
        }
      },
      "get-workflow-response": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name you can use to describe your workflow",
            "example": "Webhooks workflow"
          },
          "conditions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "event"
                  ],
                  "type": "string",
                  "example": "event"
                },
                "events": {
                  "$ref": "#/components/schemas/source-events-hashmap"
                }
              }
            },
            "description": "One or more workflow conditions"
          },
          "actions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workflow-action"
            },
            "description": "One or more workflow actions"
          },
          "_links": {
            "$ref": "#/components/schemas/workflow-links"
          }
        }
      },
      "workflow-links": {
        "minItems": 1,
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the workflow"
          }
        },
        "description": "Links related to the workflow",
        "example": {
          "self": {
            "href": "https://api.checkout.com/workflows/wf_wlu3wxc26jounofs5iez75qaqa"
          }
        }
      },
      "QuoteId": {
        "maxLength": 30,
        "minLength": 30,
        "pattern": "^(qte)_(\\w{26})$",
        "type": "string",
        "description": "The FX quote identifier",
        "example": "qte_mbabizu24mvu3mela5njyhpit4"
      },
      "QuoteRequest": {
        "required": [
          "source_currency",
          "destination_currency"
        ],
        "type": "object",
        "properties": {
          "source_currency": {
            "type": "string",
            "description": "The source three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a>",
            "example": "GBP"
          },
          "source_amount": {
            "type": "integer",
            "description": "The amount to be converted from the source currency in the minor currency unit.\n\nThe amount must be provided in the <a href=\"https://docs.checkout.com/four/resources/calculating-the-amount\" target=\"_blank\">minor currency unit</a>.\n",
            "example": 30000
          },
          "destination_currency": {
            "type": "string",
            "description": "The destination three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a>",
            "example": "USD"
          },
          "destination_amount": {
            "type": "integer",
            "description": "The amount to be converted to the destination currency in the minor currency unit.\n\nThe amount must be provided in the <a href=\"https://docs.checkout.com/four/resources/calculating-the-amount\" target=\"_blank\">minor currency unit</a>.\n"
          }
        },
        "example": {
          "source_currency": "GBP",
          "source_amount": 30000,
          "destination_currency": "USD"
        }
      },
      "QuoteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteId"
              }
            ],
            "description": "The quote's unique identifier"
          },
          "source_currency": {
            "type": "string",
            "description": "The source three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a>",
            "example": "GBP"
          },
          "source_amount": {
            "type": "integer",
            "description": "The source currency amount",
            "example": 30000
          },
          "destination_currency": {
            "type": "string",
            "description": "The destination three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a>",
            "example": "USD"
          },
          "destination_amount": {
            "type": "integer",
            "description": "The destination currency amount",
            "example": 35700
          },
          "rate": {
            "type": "number",
            "description": "The quoted rate",
            "example": 1.19
          },
          "expires_on": {
            "type": "string",
            "description": "The date/time that the quote expires",
            "format": "date-time"
          },
          "is_single_use": {
            "type": "boolean",
            "description": "If the quote is restricted to a single use, or can be confirmed multiple times before expiry",
            "example": false
          }
        }
      },
      "AccountHolder": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "individual",
              "corporate",
              "government"
            ],
            "type": "string",
            "description": "The type of account holder",
            "example": "individual"
          },
          "first_name": {
            "type": "string",
            "description": "The account holder's first name. \nRequired if `type` is `individual`.\n",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "The account holder's last name.\nRequired if `type` is `individual`.\n",
            "example": "Smith"
          },
          "company_name": {
            "type": "string",
            "description": "The legal name of a registered company that holds the account.\nRequired if `type` is `corporate`.\n",
            "example": "Test company"
          },
          "tax_id": {
            "type": "string",
            "description": "The account holder's tax number/reference",
            "example": "123456"
          },
          "date_of_birth": {
            "type": "string",
            "description": "The account holder's date of birth in `YYYY-MM-DD` format",
            "format": "date",
            "example": "1986-01-01T00:00:00.0000000"
          },
          "country_of_birth": {
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of the account holder's country of birth",
            "example": "GB"
          },
          "residential_status": {
            "enum": [
              "resident",
              "non_resident"
            ],
            "type": "string",
            "description": "The account holder's residential status",
            "example": "resident"
          },
          "billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The billing address of the account holder"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The phone number of the account holder"
          },
          "identification": {
            "$ref": "#/components/schemas/AccountHolderIdentification"
          },
          "email": {
            "type": "string",
            "description": "The account holder's email address",
            "format": "email",
            "example": "test.user@checkout.com"
          }
        },
        "description": "The account holder details"
      },
      "AccountHolderIdentification": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "passport",
              "driving_licence",
              "national_id",
              "company_registration",
              "tax_id"
            ],
            "type": "string",
            "description": "The type of identification used to identify the account holder",
            "example": "passport"
          },
          "number": {
            "type": "string",
            "description": "The identification number",
            "example": "09876"
          },
          "issuing_country": {
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of the country that issued the identification",
            "example": "US"
          }
        },
        "description": "Bank account holder's proof of identification"
      },
      "BankDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The bank's name",
            "example": "Lloyds TSB"
          },
          "branch": {
            "type": "string",
            "description": "The bank branch's name",
            "example": "Bournemouth"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The bank's contact address"
          }
        },
        "description": "Details of the bank"
      },
      "StoreBankAccountInstrumentRequest": {
        "required": [
          "currency",
          "country"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StoreInstrumentRequest"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of instrument"
          },
          "account_type": {
            "enum": [
              "savings",
              "current",
              "cash"
            ],
            "type": "string",
            "description": "The type of account",
            "example": "savings"
          },
          "account_number": {
            "type": "string",
            "description": "Number (which can contain letters) that identifies the account",
            "example": "13654567455"
          },
          "bank_code": {
            "type": "string",
            "description": "Code that identifies the bank",
            "example": "123-456"
          },
          "branch_code": {
            "type": "string",
            "description": "Code that identifies the bank branch",
            "example": "6443"
          },
          "iban": {
            "type": "string",
            "description": "Internationally agreed standard for identifying bank account",
            "example": "HU93116000060000000012345676"
          },
          "bban": {
            "type": "string",
            "description": "The combination of bank code and/or branch code and account number",
            "example": "3704 0044 0532 0130 00"
          },
          "swift_bic": {
            "type": "string",
            "description": "8 or 11 character code which identifies the bank or bank branch",
            "example": "37040044"
          },
          "currency": {
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a> of the account's currency",
            "example": "GBP"
          },
          "country": {
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of where the account is based",
            "example": "GB"
          },
          "account_holder": {
            "$ref": "#/components/schemas/AccountHolder"
          },
          "bank": {
            "$ref": "#/components/schemas/BankDetails"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          }
        },
        "description": "Store bank account details"
      },
      "StoreBankAccountInstrumentResponse": {
        "required": [
          "fingerprint"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/StoreInstrumentResponse"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized)",
            "example": "card"
          },
          "fingerprint": {
            "pattern": "^([a-z0-9]{26})$",
            "type": "string",
            "description": "A token that can uniquely identify this instrument across all customers",
            "example": "vnsdrvikkvre3dtrjjvlm5du4q"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResponse"
          }
        },
        "description": "Store bank account instrument response"
      },
      "StoreInstrumentRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of instrument"
          }
        },
        "description": "The type of instrument to be stored",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "bank_account": "#/components/schemas/StoreBankAccountInstrumentRequest"
          }
        }
      },
      "StoreInstrumentResponse": {
        "required": [
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of instrument"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source or destination that can be used later for payments",
            "example": "src_wmlfc3zyhqzehihu7giusaaawu"
          }
        },
        "description": "The response for type of instrument stored",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "bank_account": "#/components/schemas/StoreBankAccountInstrumentResponse"
          }
        }
      },
      "InvalidError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "IPAddress": {
        "type": "string",
        "format": "ipv4",
        "example": "90.197.169.245"
      },
      "Link": {
        "required": [
          "href"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The link URL"
          }
        }
      },
      "SelfLink": {
        "required": [
          "rel"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "enum": [
              "self"
            ],
            "type": "string",
            "description": "The link type"
          }
        }
      },
      "PagingError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "paging_limit_invalid"
            }
          }
        }
      },
      "3dsData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Inidicates whether this was a 3D Secure payment downgraded to non-3D Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          },
          "signature_valid": {
            "type": "string",
            "description": "Verification to ensure the integrity of the response",
            "example": "Y"
          },
          "authentication_response": {
            "type": "string",
            "description": "Indicates whether or not the cardholder was authenticated\n  * `Y` - Customer authenticated\n  * `N` - Customer not authenticated\n  * `A` - An authentication attempt occurred but could not be completed\n  * `U` - Unable to perform authentication\n",
            "example": "Y"
          },
          "cryptogram": {
            "type": "string",
            "description": "Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the integrity of the 3D secure payment data",
            "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
          },
          "xid": {
            "type": "string",
            "description": "Unique identifier for the transaction assigned by the MPI",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          },
          "version": {
            "type": "string",
            "description": "Indicates the version of 3D Secure that was used for authentication",
            "example": "2.1.0"
          }
        }
      },
      "3dsEnrollmentData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Indicates whether this was a 3D Secure payment downgraded to non-3D-Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          }
        }
      },
      "3dsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether to process this payment as a 3D Secure payment",
            "default": false,
            "example": true
          },
          "attempt_n3d": {
            "type": "boolean",
            "description": "Determines whether to attempt a 3D Secure payment as non-3D Secure\nshould the card issuer not be enrolled\n",
            "default": false,
            "example": true
          },
          "eci": {
            "type": "string",
            "description": "The Electronic Commerce Indicator security level associated with the 3D Secure enrollment result. Required if using a third-party merchant plug-in (MPI)",
            "example": "05"
          },
          "cryptogram": {
            "type": "string",
            "description": "A Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the cardholder authentication result (3D Secure). Required if using an external MPI",
            "example": "AgAAAAAAAIR8CQrXcIhbQAAAAAA="
          },
          "xid": {
            "type": "string",
            "description": "The 3D Secure transaction identifier. Required if using an external MPI with 3D Secure 2.X.X and a Mastercard card, or with 3D Secure 1.X.X for any supported card scheme",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          },
          "version": {
            "type": "string",
            "description": "Indicates the version of 3D Secure that was used for authentication. Defaults to 1.0.0 if not provided",
            "example": "2.0.1"
          }
        },
        "description": "Information required for 3D Secure payments"
      },
      "ActionId": {
        "maxLength": 30,
        "minLength": 30,
        "pattern": "^(act)_(\\w{26})$",
        "type": "string",
        "description": "The action identifier",
        "example": "act_y3oqhf46pyzuxjbcn2giaqnb44"
      },
      "AuthorizationRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to increase the authorization by. Omit the amount or provide a value of `0` to extend the authorization validity period (Mastercard-only)\n",
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this authorization request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the authorization request. This can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "AuthorizationResponse": {
        "required": [
          "action_id",
          "amount",
          "currency",
          "approved",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether or not the authorization was successful",
            "example": true
          },
          "status": {
            "enum": [
              "Authorized",
              "Declined"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code if the payment was authorized",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "expires_on": {
            "type": "string",
            "description": "The timestamp (ISO 8601 code) for when the authorization's validity period ends"
          },
          "balances": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseBalances"
              }
            ],
            "description": "The payment balances"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              }
            },
            "description": "Returns information related to the processing of the payment"
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. Applicable for 3D Secure and network token payments",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier",
            "example": "489341065491658"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "authorize": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to increment the authorization, where applicable"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "authorize": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
              },
              "void": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
              },
              "capture": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
              }
            }
          }
        },
        "description": "Authorization Response"
      },
      "BankAccountFields": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the section",
                  "example": "Account Details"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "display",
                      "type",
                      "required"
                    ],
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "account_holder.first_name"
                      },
                      "section": {
                        "type": "string",
                        "description": "The section to display the field in",
                        "example": "account"
                      },
                      "display": {
                        "type": "string",
                        "description": "The field's display name",
                        "example": "First name"
                      },
                      "help_text": {
                        "type": "string",
                        "description": "The help text that explains the purpose of the field",
                        "example": "The account holder's first name. Required if type is individual."
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of field",
                        "example": "string"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "Whether the field is required",
                        "example": true
                      },
                      "validation_regex": {
                        "type": "string",
                        "description": "A regular expression that can be used to validate the input of the field",
                        "example": "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,18}$"
                      },
                      "min_length": {
                        "type": "integer",
                        "description": "The minimum length of the field",
                        "example": 22
                      },
                      "max_length": {
                        "type": "integer",
                        "description": "The maximum length of the field",
                        "example": 22
                      },
                      "allowed_options": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The option identifier",
                              "example": "1"
                            },
                            "display": {
                              "type": "string",
                              "description": "The option display value",
                              "example": "Beneficiary"
                            }
                          }
                        },
                        "description": "The allowed options for the field"
                      },
                      "dependencies": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field_id": {
                              "type": "string",
                              "description": "The field identifier",
                              "example": "entity_type"
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the dependent field that match in order for this field to be displayed"
                            }
                          }
                        },
                        "description": "The field's dependencies"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "sections": [
            {
              "name": "Account Details",
              "fields": [
                {
                  "id": "iban",
                  "type": "string",
                  "display": "IBAN",
                  "description": "Number (which can contain letters) that identifies the account",
                  "section": "account",
                  "required": true,
                  "validation_regex": "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,18}$",
                  "min_length": 22,
                  "max_length": 22
                },
                {
                  "id": "account_holder.first_name",
                  "type": "string",
                  "display": "First name",
                  "description": "The account holder's first name",
                  "section": "account",
                  "required": true
                },
                {
                  "id": "account_holder.last_name",
                  "type": "string",
                  "display": "First name",
                  "description": "The account holder's last name",
                  "section": "account",
                  "required": true
                }
              ]
            }
          ]
        }
      },
      "BillingDescriptor": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 25,
            "type": "string",
            "description": "A dynamic description of the payment. \nApplies to card payments only.\n",
            "example": "SUPERHEROES.COM"
          },
          "city": {
            "minimum": 1,
            "maxLength": 13,
            "type": "string",
            "description": "The city from which the payment originated. \nApplies to card payments only.\n",
            "example": "GOTHAM"
          },
          "reference": {
            "type": "string",
            "description": "The reference that should be shown on the statement. \nRequired for payouts to bank accounts.\n"
          }
        },
        "description": "An optional dynamic billing descriptor displayed on the account owner's statement. <br />\n<i>Not supported for <a href=\"https://docs.checkout.com/four/marketplaces/sub-entity-payments\" target=\"_blank\">sub-entity payments</a>.</i>\n"
      },
      "CaptureAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the capture action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the capture request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be captured. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "For some alternative payments, the URI that the customer should be redirected to to complete the capture",
                "example": {
                  "href": "https://api.checkout.com/redirect/act_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the capture",
            "readOnly": true
          }
        },
        "description": "Capture response"
      },
      "CaptureRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to capture. If not specified, the full payment amount will be captured\n",
            "example": 6540
          },
          "capture_type": {
            "enum": [
              "NonFinal",
              "Final"
            ],
            "type": "string",
            "description": "The type of capture. If set to `Final`, the remaining available-to-capture balance will be voided",
            "example": "Final"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this capture request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the capture request. This can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "description": "The stock-keeping unit (SKU) identifier of the item",
            "example": "858818ac"
          },
          "name": {
            "type": "string",
            "description": "The name of the item or product",
            "example": "Kevlar batterang"
          },
          "description": {
            "type": "string",
            "description": "A description of the item or product",
            "example": "The fastest, hardest batterang known to man"
          },
          "image_url": {
            "type": "string",
            "description": "The URL of an image of the item or product",
            "format": "uri",
            "example": "http://example.com/batterang.jpg"
          },
          "price": {
            "type": "number",
            "description": "The unit price of the item or product in the minor currency unit",
            "example": 34.5
          },
          "quantity": {
            "type": "number",
            "description": "The number of the items purchased",
            "example": 2
          },
          "shipping_cost": {
            "type": "number",
            "description": "The shipping cost of the item",
            "example": 2.99
          },
          "shipping_tracking_url": {
            "type": "string",
            "description": "A URL to track the shipping status of the item",
            "format": "uri",
            "example": "http://www.dhl.co.uk/en/express/tracking.html?AWB=41f280bbe12cd787b47c&brand=DHL"
          }
        },
        "description": "The order line item or product that is being purchased"
      },
      "MarketplaceData": {
        "type": "object",
        "properties": {
          "sub_entity_id": {
            "type": "string",
            "description": "The sub-entity that the payment is being processed on behalf of",
            "example": "ent_rgyzti4x74xubmu72m6r3pvksa"
          }
        },
        "description": "Information related to marketplace payments"
      },
      "Payment": {
        "required": [
          "id",
          "requested_on",
          "amount",
          "currency",
          "status",
          "approved",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "requested_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was requested"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "destination": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseDestination"
              }
            ],
            "description": "The destination of the payment"
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/docs/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO",
              "Installment"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment was successful",
            "example": true
          },
          "expires_on": {
            "type": "string",
            "description": "The timestamp (ISO 8601 code) for when the authorization's validity period expires"
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Card Verified",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled",
              "Paid"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "balances": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseBalances"
              }
            ],
            "description": "The payment balances"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsData"
              }
            ],
            "description": "Provides information relating to the processing of 3D Secure payments"
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payments risk assessment results"
          },
          "customer": {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The unique identifier of the customer. This can be passed as a source when making a payment",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer's email address",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Jack Napier"
              }
            },
            "description": "The customer to which this payment is linked"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The payment shipping details"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketplaceData"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. \nApplicable for 3D Secure and network token payments\n",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier\n",
            "example": "488341541494658"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentActionSummary"
            },
            "description": "A summary of the payment's actions, \nreturned when a session ID is used to get the payment details\n"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "authorize": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to increment the authorization, where applicable"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "authorize": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
              },
              "refund": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
              }
            }
          }
        },
        "description": "Payment response"
      },
      "PaymentAcceptedResponse": {
        "required": [
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The payment's unique identifier",
            "readOnly": true
          },
          "status": {
            "enum": [
              "Pending"
            ],
            "type": "string",
            "description": "The status of the payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment request",
            "example": "ORD-5023-4E89"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerResponse"
              }
            ],
            "description": "The customer associated with the payment, if provided in the request"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3D Secure enrollment status"
          },
          "instruction": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstructionResponse"
              }
            ],
            "description": "Instruction details for payouts to bank accounts"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI that the customer should be redirected to in order to complete the payment",
                "example": {
                  "href": "https://api.checkout.com/3ds/pay_mbabizu24mvu3mela5njyhpit4"
                }
              }
            },
            "description": "The links related to the payment",
            "readOnly": true
          }
        },
        "description": "Payment response"
      },
      "PaymentAction": {
        "required": [
          "id",
          "type",
          "amount",
          "response_code",
          "processed_on"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier of the payment action"
          },
          "type": {
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund",
              "Payout"
            ],
            "type": "string",
            "description": "The type of action"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the action was processed"
          },
          "amount": {
            "type": "integer",
            "description": "The action amount",
            "example": 6540
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the action was successful",
            "example": true
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code for cards",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "authorization_type": {
            "enum": [
              "Final",
              "Estimated",
              "Incremental"
            ],
            "type": "string",
            "description": "The authorization type",
            "default": "Final"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the action",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_reference_number": {
                "type": "string",
                "description": "A unique identifier for the capture that is submitted to the card scheme during processing",
                "example": "24021219099007452440793"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              }
            },
            "description": "Returns information related to the processing of the payment"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to an action"
          }
        }
      },
      "PaymentActionsResponse": {
        "minItems": 1,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PaymentAction"
        },
        "description": "The payment actions\n",
        "example": [
          {
            "id": "act_fd3h6evhpn3uxdoqbuu3lqnqbm",
            "type": "Refund",
            "processed_on": "2018-01-20T10:30:48.0000000+00:00",
            "amount": 1000,
            "approved": true,
            "response_code": 10000,
            "response_summary": "Approved"
          },
          {
            "id": "act_gefycn3jcvuupboxfmqrhk2aym",
            "type": "Capture",
            "processed_on": "2018-01-17T10:30:48.0000000+00:00",
            "amount": 6540,
            "approved": true,
            "response_code": 10000,
            "response_summary": "Approved",
            "processing": {
              "acquirer_reference_number": 2.402121909900745E+22,
              "acquirer_transaction_id": 745244079
            },
            "metadata": {
              "shipping_ref": "MQIBN2"
            }
          },
          {
            "id": "act_y3oqhf46pyzuxjbcn2giaqnb44",
            "type": "Authorization",
            "processed_on": "2018-01-17T09:30:48.0000000+00:00",
            "amount": 6540,
            "approved": true,
            "auth_code": 643381,
            "response_code": 10000,
            "response_summary": "Approved",
            "reference": "ORD-5023-4E89",
            "processing": {
              "retrieval_reference_number": 909913440644,
              "acquirer_transaction_id": 4.406443090994999E+20
            }
          }
        ]
      },
      "PaymentActionSummary": {
        "required": [
          "id",
          "type",
          "response_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier of the payment action"
          },
          "type": {
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund"
            ],
            "type": "string",
            "description": "The type of action"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          }
        }
      },
      "PaymentDestination": {
        "required": [
          "id",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The OpenPay account identifier",
            "example": "vendor-123456"
          },
          "amount": {
            "type": "integer",
            "description": "The amount to be credited to the destination in the major currency unit",
            "example": "10.50"
          }
        },
        "description": "A destination for OpenPay payments \n"
      },
      "PaymentDetails": {
        "required": [
          "id",
          "requested_on",
          "amount",
          "currency",
          "status",
          "approved",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "requested_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was requested"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentDetailsResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "destination": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseDestination"
              }
            ],
            "description": "The destination of the payment"
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO",
              "Installment"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment was successful",
            "example": true
          },
          "expires_on": {
            "type": "string",
            "description": "The timestamp (ISO 8601 code) for when the authorization's validity period expires"
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Card Verified",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled",
              "Paid"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "balances": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseBalances"
              }
            ],
            "description": "The payment balances"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsData"
              }
            ],
            "description": "Provides information relating to the processing of 3D Secure payments"
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payments risk assessment results"
          },
          "customer": {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The unique identifier of the customer. This can be passed as a source when making a payment",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer's email address",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Jack Napier"
              }
            },
            "description": "The customer to which this payment is linked"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The payment shipping details"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketplaceData"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. \nApplicable for 3D Secure and network token payments\n",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier\n",
            "example": "488341541494658"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentActionSummary"
            },
            "description": "A summary of the payment's actions, \nreturned when a session ID is used to get the payment details\n"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "authorize": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to increment the authorization, where applicable"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "authorize": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
              },
              "refund": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
              }
            }
          }
        },
        "description": "Payment response"
      },
      "PaymentDetailsResponseSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),\nthis will be `card`\n",
            "example": "card"
          }
        },
        "description": "Payment source",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardSource",
            "currency_account": "#/components/schemas/02_PaymentResponseCurrencyAccountSource"
          }
        }
      },
      "PaymentId": {
        "maxLength": 30,
        "minLength": 30,
        "pattern": "^(pay)_(\\w{26})$",
        "type": "string",
        "description": "The payment identifier",
        "example": "pay_mbabizu24mvu3mela5njyhpit4"
      },
      "PaymentInstruction": {
        "type": "object",
        "properties": {
          "purpose": {
            "type": "string",
            "description": "An optional description of the payout purpose, for example Insurance claim or Remittance."
          },
          "desired_value_date": {
            "type": "string",
            "description": "The date (in ISO 8601 format) on which the recipient's account will be credited",
            "format": "date"
          },
          "desired_value_date_behavior": {
            "enum": [
              "pay_early",
              "pay_later",
              "do_not_pay"
            ],
            "type": "string",
            "description": "The behavior if the desired payout date is not achievable",
            "default": "pay_later",
            "example": "pay_later"
          },
          "charge_bearer": {
            "enum": [
              "OUR",
              "SHA",
              "BEN"
            ],
            "type": "string",
            "description": "Who should be charged the payout fee"
          },
          "repair": {
            "type": "boolean",
            "description": "Determines if the payment details can be modified to prevent payment return",
            "example": false
          },
          "scheme": {
            "enum": [
              "swift",
              "local",
              "instant"
            ],
            "type": "string",
            "description": "The preferred payment scheme or network the bank transfer will be sent through"
          },
          "quote_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteId"
              }
            ],
            "description": "The FX quote identifier. \nIf omitted, and the source and destination currencies differ, the current market exchange rate will be used. \n"
          }
        },
        "description": "Instruction details for payouts to bank accounts"
      },
      "PaymentInstructionResponse": {
        "type": "object",
        "properties": {
          "value_date": {
            "type": "string",
            "description": "The date (in ISO 8601 format) on which the recipient's account will be credited",
            "format": "date"
          }
        },
        "description": "Instruction details for payouts to bank accounts"
      },
      "PaymentRecipient": {
        "type": "object",
        "properties": {
          "dob": {
            "type": "string",
            "description": "The recipient's date of birth (yyyy-mm-dd)",
            "format": "date",
            "example": "1985-05-15T00:00:00.0000000"
          },
          "account_number": {
            "maxLength": 10,
            "minLength": 10,
            "type": "string",
            "description": "The first six digits and the last four digits of the primary recipient's card, without spaces, or up to ten digits of the primary recipient's account number",
            "example": "5555554444"
          },
          "zip": {
            "type": "string",
            "description": "The first part of the UK postcode (e.g., W1T 4TJ would be W1T)",
            "example": "W1T"
          },
          "first_name": {
            "type": "string",
            "description": "The recipient's first name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "The recipient's last name",
            "example": "Jones"
          }
        },
        "description": "Information about the recipent of the payment's funds. Relevant for VISA or Mastercard [domestic UK transactions processed by financial institutions](https://docs.checkout.com/four/risk-management/requirements-for-financial-institutions)."
      },
      "PaymentRequest": {
        "required": [
          "currency",
          "processing_channel_id"
        ],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          "destination": {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The payment amount. If a `destination` is specified, indicates the payout amount.\nOmit the amount or provide a value of `0` to perform a card verification.       \n\nThe amount must be provided in the <a href=\"https://docs.checkout.com/four/resources/calculating-the-amount\" target=\"blank\">minor currency unit</a>.\n",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n\nIf a `destination` is specified, indicates the currency of the payout.\n",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO",
              "Installment"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "merchant_initiated": {
            "type": "boolean",
            "description": "Flags the payment as a merchant-initiated transaction (MIT). <a href=\"https://docs.checkout.com/four/payments/use-saved-card-details/about-stored-card-details\" target=\"_blank\">Must be set to `true` for all MITs</a>."
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "authorization_type": {
            "enum": [
              "Final",
              "Estimated"
            ],
            "type": "string",
            "description": "The authorization type",
            "default": "Final"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true\n"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerRequest"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The shipping details"
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "processing_channel_id": {
            "type": "string",
            "description": "The processing channel to be used for the payment",
            "example": "mer_q4dbxom5jbgudnjzjpz7j2z6uq"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use <a href=\"https://docs.checkout.com/four/payments/use-saved-card-details/about-stored-card-details\" target=\"blank\">stored card details</a>, such as recurring payments –\nan existing payment identifier from the recurring series or the Scheme Transaction Id\n",
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment. Required for some risk checks"
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSender"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketplaceData"
          },
          "instruction": {
            "$ref": "#/components/schemas/PaymentInstruction"
          },
          "processing": {
            "$ref": "#/components/schemas/ProcessingSettings"
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.",
            "example": {
              "coupon_code": "NY2018"
            }
          }
        }
      },
      "PaymentRequestDestination": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payout destination type",
            "example": "token"
          }
        },
        "description": "The destination of the payout.<br><i>Use to request a payout to a bank account instrument.</i>",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "id": "#/components/schemas/01_PaymentRequestIdDestination"
          }
        }
      },
      "PaymentRequestSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type <br> *Note:* *To make a payment with full card details, you must be <a href=\"https://docs.checkout.com/four/risk-management/pci-compliance\" target=\"_blank\">SAQ D PCI compliant</a>*",
            "example": "card"
          }
        },
        "description": "The source of the payment.<br><i>Use to request a payment</i>.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenSource",
            "id": "#/components/schemas/02_PaymentRequestIdSource",
            "card": "#/components/schemas/03_PaymentRequestCardSource",
            "network_token": "#/components/schemas/04_PaymentRequestNetworkTokenSource",
            "currency_account": "#/components/schemas/05_PaymentRequestCurrencyAccountSource"
          }
        }
      },
      "PaymentResponse": {
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "approved",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The payment's unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/four/resources/codes/currency-codes\" target=\"_blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether or not the authorization or capture was successful",
            "example": true
          },
          "status": {
            "enum": [
              "Authorized",
              "Pending",
              "Card Verified",
              "Captured",
              "Declined",
              "Paid"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code if the payment was authorized",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "expires_on": {
            "type": "string",
            "description": "The timestamp (ISO 8601 code) for when the authorization's validity period expires"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether or not the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payment's risk assessment results"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerResponse"
              }
            ],
            "description": "The customer associated with the payment, if provided in the request"
          },
          "balances": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseBalances"
              }
            ],
            "description": "The payment balances"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              }
            },
            "description": "Returns information related to the processing of the payment"
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. Applicable for 3D Secure and network token payments",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier",
            "example": "489341065491658"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "authorize": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to increment the authorization, where applicable"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "authorize": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
              },
              "void": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
              },
              "capture": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
              }
            }
          }
        },
        "description": "Payment Response"
      },
      "PaymentResponseBalances": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "total_authorized": {
            "type": "integer",
            "description": "The total amount that has been authorized",
            "example": 6540
          },
          "total_voided": {
            "type": "integer",
            "description": "The total amount that has been voided",
            "example": 0
          },
          "available_to_void": {
            "type": "integer",
            "description": "The total amount that is still available for voiding",
            "example": 6540
          },
          "total_captured": {
            "type": "integer",
            "description": "The total amount that has been captured",
            "example": 0
          },
          "available_to_capture": {
            "type": "integer",
            "description": "The total amount that is still available for capture",
            "example": 6540
          },
          "total_refunded": {
            "type": "integer",
            "description": "The total amount that has been refunded",
            "example": 0
          },
          "available_to_refund": {
            "type": "integer",
            "description": "The total amount that is still available for refund",
            "example": 0
          }
        },
        "description": "The balances of the payment"
      },
      "PaymentResponseDestination": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment destination type.\n",
            "example": "card"
          }
        },
        "description": "Payment destination",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "bank_account": "#/components/schemas/02_PaymentResponseBankAccountDestination"
          }
        }
      },
      "PaymentResponseSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),\nthis will be `card`\n",
            "example": "card"
          }
        },
        "description": "Payment source",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardSource"
          }
        }
      },
      "PaymentSender": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "individual",
              "corporate",
              "instrument"
            ],
            "type": "string",
            "description": "The type of sender"
          },
          "reference": {
            "type": "string",
            "description": "The sender's reference for the payout"
          },
          "account_number": {
            "type": "string",
            "description": "The sender's account number (card payouts only)",
            "example": "424242424242424242"
          }
        },
        "description": "Information about the sender of the payment's funds",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "individual": "#/components/schemas/01_IndividualSender",
            "corporate": "#/components/schemas/02_CorporateSender",
            "instrument": "#/components/schemas/03_InstrumentSender"
          }
        }
      },
      "Payout": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/docs/calculating-the-value\" target=\"blank\">depends on the currency</a>.\nOmit the amount or provide a value of `0` to perform a card verification.\n",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/docs/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO",
              "Installment"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true\n"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` nor `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "The customer's details"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The shipping details"
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use <a href=\"https://docs.checkout.com/docs/stored-card-details\" target=\"blank\">stored card details</a>, such as recurring payments –\nan existing payment identifier from the recurring series or the Scheme Transaction Id\n",
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment. Required for some risk checks"
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSender"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "properties": {
              "mid": {
                "type": "string",
                "description": "Overrides the default merchant/acceptor identifier (MID) configured on your account",
                "example": "1234567"
              },
              "senderInformation": {
                "type": "object",
                "description": "Allows you to send <a href=\"https://docs.checkout.com/docs/sender-data-for-payouts\" target=\"_blank\">additional data</a> required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments."
              }
            },
            "description": "Use the processing object to influence or override the data sent during card processing"
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "ProcessingSettings": {
        "type": "object",
        "properties": {
          "mid": {
            "type": "string",
            "description": "Overrides the default merchant/acceptor identifier (MID) configured on your account",
            "example": "1234567"
          },
          "senderInformation": {
            "type": "object",
            "description": "Allows you to send additional data required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments.\n"
          },
          "aft": {
            "type": "boolean",
            "description": "Indicates whether the payment is an Account Funding Transaction"
          },
          "dlocal": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "description": "The two-letter ISO code of the cardholder's country.",
                "example": "MX"
              },
              "payer": {
                "type": "object",
                "properties": {
                  "document": {
                    "type": "string",
                    "description": "The cardholder's personal identification number. The identification required is country-specific. See the <a href=\"https://docs.dlocal.com/api-documentation/payins-api-reference/country-reference#documents\" target=\"_blank\">dLocal documentation</a> for more information.",
                    "example": "DocumentId"
                  },
                  "name": {
                    "type": "string",
                    "description": "The cardholder's full name.",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "description": "The cardholder's email address.",
                    "example": "john.doe@example.com"
                  }
                },
                "description": "Details about the cardholder."
              },
              "installments": {
                "type": "object",
                "properties": {
                  "count": {
                    "type": "string",
                    "description": "The number of payments to be made in the installment plan.",
                    "example": "3"
                  }
                },
                "description": "Details about the installments."
              }
            },
            "description": "Processing information required for dLocal payments."
          }
        },
        "description": "Use the processing object to influence or override the data sent during card processing"
      },
      "RefundAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the refund action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the refund request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be refunded. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the refund",
            "readOnly": true
          }
        },
        "description": "Refund response"
      },
      "RefundRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to refund. If not specified, the full payment amount will be refunded\n",
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this refund request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the refund request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "01_PaymentRequestIdDestination": {
        "required": [
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment instrument identifier",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              }
            }
          }
        ],
        "description": "An existing payment instrument"
      },
      "01_PaymentRequestTokenSource": {
        "required": [
          "token"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "pattern": "^(tok)_(\\w{26})$",
                "type": "string",
                "description": "The Checkout.com token (e.g., a card token)",
                "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The customer's billing address. This will override the billing address specified during tokenization"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The customer's phone number. This will override the phone number specified during tokenization"
              }
            }
          }
        ],
        "description": "A token payment source"
      },
      "02_PaymentRequestIdSource": {
        "required": [
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(src)_(\\w{26})$",
                "type": "string",
                "description": "The payment source identifer (e.g., a card source identifier)",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)",
                "example": "956"
              }
            }
          }
        ],
        "description": "An existing payment source"
      },
      "03_PaymentRequestCardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "type",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number (without separators)",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The name of the cardholder",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956"
              },
              "stored": {
                "type": "boolean",
                "description": "This must be set to `true` for payments that use <a href=\"https://docs.checkout.com/docs/stored-card-details\" target=\"blank\">stored card details</a>",
                "default": false,
                "example": true
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The billing address of the cardholder"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number of the cardholder"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "04_PaymentRequestNetworkTokenSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "type",
              "token",
              "expiry_month",
              "expiry_year",
              "token_type",
              "cryptogram",
              "eci"
            ],
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The network token PAN",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the token",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the token",
                "example": 2025
              },
              "token_type": {
                "enum": [
                  "vts",
                  "mdes",
                  "applepay",
                  "googlepay"
                ],
                "type": "string",
                "description": "The type of token"
              },
              "cryptogram": {
                "type": "string",
                "description": "The Base64 encoded cryptographic identifier (TAVV) used by card schemes to validate the token verification result. Optional if `previous_payment_id` is specified and `3ds.enabled` is false",
                "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
              },
              "eci": {
                "type": "string",
                "description": "The Electronic Commerce Indicator (ECI) security level associated with the token. Optional if `previous_payment_id` is specified and `3ds.enabled` is false\n",
                "example": "05"
              },
              "stored": {
                "type": "boolean",
                "description": "This must be set to `true` for payments that use <a href=\"https://docs.checkout.com/docs/stored-card-details\" target=\"blank\">stored card details</a>",
                "default": false,
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The customer's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The customer's phone number"
              }
            }
          }
        ],
        "description": "A network token payment source"
      },
      "05_PaymentRequestCurrencyAccountSource": {
        "required": [
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(ca)_(\\w{26})$",
                "type": "string",
                "description": "The ID of the currency account to be debited",
                "example": "ca_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "amount": {
                "minimum": 1,
                "type": "integer",
                "description": "If specified, indicates the amount in the _source_ currency to be paid out. If omitted, the root `amount` in the _destination_ currency will be used.\n\nThe amount must be provided in the <a href=\"https://docs.checkout.com/docs/calculating-the-value\" target=\"blank\">minor currency unit</a>.\n",
                "example": 6540
              }
            }
          }
        ],
        "description": "A currency account source"
      },
      "02_PaymentResponseBankAccountDestination": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseDestination"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(src)_(\\w{26})$",
                "type": "string",
                "description": "The payment instrument identifier"
              }
            }
          }
        ],
        "description": "A bank account payment destination"
      },
      "01_PaymentResponseCardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "required": [
              "expiry_month",
              "expiry_year",
              "last4",
              "fingerprint",
              "bin"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment source identifier that can be used for subsequent payments. For new sources, this will only be returned if the payment was approved",
                "example": "src_nwd3m4in3hkuddfpjsaevunhdy"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996"
              },
              "fingerprint": {
                "type": "string",
                "description": "Uniquely identifies this particular card number. You can use this to compare cards across customers.",
                "example": "F639CAB2745BEE4140BF86DF6B6D6"
              },
              "bin": {
                "maxLength": 6,
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347"
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              },
              "avs_check": {
                "type": "string",
                "description": "The Address Verification System check result",
                "example": "S"
              },
              "cvv_check": {
                "type": "string",
                "description": "The card verification value (CVV) check result",
                "example": "Y"
              },
              "payouts": {
                "type": "boolean",
                "description": "Whether the card supports payouts",
                "example": true
              },
              "fast_funds": {
                "type": "string",
                "description": "The fast funds eligibility of the card",
                "example": "d"
              },
              "payment_account_reference": {
                "type": "string",
                "description": "A unique reference to the underlying card for network tokens (e.g., Apple Pay, Google Pay)",
                "example": "EUNIX9AX7THOOJIEJ2AP6OOFAHGH4"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "02_PaymentResponseCurrencyAccountSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(ca)_(\\w{26})$",
                "type": "string",
                "description": "The ID of the currency account"
              },
              "amount": {
                "type": "integer",
                "description": "If specified, indicates the amount in the source currency to be paid out. If omitted, the root amount in the destination currency will be used.<br>The amount must be provided in the minor currency unit."
              }
            }
          }
        ],
        "description": "A currency account source"
      },
      "RiskRequest": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether a risk assessment should be performed",
            "default": true,
            "example": false
          }
        },
        "description": "Configures the risk assessment performed during the processing of the payment"
      },
      "01_IndividualSender": {
        "required": [
          "type",
          "first_name",
          "last_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentSender"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The sender type"
          },
          "first_name": {
            "type": "string",
            "description": "The sender's first name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "The sender's last name",
            "example": "Jones"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The sender's address"
          }
        },
        "description": "Store a previously tokenized instrument"
      },
      "02_CorporateSender": {
        "required": [
          "type",
          "company_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentSender"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The sender type"
          },
          "company_name": {
            "type": "string",
            "description": "The sender's company name"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The sender's address"
          }
        },
        "description": "Store a previously tokenized instrument"
      },
      "03_InstrumentSender": {
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentSender"
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The sender type"
          }
        },
        "description": "Store a previously tokenized instrument"
      },
      "VoidAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the void action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the void",
            "readOnly": true
          }
        },
        "description": "Void response"
      },
      "VoidRequest": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this void request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the void request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "VoidResponse": {
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The unique payment identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the void action"
          },
          "amount": {
            "type": "integer",
            "description": "The void amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/docs/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "example": "Voided"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the void was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 1,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the payment"
          }
        },
        "description": "Payment response"
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "country_code": {
            "maxLength": 7,
            "minLength": 1,
            "type": "string",
            "description": "The international <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">country calling code</a>. Required for some risk checks",
            "example": "+1"
          },
          "number": {
            "maxLength": 25,
            "minLength": 6,
            "type": "string",
            "description": "The phone number",
            "example": "415 555 2671"
          }
        },
        "description": "A phone number"
      },
      "ResourceId": {
        "maxLength": 50,
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "ServerTimestamp": {
        "type": "string",
        "description": "Read-only UTC timestamp, automatically assigned by us",
        "format": "date-time",
        "readOnly": true
      },
      "3dsId": {
        "maxLength": 36,
        "minLength": 36,
        "type": "string",
        "description": "Universally unique transaction identifier assigned by the 3DS Server to identify a single transaction.",
        "example": "sid_y3oqhf46pyzuxjbcn2giaqnb441"
      },
      "Acs": {
        "required": [
          "reference_number",
          "transaction_id",
          "operator_id",
          "url",
          "challenge_mandated",
          "authentication_type",
          "authentication_method"
        ],
        "type": "object",
        "properties": {
          "reference_number": {
            "maxLength": 32,
            "type": "string",
            "description": "EMVCo-assigned unique identifier to track approved ACS",
            "example": "ACSRefNum1234"
          },
          "transaction_id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Universally unique transaction identifier assigned by the ACS",
            "example": "be481bd1-1f1d-4ef8-9fa8-0fb2a38e3c87"
          },
          "operator_id": {
            "maxLength": 32,
            "type": "string",
            "description": "DS assigned ACS identifier",
            "example": "ACSRefNum1234"
          },
          "url": {
            "maxLength": 2048,
            "type": "string",
            "description": "Fully qualified URL of the ACS to be used for the challenge",
            "example": "https://server.acsdomainname.com"
          },
          "signed_content": {
            "maxLength": 512,
            "type": "string",
            "description": "Contains the JSON web signature (JWS) compact serialization created by the ACS for a challenged app authentication. (Example has been truncated for readability.)\n",
            "example": "eyJ4NWMiOlsiTUlJQjdEQ0NBWktnQXdJQkFnSVZBSzIxWEc5SVBCL083QzZjUTBvRlJJUkIwWDI0TUFvR0NDcUdTTTQ5QkFNQ01INHhDekFKQm"
          },
          "challenge_mandated": {
            "type": "boolean",
            "description": "Indicates whether a challenge is required for the transaction to be authorized"
          },
          "authentication_type": {
            "enum": [
              "static",
              "dynamic",
              "oob",
              "decoupled"
            ],
            "type": "string",
            "description": "The type of authentication"
          },
          "authentication_method": {
            "enum": [
              "static_passcode",
              "sms_otp",
              "fob_or_card_reader_otp",
              "app_otp",
              "otp_other",
              "kba",
              "oob_biometrics",
              "oob_login",
              "oob_other",
              "other"
            ],
            "type": "string",
            "description": "Authentication approach that the ACS used to authenticate the cardholder for this specific transaction.\n\nNote: This is in the results request (RReq) message from the ACS only. It is not passed to the 3DS Server URL.\n"
          },
          "challenge_cancel_reason": {
            "enum": [
              "cardholder_cancel",
              "transaction_timed_out",
              "challenge_timed_out",
              "transaction_error",
              "unknown",
              "sdk_timed_out"
            ],
            "type": "string",
            "description": "Indicator informing the ACS and the DS that the authentication has been cancelled"
          },
          "interface": {
            "enum": [
              "native_ui",
              "html"
            ],
            "type": "string"
          },
          "ui_template": {
            "enum": [
              "text",
              "single_select",
              "multi_select",
              "oob",
              "html_other"
            ],
            "type": "string"
          }
        },
        "description": "The access control server (ACS) information. Can be empty if the session is still pending or if communication with the ACS failed. This will be available when the channel data and issuer fingerprint result have been provided."
      },
      "Amount": {
        "maximum": 18446744073709551615,
        "minimum": 0,
        "type": "integer",
        "description": "The amount in the major currency",
        "example": 120
      },
      "App": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChannelData"
          },
          {
            "required": [
              "sdk_app_id",
              "sdk_max_timeout",
              "sdk_ephem_pub_key",
              "sdk_encrypted_data",
              "sdk_reference_number",
              "sdk_transaction_id",
              "sdk_interface_type",
              "sdk_ui_elements"
            ],
            "type": "object",
            "properties": {
              "channel": {
                "enum": [
                  "app"
                ],
                "type": "string"
              },
              "sdk_app_id": {
                "maxLength": 36,
                "minLength": 36,
                "type": "string",
                "description": "Universally unique ID created upon all installations and updates of the 3DS Requestor App on a consumer device. This will be newly generated and stored by the 3DS SDK for each installation or update.\n",
                "example": "dbd64fcb-c19a-4728-8849-e3d50bfdde39"
              },
              "sdk_max_timeout": {
                "minimum": 5,
                "type": "integer",
                "description": "Indicates maximum amount of time (in minutes) for all exchanges\n",
                "example": 5
              },
              "sdk_ephem_pub_key": {
                "$ref": "#/components/schemas/SdkEphemeralPublicKey"
              },
              "sdk_reference_number": {
                "maxLength": 32,
                "type": "string",
                "description": "Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App, assigned by EMVCo when the 3DS SDK is approved.\n",
                "example": "3DS_LOA_SDK_PPFU_020100_00007"
              },
              "sdk_encrypted_data": {
                "maxLength": 64000,
                "type": "string",
                "description": "A JSON web encryption (JWE) object in compact serialization, containing data encrypted by the SDK for the Directory Server to decrypt.\n",
                "example": "<device-information>"
              },
              "sdk_transaction_id": {
                "maxLength": 36,
                "minLength": 36,
                "type": "string",
                "description": "Universally unique transaction identifier assigned by the 3DS SDK to identify a single transaction\n",
                "example": "b2385523-a66c-4907-ac3c-91848e8c0067"
              },
              "sdk_interface_type": {
                "enum": [
                  "native",
                  "html",
                  "both"
                ],
                "type": "string",
                "description": "Lists all of the SDK interface types that the device supports for displaying specific challenge user interfaces within the SDK\n"
              },
              "sdk_ui_elements": {
                "type": "array",
                "items": {
                  "enum": [
                    "text",
                    "single_select",
                    "multi_select",
                    "oob",
                    "html_other"
                  ],
                  "type": "string"
                },
                "description": "Lists all the user interface elements that the cardholder's device supports for displaying specific challenge user interfaces within the SDK\n"
              }
            }
          }
        ]
      },
      "Approved": {
        "type": "boolean",
        "description": "Whether the authentication was successful. This will only be set if the Session is in a final state",
        "example": false
      },
      "AuthenticationType": {
        "enum": [
          "regular"
        ],
        "type": "string",
        "description": "Indicates the type of payment this session is for",
        "default": "regular",
        "example": "regular"
      },
      "Browser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChannelData"
          },
          {
            "required": [
              "accept_header",
              "java_enabled",
              "language",
              "color_depth",
              "screen_height",
              "screen_width",
              "timezone",
              "user_agent",
              "ip_address"
            ],
            "type": "object",
            "properties": {
              "channel": {
                "enum": [
                  "browser"
                ],
                "type": "string"
              },
              "three_ds_method_completion": {
                "maxLength": 1,
                "minLength": 1,
                "enum": [
                  "Y",
                  "N",
                  "U"
                ],
                "type": "string",
                "description": "Indicates whether the 3DS Method successfully completed<br/> • Y = Successfully completed <br/> • N = Did not successfully complete <br/> • U = Unavailable (3DS Method URL was not present in the preperation response (PRes) message data for the card range associated with the cardholder's account number)\n",
                "default": "U",
                "example": "U"
              },
              "accept_header": {
                "maxLength": 2048,
                "type": "string",
                "description": "Exact content of the HTTP accept headers as sent to the 3DS Requestor from the cardholder’s browser\n",
                "example": "Accept:  *.*, q=0.1"
              },
              "java_enabled": {
                "type": "boolean",
                "description": "Boolean that represents the ability of the cardholder's browser to execute Java. Value is returned from the `navigator.javaEnabled` property.\n",
                "example": true
              },
              "language": {
                "maxLength": 12,
                "minLength": 1,
                "type": "string",
                "description": "Value representing the browser language as defined in IETF BCP47. Returned from the `navigator.language` property.\n",
                "example": "FR-fr"
              },
              "color_depth": {
                "maxLength": 2,
                "minLength": 1,
                "type": "string",
                "description": "Value representing the bit depth of the colour palette for displaying images, in bits per pixel. Obtained from the cardholder's browser from the `screen.colorDepth` property.\n",
                "example": "16"
              },
              "screen_height": {
                "maxLength": 6,
                "minLength": 1,
                "type": "string",
                "description": "Total height of the cardholder’s screen in pixels. Value is returned from the `screen.height` property.\n",
                "example": "1080"
              },
              "screen_width": {
                "maxLength": 6,
                "minLength": 1,
                "type": "string",
                "description": "Total width of the cardholder’s screen in pixels. Value is returned from the `screen.width` property.\n",
                "example": "1920"
              },
              "timezone": {
                "maxLength": 5,
                "minLength": 1,
                "type": "string",
                "description": "Time difference between UTC time and the local time of the cardholder's browser, in minutes.\n",
                "example": "60"
              },
              "user_agent": {
                "maxLength": 2048,
                "type": "string",
                "description": "Exact content of the HTTP user-agent header\n",
                "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"
              },
              "ip_address": {
                "maxLength": 45,
                "type": "string",
                "description": "IP address of the browser as returned by the HTTP headers to the 3DS Requestor\n",
                "example": "1.12.123.255"
              }
            }
          }
        ]
      },
      "Cardholder": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 45,
            "minLength": 2,
            "type": "string",
            "description": "Name of the Cardholder.",
            "example": "Cardholder Name"
          },
          "email": {
            "maxLength": 254,
            "type": "string",
            "description": "The email address associated with the account that is either entered by the Cardholder, or is on file with the 3DS Requestor.",
            "example": "example@example.com"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "The cardholder information"
      },
      "CardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SessionSource"
          },
          {
            "required": [
              "type",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "maxLength": 19,
                "minLength": 13,
                "type": "string",
                "description": "The card number (without separators)",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025
              },
              "name": {
                "maxLength": 45,
                "minLength": 2,
                "type": "string",
                "description": "The name of the cardholder",
                "example": "Bruce Wayne"
              },
              "email": {
                "maxLength": 254,
                "type": "string",
                "description": "The email of the cardholder",
                "example": "bruce.wayne@email.com"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionAddress"
                  }
                ],
                "description": "The billing address of the cardholder"
              },
              "home_phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionPhone"
                  }
                ],
                "description": "The cardholder's home phone number"
              },
              "mobile_phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionPhone"
                  }
                ],
                "description": "The cardholder's mobile phone number"
              },
              "work_phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionPhone"
                  }
                ],
                "description": "The cardholder's work phone number"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "Category": {
        "enum": [
          "payment",
          "non_payment"
        ],
        "type": "string",
        "description": "Indicates the category of the authentication request",
        "default": "payment"
      },
      "ChallengeIndicator": {
        "maxLength": 50,
        "enum": [
          "no_preference",
          "no_challenge_requested",
          "challenge_requested",
          "challenge_requested_mandate"
        ],
        "type": "string",
        "description": "Indicates whether a challenge is requested for this session",
        "default": "no_preference",
        "example": "no_preference"
      },
      "ChannelData": {
        "required": [
          "channel"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "Indicates the type of channel interface being used to initiate the transaction.</br> If the channel is `app` then `501 Not Implemented` is returned.",
            "default": "browser"
          }
        },
        "description": "The information gathered from the environment used to initiate the session",
        "discriminator": {
          "propertyName": "channel",
          "mapping": {
            "browser": "#/components/schemas/Browser",
            "app": "#/components/schemas/App"
          }
        },
        "example": {
          "channel": "browser",
          "accept_header": "Accept:  *.*, q=0.1",
          "java_enabled": true,
          "language": "FR-fr",
          "color_depth": 16,
          "screen_height": 1080,
          "screen_width": 1920,
          "timezone": 60,
          "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36",
          "three_ds_method_completion": "Y",
          "ip_address": "1.12.123.255"
        }
      },
      "CompletionInfo": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "maxLength": 10,
            "enum": [
              "hosted",
              "non_hosted"
            ],
            "type": "string",
            "description": "Whether the session should be hosted by Checkout.com.</br> When this value is `hosted`, the response will be `501 Not Implemented`.\n",
            "example": "non_hosted"
          }
        },
        "description": "The redirect information needed for callbacks or redirects after the payment is completed",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "hosted": "#/components/schemas/HostedCompletionInfo",
            "non_hosted": "#/components/schemas/NonHostedCompletionInfo"
          }
        },
        "example": {
          "type": "non_hosted",
          "callback_url": "https://merchant.com/callback"
        }
      },
      "CreateSessionAcceptedResponse": {
        "required": [
          "session_secret",
          "id",
          "transaction_id",
          "scheme",
          "amount",
          "currency",
          "authentication_type",
          "authentication_category",
          "status",
          "protocol_version",
          "_links"
        ],
        "properties": {
          "session_secret": {
            "$ref": "#/components/schemas/SessionSecret"
          },
          "id": {
            "$ref": "#/components/schemas/SessionId"
          },
          "transaction_id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)",
            "example": "9aea641d-0549-4222-9ca9-d90b43a4f38c"
          },
          "scheme": {
            "enum": [
              "visa",
              "mastercard",
              "jcb",
              "amex",
              "diners"
            ],
            "type": "string",
            "description": "Indicates the scheme this authentication is carried out against"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "authentication_category": {
            "$ref": "#/components/schemas/Category"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "next_actions": {
            "$ref": "#/components/schemas/NextActions"
          },
          "protocol_version": {
            "$ref": "#/components/schemas/ProtocolVersion"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference"
          },
          "_links": {
            "$ref": "#/components/schemas/CreateSessionLinks"
          }
        }
      },
      "CreateSessionLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetSessionLinks"
          }
        ],
        "properties": {
          "redirect": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "http://3ds2.checkout.com/interceptor/sid_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            },
            "description": "The link to which the cardholder should be redirected. </br> Only available when the `hosted` value is `true`.\n"
          },
          "collect_channel_data": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data"
              }
            },
            "description": "The URI to send device information to. Only available if `next_actions` contains `collect_data`"
          }
        }
      },
      "CreateSessionOkResponse": {
        "required": [
          "session_secret"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/GetSessionResponse"
          }
        ],
        "properties": {
          "session_secret": {
            "$ref": "#/components/schemas/SessionSecret"
          }
        }
      },
      "Cryptogram": {
        "maxLength": 28,
        "minLength": 28,
        "type": "string",
        "description": "Payment system-specific value provided as part of the ACS registration for each supported DS",
        "example": "MTIzNDU2Nzg5MDA5ODc2NTQzMjE="
      },
      "Currency": {
        "type": "string",
        "description": "The three-letter ISO currency code",
        "example": "USD"
      },
      "Ds": {
        "required": [
          "ds_id",
          "reference_number",
          "transaction_id"
        ],
        "type": "object",
        "properties": {
          "ds_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Registered application provider identifier (RID) that is unique to the payment system. RIDs are defined by the ISO 7816-5 standard. Used as part of the device data encryption process.",
            "example": "A000000003"
          },
          "reference_number": {
            "maxLength": 32,
            "type": "string",
            "description": "EMVCo-assigned unique identifier to track approved DS",
            "example": "VISA.V 17 0003"
          },
          "transaction_id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Universally unique transaction identifier assigned by the DS",
            "example": "9aea641d-0549-4222-9ca9-d90b43a4f38c"
          }
        },
        "description": "The directory server (DS) information. Can be empty if the session is pending or communication with the DS failed"
      },
      "DsPublicKeys": {
        "required": [
          "ds_public",
          "ca_public"
        ],
        "type": "object",
        "properties": {
          "ds_public": {
            "maxLength": 1024,
            "type": "string",
            "description": "A public certificate provided by the DS for encrytion of device data. It is a base64 URL encoded <a href=\"https://tools.ietf.org/html/rfc7517\" target=\"_blank\">JSON web key</a>.",
            "example": "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6Ik1LQkNUTkljS1VTRGlpMTF5U3MzNTI2aURaOEFpVG83VHU2S1BBcXY3RDQiLCJ5IjoiNEV0bDZTUlcyWWlMVXJONXZmdlZIdWhwN3g4UHhsdG1XV2xiYk00SUZ5TSIsInVzZSI6ImVuYyIsImtpZCI6IjEifQ"
          },
          "ca_public": {
            "maxLength": 1024,
            "type": "string",
            "description": "Certificate authority (CA) public certificate (root) of the DS-CA. This certificate is used to validate the ACS signed content JSON web signature (JWS) object. It is a base64 URL encoded DER encoded X.509.",
            "example": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxWEvDZRhKEefZ5sQS7RJZXWbSOPxus-ZyLQjtmrrAQawnKI-AG8BKpVdZVGlpcdxCnGbCIy8CKk2Oi7Mgdqfv5R_4_jI7yl4j7Svmh1Sw934eeF9RyB59Ihl36Y0pNfVW9hBqJuq2o8ulrA1TOtpTpje23CY8sjFE5QnJm1evZRB_ZZQ1txl4nrAiHkno4cVJPouBesryVGVQ0zi1bM0P-05Ydgksvph-1nyjnDldD68mejVF69Tijxa22b6BUCXEuPfbXZcW2NpM_W3msnvKiTWFaMlnIzGYIoFnAnCIVU7Min6CPn565tv0iyIt8BrcezsGzefUw17NEq0J4tCvWwIDAQAB"
          }
        },
        "description": "Public certificates specific to a Directory Server (DS) for encrypting device data and verifying ACS signed content. Required when channel is `app`."
      },
      "Eci": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Electronic Commerce Indicator",
        "example": "05"
      },
      "ErrorResponse": {
        "required": [
          "request_id",
          "error_type",
          "error_codes"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "5342217f-7fa2-4626-a6c9-c979a04671a6"
          },
          "error_type": {
            "enum": [
              "invalid_input",
              "forbidden"
            ],
            "type": "string"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "enum": [
                "amount_required",
                "card_required"
              ],
              "type": "string"
            },
            "description": "Error response code. Full list of error codes is on GitHub"
          }
        }
      },
      "ForbiddenErrorResponse": {
        "required": [
          "request_id",
          "error_type",
          "error_codes"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "5342217f-7fa2-4626-a6c9-c979a04671a6"
          },
          "error_type": {
            "enum": [
              "operation_not_allowed"
            ],
            "type": "string"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "enum": [
                "update_not_allowed_due_to_state"
              ],
              "type": "string"
            },
            "description": "Error response code. Full list of error codes is on GitHub"
          }
        }
      },
      "GetBaseSessionLinks": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "required": [
              "href"
            ],
            "type": "object",
            "properties": {
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441"
              }
            },
            "description": "The URI of the session"
          }
        },
        "description": "The links related to the session"
      },
      "GetCompleteSessionLinks": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetBaseSessionLinks"
          }
        ],
        "properties": {
          "complete": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete"
              }
            },
            "description": "The URI to signal the session as complete. Only available if `next_actions` contains `complete`"
          }
        },
        "description": "The links related to the session"
      },
      "GetSessionLinks": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetBaseSessionLinks"
          }
        ],
        "properties": {
          "issuer_fingerprint": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint"
              }
            },
            "description": "The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session.  Only available if `next_actions` contains `issuer_fingerprint`\n"
          },
          "collect_channel_data": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data"
              }
            },
            "description": "The URI to send device information to. Only available if `next_actions` contains `collect_data`"
          },
          "three_ds_method_url": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.hbsc.com/3dsmethod?tx=123456"
              }
            },
            "description": "The URI of the issuer fingerprint (3DS method). Only available if `next_actions` contains `issuer_fingerprint`"
          },
          "acs_url": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.hbsc.com/challenge"
              }
            },
            "description": "Fully qualified URL of the ACS to be used for the challenge. Only available if `next_actions` contains `authenticate`"
          },
          "term_url": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.hbsc.com/challenge"
              }
            },
            "description": "Fully qualified URL that will receive and process the PaReq (payer authentication response). Only available if `next_actions` contains `authenticate`"
          },
          "complete": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete"
              }
            },
            "description": "The URI to signal the session as complete. Only available if `next_actions` contains `complete`"
          }
        },
        "description": "The links related to the session"
      },
      "GetSessionResponse": {
        "required": [
          "session_secret",
          "id",
          "xid",
          "transaction_id",
          "scheme",
          "amount",
          "currency",
          "authentication_type",
          "authentication_category",
          "status",
          "protocol_version",
          "_links"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SessionId"
          },
          "transaction_id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)",
            "example": "9aea641d-0549-4222-9ca9-d90b43a4f38c"
          },
          "scheme": {
            "enum": [
              "Visa",
              "Mastercard",
              "Jcb",
              "Amex",
              "Diners"
            ],
            "type": "string",
            "description": "Indicates the scheme this authentication is carried out against"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "completed": {
            "type": "bool",
            "description": "Indicates whether this session has been completed",
            "example": "false"
          },
          "challenged": {
            "type": "bool",
            "description": "Indicates whether this session involved a challenge. This will only be set after communication with the scheme is finished.",
            "example": "true"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "authentication_category": {
            "$ref": "#/components/schemas/Category"
          },
          "certificates": {
            "$ref": "#/components/schemas/DsPublicKeys"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "approved": {
            "$ref": "#/components/schemas/Approved"
          },
          "protocol_version": {
            "$ref": "#/components/schemas/ProtocolVersion"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "next_actions": {
            "$ref": "#/components/schemas/NextActions"
          },
          "ds": {
            "$ref": "#/components/schemas/Ds"
          },
          "acs": {
            "$ref": "#/components/schemas/Acs"
          },
          "response_code": {
            "$ref": "#/components/schemas/ResponseCode"
          },
          "response_status_reason": {
            "$ref": "#/components/schemas/ResponseStatusReason"
          },
          "pareq": {
            "$ref": "#/components/schemas/Pareq"
          },
          "cryptogram": {
            "$ref": "#/components/schemas/Cryptogram"
          },
          "eci": {
            "$ref": "#/components/schemas/Eci"
          },
          "xid": {
            "type": "string",
            "description": "The xid value to use for authorization",
            "example": "XSUErNftqkiTdlkpSk8p32GWOFA"
          },
          "cardholder_info": {
            "type": "string",
            "description": "May provide cardholder information from the DS to be presented to the cardholder",
            "example": "Card declined. Please contact your issuing bank."
          },
          "_links": {
            "$ref": "#/components/schemas/GetSessionLinks"
          }
        }
      },
      "GetSessionResponseAfterChannelDataSupplied": {
        "required": [
          "session_secret",
          "id",
          "transaction_id",
          "scheme",
          "amount",
          "currency",
          "authentication_type",
          "authentication_category",
          "status",
          "protocol_version",
          "_links"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SessionId"
          },
          "transaction_id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)",
            "example": "9aea641d-0549-4222-9ca9-d90b43a4f38c"
          },
          "scheme": {
            "enum": [
              "Visa",
              "Mastercard",
              "Jcb",
              "Amex",
              "Diners"
            ],
            "type": "string",
            "description": "Indicates the scheme this authentication is carried out against"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "completed": {
            "type": "bool",
            "description": "Indicates whether this session has been completed",
            "example": "false"
          },
          "challenged": {
            "type": "bool",
            "description": "Indicates whether this session involved a challenge. This will only be set after communication with the scheme is finished.",
            "example": "true"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "authentication_category": {
            "$ref": "#/components/schemas/Category"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "approved": {
            "$ref": "#/components/schemas/Approved"
          },
          "protocol_version": {
            "$ref": "#/components/schemas/ProtocolVersion"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "next_actions": {
            "$ref": "#/components/schemas/NextActions"
          },
          "ds": {
            "$ref": "#/components/schemas/Ds"
          },
          "acs": {
            "$ref": "#/components/schemas/Acs"
          },
          "response_code": {
            "$ref": "#/components/schemas/ResponseCode"
          },
          "response_status_reason": {
            "$ref": "#/components/schemas/ResponseStatusReason"
          },
          "pareq": {
            "$ref": "#/components/schemas/Pareq"
          },
          "cryptogram": {
            "$ref": "#/components/schemas/Cryptogram"
          },
          "eci": {
            "$ref": "#/components/schemas/Eci"
          },
          "xid": {
            "type": "string",
            "description": "The xid value to use for authorization",
            "example": "XSUErNftqkiTdlkpSk8p32GWOFA"
          },
          "_links": {
            "$ref": "#/components/schemas/GetCompleteSessionLinks"
          }
        }
      },
      "GetUpdateSessionLinks": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetBaseSessionLinks"
          }
        ],
        "properties": {
          "issuer_fingerprint": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint"
              }
            },
            "description": "The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session.  Only available if `next_actions` contains `issuer_fingerprint`\n"
          },
          "collect_channel_data": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data"
              }
            },
            "description": "The URI to send device information to. Only available if `next_actions` contains `collect_data`"
          },
          "three_ds_method_url": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.hbsc.com/3dsmethod?tx=123456"
              }
            },
            "description": "The URI of the Issuer FingerPrint (3DS Method). Only available if `next_actions` contains `issuer_fingerprint`"
          },
          "complete": {
            "type": "object",
            "properties": {
              "required": null,
              "href": {
                "maxLength": 100,
                "type": "string",
                "example": "https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete"
              }
            },
            "description": "The URI to signal the session as complete. Only available if `next_actions` contains `complete`"
          }
        },
        "description": "The links related to the session"
      },
      "HostedCompletionInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CompletionInfo"
          },
          {
            "required": [
              "success_url",
              "failure_url"
            ],
            "type": "object",
            "properties": {
              "success_url": {
                "maxLength": 256,
                "type": "string",
                "description": "For `hosted` sessions, this overrides the default success redirect URL configured on your account",
                "format": "uri",
                "example": "http://example.com/payments/success"
              },
              "failure_url": {
                "maxLength": 256,
                "type": "string",
                "description": "For `hosted` sessions, this overrides the default failure redirect URL configured on your account",
                "format": "uri",
                "example": "http://example.com/payments/fail"
              }
            }
          }
        ]
      },
      "NetworkTokenSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SessionSource"
          },
          {
            "required": [
              "type",
              "token",
              "expiry_month",
              "expiry_year",
              "token_type",
              "cryptogram"
            ],
            "type": "object",
            "properties": {
              "token": {
                "maxLength": 19,
                "minLength": 9,
                "type": "string",
                "description": "The network token PAN",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the token",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the token",
                "example": 2025
              },
              "name": {
                "maxLength": 45,
                "minLength": 2,
                "type": "string",
                "description": "The customer's name",
                "example": "Bruce Wayne"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionAddress"
                  }
                ],
                "description": "The customer's billing address"
              },
              "home_phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionPhone"
                  }
                ],
                "description": "The cardholder's home phone number"
              },
              "mobile_phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionPhone"
                  }
                ],
                "description": "The cardholder's mobile phone number"
              },
              "work_phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SessionPhone"
                  }
                ],
                "description": "The cardholder's work phone number"
              }
            }
          }
        ],
        "description": "A network token payment source"
      },
      "NextActions": {
        "type": "array",
        "items": {
          "enum": [
            "collect_channel_data",
            "issuer_fingerprint",
            "challenge_cardholder",
            "redirect_cardholder",
            "complete",
            "authenticate",
            "redirect_cardholder"
          ]
        },
        "description": "Identifies what actions to take in order to complete the session. `redirect_cardholder` only applies to hosted sessions. `authenticate` only applies to sessions that have been downgraded to 3DS1 (`protocol_version 1.0.2`)\n"
      },
      "NonHostedCompletionInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CompletionInfo"
          },
          {
            "required": [
              "callback_url"
            ],
            "type": "object",
            "properties": {
              "callback_url": {
                "maxLength": 256,
                "type": "string",
                "description": "For `non-hosted` sessions, you can define a URL to be called once the session is complete",
                "format": "uri",
                "example": "http://example.com/payments/callback/pay_mbabizu24mvu3mela5njyhpit4"
              }
            }
          }
        ]
      },
      "Pareq": {
        "type": "string",
        "description": "Payer authentication request required in the form post to the `acs.url` given a 3DS1 transaction",
        "example": "eJyNVF1vmzAUfd+vQLwTOzbgJDKu0mZVk6pTvtXuzTN3CWqBxMCW/fsZN6k2rSvmBa59zuWe+8WvTvmL9wN0lZVF4vd72PegUGWaFbvE36xvg4F/JT55/z58vdcAkxWoRsO7CIt6gKqSO/CyNPElpXJIyCCIYKiCUEY0GELcDwjDISMyZt++Y/+/rqy7+XgJxw8hFnYWJIyeHuHoYnbyHkCrvSzqTqRFS3W8nn4RlDEWYY7OphM1Bz2dCHx5CA4pZRy9Hjt5KGQOIj/H622zSno0rTzSM5HYOycvqmyKWv8SAxJzdDGcmI1+Efu6PlQjhOy7lnWvqRDBJoD2sjPZyDnbfN60yMpR1ClLxf1sGpfRCTb4CE8r9Vkdv7LBXIf34SLhqEU4uUplDYKY+uAhxV6fjfrhiEYc2XO3JsnbrIq+t1lNTI+8Wk7MQyt6fKa3Wf3zwK26jdZmmk15Q0N/s5y4cDqUBZg/mfl5++6uqXOl+M2d65Sp2gwFmm2vl+rpbr2NF4+7m9nj8ieoxeZ2vHtO2tmzIFdlmelyQjGz0jKHlueoI1yj/MPV1Ha73YTvL1P01zb9DeVWJeg="
      },
      "ProcessedOn": {
        "type": "string",
        "description": "The date/time the authentication was processed",
        "example": "2019-01-15T12:44:33Z"
      },
      "ProtocolVersion": {
        "maxLength": 50,
        "type": "string",
        "description": "The protocol version number of the specification used by the API for authentication",
        "example": "2.2.0"
      },
      "RedirectUrl": {
        "type": "string",
        "description": "Fully qualified URL where the cardholder will be redirected after the authentication is complete in the Interceptor.\n",
        "example": "https://www.xml.com"
      },
      "Reference": {
        "maxLength": 100,
        "type": "string",
        "description": "A reference you can later use to identify this payment, such as an order number",
        "example": "ORD-5023-4E89"
      },
      "ResponseCode": {
        "enum": [
          "Y",
          "N",
          "U",
          "A",
          "C",
          "D",
          "R",
          "I"
        ],
        "type": "string",
        "description": "The response from the DS or ACS which indicates whether a transaction qualifies as an authenticated transaction or account verification. <br/> Only available if communication with the scheme was successful and the Session is in a final state. <br/><br/> • Y = Authentication Verification Successful. <br/> • N = Not Authenticated /Account Not Verified; Transaction denied. <br/> • U = Authentication/ Account Verification Could Not Be Performed; Technical or other problem, as indicated in ARes or RReq. <br/> • A = Attempts Processing Performed; Not Authenticated/Verified, but a proof of attempted authentication/verification is provided. <br/> • C = Challenge Required; Additional authentication is required using the CReq/CRes. <br/> • D = Challenge Required; Decoupled Authentication confirmed. <br/> • R = Authentication/ Account Verification Rejected; Issuer is rejecting authentication/verification and request that authorization not be attempted. <br/> • I = Informational Only; 3DS Requestor challenge preference acknowledged.\n"
      },
      "ResponseStatusReason": {
        "type": "string",
        "description": "The response from the DS or ACS which provides information on why the `response_code` field has the specified value.  <br/> Only available when `response_code` is not `Y`.  <br/><br/>\n• 01 = Card authentication failed <br/> • 02 = Unknown Device <br/> • 03 = Unsupported Device <br/> • 04 = Exceeds authentication frequency limit <br/> • 05 = Expired card <br/> • 06 = Invalid card number <br/> • 07 = Invalid transaction <br/> • 08 = No Card record <br/> • 09 = Security failure <br/> • 10 = Stolen card <br/> • 11 = Suspected fraud <br/> • 12 = Transaction not permitted to cardholder <br/> • 13 = Cardholder not enrolled in service <br/> • 14 = Transaction timed out at the ACS <br/> • 15 = Low confidence <br/> • 16 = Medium confidence <br/> • 17 = High confidence <br/> • 18 = Very High confidence <br/> • 19 = Exceeds ACS maximum challenges <br/> • 20 = Non-Payment transaction not supported <br/> • 21 = 3RI transaction not supported <br/> • 22 = ACS technical issue <br/> • 23 = Decoupled Authentication required by ACS but not requested by 3DS Requestor <br/> • 24 = 3DS Requestor Decoupled Max Expiry Time exceeded <br/> • 25 = Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt <br/> • 26 = Authentication attempted but not performed by the cardholder <br/>\n",
        "example": "01"
      },
      "SchemeToken": {
        "type": "string",
        "description": "The scheme generated token (replaces the `card` object)"
      },
      "SdkEphemeralPublicKey": {
        "type": "object",
        "properties": {
          "kty": {
            "enum": [
              "EC"
            ],
            "type": "string",
            "description": "The key type.",
            "example": "EC"
          },
          "crv": {
            "maxLength": 40,
            "type": "string",
            "description": "The type of elliptic curve.",
            "example": "P-256"
          },
          "x": {
            "maxLength": 100,
            "type": "string",
            "description": "x coordinate of the elliptic curve that is base64url-encoded.",
            "example": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
          },
          "y": {
            "maxLength": 100,
            "type": "string",
            "description": "y coordinate of the elliptic curve that is base64url-encoded.",
            "example": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
          }
        },
        "description": "Public key component of the ephemeral key pair generated by the 3DS SDK and used to establish session keys between the 3DS SDK and ACS. Refer to https://tools.ietf.org/html/rfc7517#appendix-A.1"
      },
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Session Id generated for external usage",
            "example": "sid_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "expires_on": {
            "type": "string",
            "description": "Expiration date of the session id",
            "example": "01-09-2019 10:12:30"
          }
        },
        "description": "The session information"
      },
      "SessionAddress": {
        "type": "object",
        "properties": {
          "address_line1": {
            "maxLength": 50,
            "type": "string",
            "description": "The first line of the address",
            "example": "Checkout.com"
          },
          "address_line2": {
            "maxLength": 50,
            "type": "string",
            "description": "The second line of the address",
            "example": "ABC building"
          },
          "address_line3": {
            "maxLength": 50,
            "type": "string",
            "description": "The third line of the address",
            "example": "14 Wells Mews"
          },
          "city": {
            "maxLength": 50,
            "type": "string",
            "description": "The address city",
            "example": "London"
          },
          "state": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The country subdivision code defined in ISO 3166-2",
            "example": "ENG"
          },
          "zip": {
            "maxLength": 16,
            "type": "string",
            "description": "The address zip/postal code",
            "example": "W1T 4TJ"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/four/resources/codes/country-codes\" target=\"_blank\">ISO country code</a> of the address",
            "example": "GB"
          }
        },
        "description": "The shipping address"
      },
      "SessionId": {
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^(sid)_(\\w{26})$",
        "type": "string",
        "description": "Session unique identifier",
        "example": "sid_y3oqhf46pyzuxjbcn2giaqnb441"
      },
      "SessionPhone": {
        "type": "object",
        "properties": {
          "country_code": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Country code",
            "example": "234"
          },
          "number": {
            "maxLength": 15,
            "type": "string",
            "description": "The rest of the number",
            "example": "0204567895"
          }
        }
      },
      "SessionRequest": {
        "required": [
          "currency",
          "source",
          "completion"
        ],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/SessionSource"
          },
          "amount": {
            "minimum": 0,
            "maxLength": 48,
            "type": "integer",
            "description": "The payment amount in the major currency.\n\nThis value is required for 3DS1 authentications.\n\n\nOmitting this value will set `authentication_category` to `non_payment` and renders the authentication as 3DS2 only.\n",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code\n",
            "example": "USD"
          },
          "processing_channel_id": {
            "type": "string",
            "description": "The processing channel to be used for the session. Required if this was not set in the request for the OAuth token.\n"
          },
          "marketplace": {
            "$ref": "#/components/schemas/MarketplaceData"
          },
          "authentication_type": {
            "$ref": "#/components/schemas/AuthenticationType"
          },
          "authentication_category": {
            "$ref": "#/components/schemas/Category"
          },
          "challenge_indicator": {
            "$ref": "#/components/schemas/ChallengeIndicator"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/SessionAddress"
          },
          "completion": {
            "$ref": "#/components/schemas/CompletionInfo"
          },
          "channel_data": {
            "$ref": "#/components/schemas/ChannelData"
          }
        }
      },
      "SessionSecret": {
        "maxLength": 48,
        "minLength": 48,
        "pattern": "^(sek)_(\\w{44})$",
        "type": "string",
        "description": "A base64 encoded value prefixed with `sek_` that gives access to client-side operations for a single authentication within the Sessions API. This value is returned as the `session_secret` when requesting a session. Client-side operations include getting session details and those specified in `next_actions`.",
        "example": "sek_Dal7UyiH8rIFXA4PfgiIk2jUyQkVDeEWgVBEL4TsRTE="
      },
      "SessionSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "default": "card",
            "example": "card"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/CardSource",
            "network_token": "#/components/schemas/NetworkTokenSource"
          }
        }
      },
      "SessionsValidationError": {
        "required": [
          "request_id",
          "error_type",
          "error_codes"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "5342217f-7fa2-4626-a6c9-c979a04671a6"
          },
          "error_type": {
            "enum": [
              "unprocessable_entity"
            ],
            "type": "string"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "enum": [
                "currency_required"
              ],
              "type": "string"
            },
            "description": "Error response code. Full list of error codes is on GitHub"
          }
        }
      },
      "Status": {
        "enum": [
          "pending",
          "processing",
          "challenged",
          "challenge_abandoned",
          "expired",
          "approved",
          "attempted",
          "unavailable",
          "declined",
          "rejected"
        ],
        "type": "string",
        "description": "Indicates the status of the session"
      },
      "ThreeDsMethodCompletion": {
        "required": [
          "three_ds_method_completion"
        ],
        "properties": {
          "three_ds_method_completion": {
            "maxLength": 1,
            "minLength": 1,
            "enum": [
              "Y",
              "N",
              "U"
            ],
            "type": "string",
            "description": "The result of the 3DS method URL.<br>  Default to `U` if a response is not received from the 3DS Method URL within 10 seconds.\n",
            "example": "Y"
          }
        },
        "description": "The result of the 3DS method url",
        "example": {
          "three_ds_method_completion": "Y"
        }
      },
      "TransactionType": {
        "maxLength": 50,
        "enum": [
          "goods_service",
          "check_acceptance",
          "account_funding",
          "quashi_card_transaction",
          "prepaid_activation_and_load"
        ],
        "type": "string",
        "description": "Identifies the type of transaction being authenticated",
        "default": "goods_service",
        "example": "goods_service"
      },
      "Type": {
        "enum": [
          "payment_transaction",
          "recurring_transaction",
          "instalment_transaction",
          "add_card",
          "maintain_card",
          "token_cardholder_verification"
        ],
        "type": "string",
        "description": "Indicates the type of Authentication request.",
        "default": "payment_transaction"
      },
      "01_SepaSource": {
        "required": [
          "billing_address",
          "source_data"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceRequest"
          },
          {
            "type": "object",
            "properties": {
              "source_data": {
                "required": [
                  "first_name",
                  "last_name",
                  "account_iban",
                  "bic",
                  "billing_descriptor",
                  "mandate_type"
                ],
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "The account holder's first name",
                    "example": "Marcus"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The account holder's last name",
                    "example": "Barrilius Maximus"
                  },
                  "account_iban": {
                    "type": "string",
                    "description": "The account IBAN",
                    "example": "DE25100100101234567893"
                  },
                  "bic": {
                    "type": "string",
                    "description": "The account BIC",
                    "example": "PBNKDEFFXXX"
                  },
                  "billing_descriptor": {
                    "type": "string",
                    "description": "The billing descriptor",
                    "example": "ExampleCompany.com"
                  },
                  "mandate_type": {
                    "enum": [
                      "single",
                      "recurring"
                    ],
                    "type": "string",
                    "description": "The type of mandate",
                    "example": "recurring"
                  }
                },
                "description": "Additional data required to create SEPA payment sources"
              }
            }
          }
        ],
        "description": "A SEPA payment source"
      },
      "01_SepaSourceResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AddSourceResponse"
          },
          {
            "type": "object",
            "properties": {
              "response_data": {
                "type": "object",
                "properties": {
                  "mandate_reference": {
                    "type": "string",
                    "description": "The Direct Debit mandate reference",
                    "example": "MANDXI9809809"
                  }
                },
                "description": "SEPA Direct Debit details"
              },
              "_links": {
                "minItems": 1,
                "type": "object",
                "properties": {
                  "self": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "The URI of the payment source"
                  },
                  "cancel": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "A link to cancel the SEPA Direct Debit mandate"
                  }
                },
                "description": "The links related to the SEPA payment source",
                "readOnly": true
              }
            }
          }
        ],
        "description": "The SEPA mandate details"
      },
      "02_AchSource": {
        "required": [
          "billing_address",
          "source_data"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceRequest"
          },
          {
            "type": "object",
            "properties": {
              "source_data": {
                "required": [
                  "account_type",
                  "account_number",
                  "routing_number",
                  "account_holder_name",
                  "billing_descriptor"
                ],
                "type": "object",
                "properties": {
                  "account_type": {
                    "enum": [
                      "Checking",
                      "Savings",
                      "Corporate",
                      "CorpSavings"
                    ],
                    "type": "string",
                    "description": "The type of Direct Debit account",
                    "example": "Checking"
                  },
                  "account_number": {
                    "maxLength": 17,
                    "minLength": 4,
                    "type": "integer",
                    "description": "The account number of the Direct Debit account",
                    "example": "4099999992"
                  },
                  "routing_number": {
                    "maxLength": 9,
                    "minLength": 8,
                    "type": "integer",
                    "description": "The routing number of the Direct Debit account",
                    "example": 211370545
                  },
                  "account_holder_name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string",
                    "description": "The account holder's full name",
                    "example": "John Doe"
                  },
                  "billing_descriptor": {
                    "maxLength": 15,
                    "minLength": 1,
                    "type": "string",
                    "description": "The billing descriptor",
                    "example": "ExampleCompany.com"
                  },
                  "company_name": {
                    "maxLength": 40,
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the company (required for corporate accounts)",
                    "example": "Checkout.com"
                  }
                },
                "description": "Additional data required to create ACH payment sources"
              }
            }
          }
        ],
        "description": "An ACH payment source"
      },
      "AddSourceResponse": {
        "required": [
          "type",
          "response_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be used later for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceResponseCustomer"
              }
            ],
            "description": "The customer associated with the payment source if provided in the request"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSourceResponse",
            "ach": "#/components/schemas/AddSourceResponse"
          }
        }
      },
      "Source": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be later used for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "_links": {
            "minItems": 1,
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the payment source",
            "readOnly": true,
            "example": {
              "self": {
                "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "sepa:mandate": {
                "href": "https://api.checkout.com/sepa/mandates/src_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            }
          }
        }
      },
      "SourceRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify the source",
            "example": "X-080957-N34"
          },
          "billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The payment source owner's billing address"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The payment source owner's phone number"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` or `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "Details of the customer to associate with the source"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSource",
            "ach": "#/components/schemas/02_AchSource"
          }
        }
      },
      "SourceResponseCustomer": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(cus)_(\\w{26})$",
            "type": "string",
            "description": "The unique identifier of the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jack Napier"
          }
        },
        "description": "The customer to which the payment source is linked"
      },
      "Timestamp": {
        "type": "string",
        "description": "ISO 8601 timestamp",
        "format": "date-time"
      },
      "01_CardTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "required": [
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              }
            }
          }
        ],
        "description": "Card Token Request"
      },
      "01_CardTokenResponse": {
        "required": [
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996"
              },
              "bin": {
                "maxLength": 6,
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347"
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              }
            }
          }
        ],
        "description": "Card Token Response"
      },
      "TokenRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_CardTokenRequest"
          }
        }
      },
      "TokenResponse": {
        "required": [
          "type",
          "token",
          "expires_on",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          },
          "token": {
            "type": "string",
            "description": "The reference token",
            "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
          },
          "expires_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the token will expire"
          },
          "expiry_month": {
            "minimum": 1,
            "maxLength": 2,
            "minLength": 1,
            "type": "integer",
            "description": "The expiry month",
            "example": 6
          },
          "expiry_year": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "expiry year",
            "example": 2025
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996"
          },
          "bin": {
            "type": "string",
            "description": "The card issuer BIN",
            "example": "454347"
          },
          "card_type": {
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge"
            ],
            "type": "string",
            "description": "The card type",
            "example": "Credit"
          },
          "card_category": {
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "type": "string",
            "description": "The card category",
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The card issuer country ISO-2 code",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_CardTokenResponse"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "payment_source_required"
            }
          }
        }
      }
    },
    "responses": {
      "AccessForbidden": {
        "description": "Access forbidden, invalid API-KEY was used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidDataError": {
        "description": "Invalid data was sent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters": {
      "collectionCriteria": {
        "name": "criteria",
        "in": "query",
        "description": "The json criteria for collection",
        "schema": {
          "type": "string"
        }
      },
      "collectionExpand": {
        "name": "expand",
        "in": "query",
        "description": "Expand response to get full related object intead of ID.  See the expand guide for more info.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFields": {
        "name": "fields",
        "in": "query",
        "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFilter": {
        "name": "filter",
        "in": "query",
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n",
        "schema": {
          "type": "string"
        }
      },
      "collectionLimit": {
        "name": "limit",
        "in": "query",
        "description": "The collection items limit",
        "schema": {
          "maximum": 1000,
          "minimum": 0,
          "type": "integer"
        }
      },
      "collectionOffset": {
        "name": "offset",
        "in": "query",
        "description": "The collection items offset",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "collectionQuery": {
        "name": "q",
        "in": "query",
        "description": "The partial search of the text fields.",
        "schema": {
          "type": "string"
        }
      },
      "collectionSort": {
        "name": "sort",
        "in": "query",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "hash": {
        "name": "hash",
        "in": "path",
        "description": "The token identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "mediaType": {
        "name": "Accept",
        "in": "header",
        "description": "The response media type",
        "schema": {
          "enum": [
            "application/json"
          ],
          "type": "string",
          "default": "application/json"
        }
      },
      "resourceId": {
        "name": "id",
        "in": "path",
        "description": "The resource identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "rulesVersion": {
        "name": "version",
        "in": "path",
        "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
        "required": true,
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "systemEventType": {
        "name": "eventType",
        "in": "path",
        "description": "The event type",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "Cko-Request-Id": {
        "description": "The unique identifier of the request",
        "schema": {
          "type": "string"
        }
      },
      "Cko-Version": {
        "description": "The version of the API",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "ApiPublicKey": {
        "type": "apiKey",
        "description": "Unless explicitly stated, all endpoints require authentication using OAuth.  Public keys should only be used in JavaScript or native applications.\n#### Format\n- Sandbox `pk_test_xxxxxxxxxxxxxxxxxxxxxxxxxx`\n- Production `pk_xxxxxxxxxxxxxxxxxxxxxxxxxx`\n",
        "name": "Authorization",
        "in": "query"
      },
      "OAuth": {
        "type": "oauth2",
        "description": "For server-to-server communication, we support the OAuth 2.0 client credentials flow.\nWe will provide you with a set of access key credentials – an access key ID and secret – which you can exchange for an access token by calling the 'request an access token' endpoint below. \nYou will need to authenticate using basic authentication, using your access key ID and access key secret as your username and password:\n\n```\ncurl --location --request POST 'https://access.checkout.com/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ=' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'scope=gateway'\n```\n\nThe token server will return a Bearer `access_token` in JSON Web Token (JWT) format which you should use in the `Authorization`\nheader of your API requests:\n\n```\ncurl --location --request POST 'https://api.checkout.com/payments' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Bearer {{AccessToken}}' \\\n--data-raw '{\n  \"amount\": 10000,\n  \"currency\": \"USD\",\n  \"reference\": \"Visa-USD-Test\",\n  ...\n}'\n```\n\nYour access token will be valid for a length of time (in seconds) indicated by the `expires_in` field in the response. When it expires, you'll need to request a new one.\n\nDepending on the Environment against which you're making your requests against you'll need to request the token from a different Authorization Server.\n\n| Environment   |      Authorization Server                            |\n|---------------|------------------------------------------------------|\n| Sandbox       |  https://access.sandbox.checkout.com/connect/token   |\n| Production    |  https://access.checkout.com/connect/token           |\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "See table above",
            "scopes": {
              "vault": "Access to all Vault resources",
              "vault:instruments": "Create instruments",
              "gateway": "Access to all Gateway resources",
              "gateway:payment": "Request payments",
              "gateway:payment-details": "Get payment details",
              "gateway:payment-authorizations": "Increment authorizations",
              "gateway:payment-voids": "Void payments",
              "gateway:payment-captures": "Capture payments",
              "gateway:payment-refunds": "Refund payments",
              "fx": "Foreign exchange services",
              "payouts:bank-details": "Get bank details",
              "sessions": "Access to all Sessions resources",
              "sessions:app": "App-based authentication",
              "sessions:browser": "Browser-based authentication",
              "disputes": "Access to all Disputes resources",
              "disputes:view": "View disputes",
              "disputes:provide-evidence": "Provide dispute evidence",
              "disputes:accept": "Accept disputes",
              "martketplace": "Manage sub-entities",
              "flow": "Access to all Flow resources",
              "flow:workflows": "Manage workflows",
              "flow:events": "Retrieve events"
            }
          }
        }
      },
      "SessionSecret": {
        "type": "apiKey",
        "description": "A base64 encoded value prefixed with `sek_` that gives access to client-side operations for a single authentication within the Sessions API. This value is returned as the `session_secret` when requesting a session. \n",
        "name": "Authorization",
        "in": "query"
      }
    }
  },
  "tags": [
    {
      "name": "Access"
    },
    {
      "name": "Payments",
      "description": "Process and manage payments from a variety of sources and to various destinations all within one integration."
    },
    {
      "name": "Tokens",
      "description": "Create a token that represents a card's details that you can later use to request a payment, without you having to process or store any sensitive information."
    },
    {
      "name": "Instruments",
      "description": "Capture your customers’ bank account information and securely store it in the Vault to use for future payouts."
    },
    {
      "name": "Forex",
      "description": "Checkout.com Foreign Exchange services"
    },
    {
      "name": "Disputes",
      "description": "Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response."
    },
    {
      "name": "Marketplace",
      "description": "Manage all your sub-entities (also known as sub-merchants) through one integration, globally."
    },
    {
      "name": "Sessions",
      "description": "Use Sessions to authenticate transactions with 3D Secure (3DS) and comply with Strong Customer Authentication (SCA) requirements."
    },
    {
      "name": "Workflows",
      "description": "Use Workflows to start receiving webhook notifications for your payments, disputes, and marketplace sub-entities."
    }
  ]
}