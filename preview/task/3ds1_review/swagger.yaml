openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Checkout.com API Reference
  x-logo:
    url: "https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg"
    backgroundColor: "#E6E7EC"
    altText: "Checkout.com API logo"
  contact:
    name: Checkout.com Support
    url: 'https://checkout.com'
    email: support@checkout.com
  license:
    name: Checkout.com
    url: 'https://checkout.com/api/license/'
  termsOfService: 'https://checkout.com/terms/'
  description: >
    # Introduction
    
    Checkout.com provides a collection of APIs that enable you to process and manage payments.  
    
    Our APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors.
    You can consume the APIs directly using your favorite HTTP/REST library or, if you'd like to make use of one of our SDKs, please let our Integration team know at <a href="mailto:integration@checkout.com" target="_blank">integration@checkout.com</a>.  
  

    Our unified payments API allows you to accept payments, as well as pay out to a variety of destinations, all using the same integration. 
    
    
    And with our workflow management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly. 
    
    # Authentication
    
    When you sign up for an account, you are given a public API key, and an access key ID and secret for OAuth 2.0. You authenticate with our API by following the appropriate authentication flow, using either your API keys or your access key credentials.


    Unless explicitly stated, all endpoints require authentication using OAuth. Public keys should only be used in JavaScript or native applications.


    Never share your access key credentials or access tokens. Keep them guarded and secure.

servers:
  - url: https://api.checkout.com
    description: Live API
  - url: https://api.sandbox.checkout.com
    description: Sandbox API
tags:
  - name: Access
  - name: Payments
    description: Process and manage payments from a variety of sources and to various destinations all within one integration.
  # - name: Sources
  #   description: Create a payment source for a customer that you can use for one or more payments.
  - name: Tokens
    description: Create a token that represents a card's details that you can later use to request a payment, without you having to process or store any sensitive information.
  - name: Instruments
    description: Capture your customersâ€™ bank account information and securely store it in the Vault to use for future payouts.
  - name: Forex
    description: Checkout.com Foreign Exchange services
  - name: Disputes
    description: Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response.
  - name: Marketplace
    description: Manage all your sub-entities (also known as sub-merchants) through one integration, globally.
  - name: Sessions
    description: Use Sessions to authenticate transactions with 3D Secure (3DS) and comply with Strong Customer Authentication (SCA) requirements.
  - name: Workflows
    description: Use Workflows to start receiving webhook notifications for your payments, disputes, and marketplace sub-entities.
  # - name: Files
  #   description: |
  #     Upload files to be used as input to other APIs

# x-tagGroups:
# - name: Flow
#   tags:
#     - Events
#     - Workflows
paths:
  /connect/token:
    servers:
      - url: https://access.checkout.com
        description: Live API
      - url: https://access.sandbox.checkout.com
        description: Sandbox API
    post:
      summary: Request an access token
      tags: 
        - Access
      responses:
        '200':
          description: OK - A successful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 2YotnFZFEjr1zCsicMWpAA
                  token_type:
                    type: string
                    example: example
                  expires_in:
                    type: number
                    example: 3600
    
        '400':
          description: Bad request - An unsuccessful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                     - invalid_request
                     - invalid_client
                     - invalid_grant
                     - unauthorized_client
                     - unsupported_grant_type
                     - invalid_scope
      description: OAuth endpoint to exchange your access key ID and access key secret for an access token.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - client_credentials
                  example: client_credentials
                client_id:
                  type: string
                  description: "Access key ID"
                client_secret:
                  type: string
                  description: "Access key secret"
                scope:
                  type: string
                  description: The access key scope
                  example: gateway
            examples:
              example-1:
                value:
                  grant_type: client_credentials
                  client_id: ack_clckqmmnyfiupexjew7shh5ahe
                  client_secret: Pmg36sDWQ9WxtPR3
      x-code-samples:
        - lang: cURL
          source: "curl --location --request POST 'https://access.checkout.com/connect/token'\n  --header 'Content-Type: application/x-www-form-urlencoded'\n  --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ='\n  --data-urlencode 'grant_type=client_credentials'\n  --data-urlencode 'scope=gateway'"
  /disputes:
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        # - ApiKey: []
      summary: Get disputes
      description: >-
        Returns a list of all disputes against your business. The results will be
        returned in reverse chronological order, showing the last modified dispute
        (for example, where you've recently added a piece of evidence) first. You
        can use the optional parameters below to skip or limit results.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
            default: 50
          required: false
          description: The numbers of results to return
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of results to skip
        - in: query
          name: from
          schema:
            type: string
            format: ISO-8601
          required: false
          description: >-
            The date and time from which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: to
          schema:
            type: string
            format: ISO-8601
          required: false
          description: >-
            The date and time until which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: The unique identifier of the dispute
        - in: query
          name: entity_ids
          schema:
            type: string
            example: 'ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku'
          required: false
          description: >-
            One or more comma-separated client entities. This works like a logical *OR*
            operator
        - in: query
          name: sub_entity_ids
          schema:
            type: string
            example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi'
          required: false
          description: >-
            One or more comma-separated sub-entities. This works like a logical *OR*
            operator
        - in: query
          name: statuses
          schema:
            type: string
            example: 'evidence_required,evidence_under_review'
          required: false
          description: >-
            One or more comma-separated statuses. This works like a logical *OR*
            operator
        - in: query
          name: payment_id
          schema:
            type: string
          required: false
          description: The unique identifier of the payment
        - in: query
          name: payment_reference
          schema:
            type: string
          required: false
          description: >-
            An optional reference (such as an order ID) that you can use later to
            identify the payment. Previously known as `TrackId`
        - in: query
          name: payment_arn
          schema:
            type: string
          required: false
          description: >-
            The acquirer reference number (ARN) that you can use to query the
            issuing bank
        - in: query
          name: payment_mcc
          schema:
            type: string
          required: false
          description: The merchant category code (MCC) of the payment (ISO 18245)
        - in: query
          name: this_channel_only
          schema:
            type: boolean
          required: false
          description: >-
            If `true`, only returns disputes of the specific channel that the secret
            key is associated with. Otherwise, returns all disputes for that
            business
      responses:
        '200':
          description: Disputes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputePaged'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable paging
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingError'
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputes = await cko.disputes.get({\n  limit: 5,\n  id: \"dsp_bc94ebda8d275i461229\",\n});"
  /disputes/{dispute_id}:
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        # - ApiKey: []
      summary: Get dispute details
      description: Returns all the details of a dispute using the dispute identifier.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputeDetails = await cko.disputes.getDetails(\n  \"dsp_bc94ebda8d275i461229\"\n);"
  /disputes/{dispute_id}/accept:
    post:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:accept
        # - ApiKey: []
      summary: Accept dispute
      description: >-
        If a dispute is legitimate, you can choose to accept it. This will close it
        for you and remove it from your list of open disputes. There are no further
        financial implications.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst accept = await cko.disputes.accept(\"dsp_bc94ebda8d275i461229\");"
  /disputes/{dispute_id}/evidence:
    put:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:provide-evidence
        # - ApiKey: []
      summary: Provide dispute evidence
      description: >
        Adds supporting evidence to a dispute. Before using this endpoint, you first
        need to [upload your files](#tag/Disputes/paths/~1files/post) using the file
        uploader. You will receive a file id (prefixed by `file_`) which you can
        then use in your request.
        Note that this only attaches the evidence to the dispute, it does not send
        it to us. Once ready, you will need to submit it.
        **You must provide at least one evidence type in the body of your request.**
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvideEvidenceRequest'
            required: true
      responses:
        '204':
          description: Dispute evidence provided successfully
        '400':
          description: Unprocessable
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
        '422':
          description: Unprocessable entity
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst evidence = await cko.disputes.provideEvidence(\n  \"dsp_bc94ebda8d275i461229\",\n  {\n    proof_of_delivery_or_service_text: \"http://checkout.com/document.pdf\",\n  }\n);"
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        # - ApiKey: []
      summary: Get dispute evidence
      description: >
        Retrieves a list of the evidence submitted in response to a specific
        dispute. 
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute evidence retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getEvidence = await cko.disputes.getEvidence(\"dsp_bc94ebda8d275i461229\");"
    post:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:provide-evidence
        # - ApiKey: []
      summary: Submit dispute evidence
      description: >-
        With this final request, you can submit the evidence that you have
        previously provided. Make sure you have provided all the relevant
        information before using this request. You will not be able to amend your
        evidence once you have submitted it.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute evidence submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst submitEvidence = await cko.disputes.submit(\"dsp_bc94ebda8d275i461229\");"
  /files:
    post:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:provide-evidence
        # - ApiKey: []
      summary: Upload file
      description: >-
        Upload a file to use as evidence in a dispute. Your file must be in either
        JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst file = await cko.files.upload({\n  path: fs.createReadStream(\"./test/files/evidence.jpg\"),\n  purpose: \"dispute_evidence\",\n});"
  /files/{file_id}:
    get:
      tags:
        - Disputes
      security: 
        - OAuth: 
          - disputes
          - disputes:view
        # - ApiKey: []
      summary: Get file information
      description: Retrieve information about a file that was previously uploaded.
      parameters:
        - in: path
          name: file_id
          schema:
            type: string
          required: true
          description: The file identifier. It is always prefixed by `file_`.
      responses:
        '200':
          description: File information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResult'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: File not found
        '429':
          description: Too many requests or duplicate request detected
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getFile = await cko.files.getFile(\"file_zna32sccqbwevd3ldmejtplbhu\");"
  /workflows:
    get:
      security:
        - OAuth:
          - flow
          - flow:workflows
      tags:
        - Workflows
      summary: Get all workflows
      description: |
        Get all workflows
      responses:
        '200':
          description: Workflows retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-all-workflows-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
    
    
    post:
      security:
        - OAuth:
          - flow
          - flow:workflows
      tags:
        - Workflows
      summary: Add a workflow
      description: |
        Add a new Flow workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-workflow-request'
      responses:
        '201':
          description: Workflow added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
  /workflows/{workflowId}:
    get:
      security:
        - OAuth:
            - flow
            - flow:workflows
      tags:
        - Workflows
      summary: Get a workflow
      description: |
        Get the details of a workflow
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '200':
          description: Workflow retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
    
    # put:
    #   servers:
    #     - url: http://flow.cko.lon/client
    #       description: QA
    #   security:
    #     - OAuth:
    #         - flow
    #         - flow:workflows
    #   tags:
    #     - Workflows
    #   summary: Update a workflow
    #   description: |
    #     Update a workflow
    #   parameters:
    #     - in: path
    #       name: workflowId
    #       schema:
    #         type: string
    #         pattern: ^wf_[a-z0-9]{26}$
    #       required: true
    #       description: The workflow identifier
    #       example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/add-workflow-request'
    #   responses:
    #     '201':
    #       description: Workflow updated successfully
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/add-workflow-response'
    #       headers:
    #         Cko-Request-Id:
    #           schema:
    #             $ref: "#/components/headers/Cko-Request-Id"
    #         Cko-Version:
    #           schema:
    #             $ref: "#/components/headers/Cko-Version"
    #     '401':
    #       description: Unauthorized
    #     '404':
    #       description: Workflow not found 
    #     '500':
    #       description: Internal Error
    
    delete:
      tags:
        - Workflows
      summary: Remove a workflow
      description: |
        Removes a workflow so it is no longer being executed. 
        Actions of already executed workflows will be still processed.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '204':
          description: Workflow removed successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
  /workflows/event-types:
    get:
      security:
        - OAuth:
          - flow
          - flow:workflows
      tags:
        - Workflows
      summary: Get event types
      description: |
        Get a list of sources and their events for building new workflows
      responses:
        '200':
          description: Event types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-types-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
  /workflows/events/{eventId}:
    get:
      security:
        - OAuth:
          - flow
          - flow:events
      tags:
        - Workflows
      summary: Get an event
      description: |
        Get the details of an event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The event identifier
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-response'        
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"    
        '401':
          description: Unauthorized
        '404':
          description: Event not found
        '500':
          description: Internal Error
  /workflows/events/subject/{subjectId}:
    get:
      security:
        - OAuth:
          - flow
          - flow:events
      tags:
        - Workflows
      summary: Get subject events
      description: |
        Get all events that relate to a specific subject
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
          required: true
          description: The event identifier
          example: pay_wlu3wxc26jounofs5iez75qaqa
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject-events-response'        
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version" 
        '404':
          description: Subject not found
          headers:
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"    
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
  /forex/quotes:
    post:
      tags:
        - Forex
      security: 
        - OAuth: 
          - fx
      summary: Request a quote
      description: |
        Request a quote between a source and destination currency pair.
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/QuoteRequest'
      responses:
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
  /instruments:
    post:
      tags:
        - Instruments
      security: 
        - OAuth: 
          - vault
          - vault:instruments
        # - ApiKey: []
      summary: Create an instrument
      description: |
        Create a bank account payment instrument that you can later use as the destination for one or more payouts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInstrumentRequest'
      responses:
        '201':
          description: Instrument created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInstrumentResponse'  
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\ntry {\n  const instrument = await cko.instruments.create({\n    // infered type \"token\",\n    token: \"tok_bzi43qc6jeee5mmnfo4gnsnera\", // Generated by Checkout.Frames\n  });\n} catch (err) {\n  console.log(err.name);\n}"
  /marketplace/entities:
    post:
      description: |
        Onboard a sub-entity, so they can start receiving payments. Upon creation, Checkout.com will run due diligence checks. 
        If the checks are successful, the payment capabilities for the sub-entity will be enabled and they can start receiving payments.
      summary: Onboard a sub-entity
      requestBody:
        required: true
        description: The sub-entity to be onboarded
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreateRequest'
            examples:
              Company:
                value:
                  reference: superhero1234
                  contact_details: 
                    phone:
                      number: "2345678910"
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - "5669"
                  company:
                    business_registration_number: "452349600005"
                    legal_name: "Super Hero Masks Inc."
                    trading_name: "Super Hero Masks"
                    principal_address: 
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    representatives: 
                      - first_name: "John"
                        last_name: "Doe"
                        address: 
                          address_line1: "90 Tottenham Court Road"
                          city: "London"
                          zip: "W1T4TJ"
                          country: "GB"
                        identification:
                          description: Identification of the representative, used for verification
                          national_id_number: "AB123456C"
                        phone:
                          number: "2345678910"
              Individual:
                value:
                  reference: superhero1234
                  contact_details:
                    phone:
                      number: "2345678910"
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - "5669"
                  individual:
                    first_name: "John"
                    last_name: "Doe"
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    national_tax_id: "TAX123456"
      security:
        - OAuth:
          - marketplace
      responses:
        '201':
          description: Sub-entity onboarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBasicResponseWithLinks'
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: Sub-entity onboarding request conflicted with an existing sub-entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityLinks'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
  /marketplace/entities/{id}:
    parameters:
      - in: path
        name: id
        description: The id of the sub-entity
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    get:
      summary: Get sub-entity details
      security:
        - OAuth:
          - marketplace
      responses:
        '200':
          description: Sub-entity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExtendedResponse'
              examples:
                Company:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                    contact_details:
                      phone:
                        number: "2345678910"
                    profile:
                      urls:
                      - https://www.superheroexample.com
                      mccs:
                      - "5669"
                    company:
                      business_registration_number: "452349600005"
                      legal_name: Super Hero Masks Inc.
                      trading_name: Super Hero Masks
                      principal_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      representatives:
                      - first_name: John
                        middle_name: 
                        last_name: Doe
                        address:
                          address_line1: 90 Tottenham Court Road
                          city: London
                          zip: W1T4TJ
                          country: GB
                        identification:
                          national_id_number: AB123456C
                        phone:
                          number: "2345678910"
                    _links:
                      self:
                        href: https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli
                Individual:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                    contact_details:
                      phone:
                        number: "2345678910"
                    profile:
                      urls:
                      - https://www.superheroexample.com
                      mccs:
                      - "5669"
                    individual:
                      first_name: John
                      middle_name: Paul
                      last_name: Doe
                      trading_name: Super Hero Masks
                      legal_name: John Paul Doe
                      national_tax_id: "1234567"
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                    _links:
                      self:
                        href: https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '401':
          description: Unauthorized
        '404':
          description: Sub-entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
    put:
      description: |
        You can update all fields under the ContactDetails, Profile, and Company objects. 
        Please note that when you update a sub-entity we may conduct further due diligence checks when necessary. During these checks, your payment capabilities will remain the same.
      summary: Update sub-entity details
      requestBody:
        required: true
        description: The sub-entity to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityUpdateRequest"
            examples:
              Company:
                value:
                  contact_details: 
                    phone:
                      number: 2345678910
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - 5669
                  company:
                    business_registration_number: "452349600005"
                    legal_name: "Super Hero Masks Inc."
                    trading_name: "Super Hero Masks"
                    principal_address: 
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    representatives: 
                      - first_name: "John"
                        last_name: "Doe"
                        address: 
                          address_line1: "90 Tottenham Court Road"
                          city: "London"
                          zip: "W1T4TJ"
                          country: "GB"
                        identification:
                          description: Identification of the representative, used for verification
                          national_id_number: "AB123456C"
                        phone:
                          number: 2345678910
              Individual:
                value:
                  contact_details:
                    phone:
                      number: 2345678910
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - 5669
                  individual:
                    first_name: "John"
                    last_name: "Doe"
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: "90 Tottenham Court Road"
                      city: "London"
                      zip: "W1T4TJ"
                      country: "GB"
                    national_tax_id: "TAX123456"
      security:
        - OAuth:
          - marketplace
      responses:
        "200":
          description: Sub-entity updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityBasicResponseWithLinks"
          headers:
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
        "401":
          description: Unauthorized
        "404":
          description: Sub-entity not found
        "422":
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Marketplace
  /payments:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment
        # - ApiKey: []
      summary: Request a payment or payout
      description: |
        To accept payments, specify the `source.type` field, along with the source-specific data.
    
        To pay out to a bank account, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.
    
        To verify the success of the payment, check the `approved` field in the response.
    
      parameters:
        - in: header
          name: Cko-Idempotency-Key
          schema:
            type: string
          required: false
          description: An optional idempotency key for safely retrying payment requests
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/PaymentRequest'
            example:
              source:
                type: token
                token: tok_4gzeau5o2uqubbk6fufs3m7p54
              amount: 6540
              currency: USD
              payment_type: Recurring
              reference: "ORD-5023-4E89"
              description: "Set of 3 masks"
              capture: true
              capture_on: "2019-09-10T10:11:12Z"
              customer:
                id: "cus_udst2tfldj6upmye2reztkmm4i"
                email: "jokershere@gmail.com"
                name: "Jack Napier"
              billing_descriptor:
                name: SUPERHEROES.COM
                city: GOTHAM
              shipping:
                address:
                  address_line1: Checkout.com
                  address_line2: 90 Tottenham Court Road
                  city: London
                  state: London
                  zip: W1T 4TJ
                  country: GB
                phone:
                  country_code: "+1"
                  number: 415 555 2671
              3ds:
                enabled: true
                attempt_n3d: true
                eci: "05"
                cryptogram: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
                xid: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
                version: "2.0.1"
              previous_payment_id: "pay_fun26akvvjjerahhctaq2uzhu4"
              risk:
                enabled: false
              success_url: "http://example.com/payments/success"
              failure_url: "http://example.com/payments/fail"
              payment_ip: "90.197.169.245"
              recipient:
                dob: "1985-05-15"
                account_number: "5555554444"
                zip: W1T
                last_name: Jones
              processing:
                mid: "1234567"
              metadata:
                coupon_code: "NY2018"
                partner_id: 123989
    
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              example:
                id: "pay_mbabizu24mvu3mela5njyhpit4"
                action_id: "act_mbabizu24mvu3mela5njyhpit4"
                amount: 6540
                currency: "USD"
                approved: true
                status: "Authorized"
                auth_code: "770687"
                response_code: "10000"
                response_summary: "Approved"
                3ds:
                  downgraded: true
                  enrolled: "N"
                risk:
                  flagged: true
                source:
                  type: "card"
                  id: "src_nwd3m4in3hkuddfpjsaevunhdy"
                  billing_address:
                    address_line1: "Checkout.com"
                    address_line2: "90 Tottenham Court Road"
                    city: "London"
                    state: "London"
                    zip: "W1T 4TJ"
                    country: "GB"
                  phone:
                    country_code: "+1"
                    number: "415 555 2671"
                  last4: "4242"
                  fingerprint: "F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832"
                  bin: "424242"
                customer:
                  id: "cus_udst2tfldj6upmye2reztkmm4i"
                  email: "jokershere@gmail.com"
                  name: "Jack Napier"
                processed_on: '2019-09-10T10:11:12Z'
                reference: "ORD-5023-4E89"
                processing:
                  retrieval_reference_number: "909913440644"
                  acquirer_transaction_id: "440644309099499894406"
                eci: "06"
                scheme_id: "489341065491658"
                links:
                  self:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                  action:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions"
                  void:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures"
                  capture:
                    href: "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids"
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '202':
          description: Payment asynchronous or further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n    Reference = \"ORD-090857\",\n    Capture = false,\n    ThreeDs = true\n};\n\ntry\n{\n    var response = await api.Payments.RequestAsync(paymentRequest);\n\n    if (response.IsPending && response.Pending.RequiresRedirect())\n    {\n        return Redirect(response.Pending.GetRedirectLink().Href);\n    }\n\n    if (response.Payment.Approved)\n        return PaymentSucessful(response.Payment);\n\n    return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n    return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n    Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n    throw;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nTokenSource tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nPaymentRequest<TokenSource> paymentRequest = PaymentRequest.fromSource(tokenSource, Currency.USD, 5600);\npaymentRequest.setReference(\"ORD-090857\");\npaymentRequest.setCapture(false);\npaymentRequest.setThreeDS(ThreeDSRequest.from(true));\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestAsync(paymentRequest).get();\n\n    if (response.isPending() && response.getPending().requiresRedirect()) {\n        return redirect(response.getPending().getRedirectLink().getHref());\n    }\n\n    if (response.getPayment().isApproved())\n        return paymentSucessful(response.getPayment());\n\n    return paymentDeclined(response.getPayment());\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
        - lang: Node (Beta)
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n    const payment = await cko.payments.request({\n        source: {\n            // infered type: \"token\"\n            token: 'tok_bzi43qc6jeee5mmnfo4gnsnera' // Generated by Checkout.Frames\n            billing_address: {\n                address_line1: 'Wall Street',\n                address_line2: 'Dollar Avenue',\n                city: 'London',\n                state: 'London',\n                zip: 'W1W W1W',\n                country: 'GB'\n            },\n            phone: {\n                country_code: '44',\n                number: '7123456789'\n            }\n        },\n        currency: 'USD',\n        amount: 1000,\n        payment_type: 'Regular',\n        reference: 'ORDER 1234',\n        description: 'Mint Tea',\n        customer: {\n            email: 'new_user@email.com',\n            name: 'John Smith'\n        },\n        metadata: {\n            myCustomProp: {\n                value: 1\n            }\n        }\n    });\n\n} catch (err) {\n    console.log(err.name)\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
  /payments/{id}:
    get:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-details
        # - ApiKey: []
      summary: Get payment details
      description: |
        Returns the details of the payment with the specified identifier string.
    
        If the payment method requires a redirection to a third party (e.g., 3D Secure),
        the redirect URL back to your site will include a `cko-session-id` query parameter
        containing a payment session ID that can be used to obtain the details of the payment, for example:
    
        http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay|sid)_(\\w{26})$"
          required: true
          description: The payment or payment session identifier
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetails'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = await api.Payments.GetAsync(sessionId);\n\nif (payment.Approved)\n{            \n    var cardSourceId = payment.Source.AsCard().Id;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = api.paymentsClient().getAsync(sessionId).get();\n\nif (payment.isApproved()) {\n    String cardSourceId = ((CardSourceResponse)payment.getSource()).getId();\n}"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.get(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n	$details = $checkout->payments()->details($threeDsSessionId);\n	return $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n	return $ex->getErrors();\n}"
  /payments/{id}/actions:
    get:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-details
        # - ApiKey: []
      summary: Get payment actions
      description: |
        Returns all the actions associated with a payment ordered by processing date in descending order (latest first).
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      responses:
        '200':
          description: Payment actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentActionsResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nIEnumerable<PaymentAction> paymentActions = await api.Payments.GetActionsAsync(paymentId);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nList<PaymentAction> paymentActions = api.paymentsClient().getActionsAsync(paymentId).get();"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.getActions(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
  /payments/{id}/authorizations:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-authorizations
        # - ApiKey: []
      summary: Increment authorization
      description: |
        Request an incremental authorization to increase the authorization amount or extend the authorization's validity period (Mastercard only).
    
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
      responses:
        '201':
          description: Authorization processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
  /payments/{id}/captures:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-captures
        # - ApiKey: []
      summary: Capture a payment
      description: |
        Captures a payment if supported by the payment method.
    
        For card payments, capture requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the capture is successful.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '202':
          description: Capture accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\nawait api.Payments.CaptureAsync(paymentId);\n\n// Or partial capture\nvar captureRequest = new CaptureRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.CaptureAsync(paymentId, captureRequest);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\napi.paymentsClient().captureAsync(paymentId).get();\n\n// Or partial capture\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().captureAsync(paymentId, captureRequest).get();"
        - lang: Node (Beta)
          source: "import import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n    amount: 1000,\n    reference: 'CAPTURE ORDER 1234',\n    metadata: {\n        value: 'my value'\n    }\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
  /payments/{id}/refunds:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-refunds
        # - ApiKey: []
      summary: Refund a payment
      description: |
        Refunds a payment if supported by the payment method.
    
        For card payments, refund requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the refund is successful.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '202':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Refund not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\nawait api.Payments.RefundAsync(paymentId);\n\n// Or partial refund\nvar refundRequest = new RefundRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.RefundAsync(paymentId, refundRequest);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\napi.paymentsClient().refundAsync(paymentId).get();\n\n// Or partial refund\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().refundAsync(paymentId, refundRequest).get();"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.refund(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"REFUND ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
  /payments/{id}/voids:
    post:
      tags:
        - Payments
      security: 
        - OAuth: 
          - gateway
          - gateway:payment-voids
        # - ApiKey: []
      summary: Void a payment
      description: |
        Voids a payment if supported by the payment method.
    
        For card payments, void requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the void is successful.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
      responses:
        '202':
          description: Void accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoidAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Void not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nawait api.Payments.VoidAsync(paymentId);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\napi.paymentsClient().voidAsync(paymentId).get();"
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.void(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"VOID ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
  /sessions:
    post:
      tags:
        - Sessions
      security:
        - OAuth:
          - sessions:app
          - sessions:browser
      summary: Request a session
      description: |
        Create a payment session to authenticate a cardholder before requesting a payment.
        Payment sessions can be linked to one or more payments (in the case of recurring and other merchant-initiated payments).
    
        The `next_actions` object in the response tells you which actions can be performed next. 
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionOkResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '202':
          description: Session accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the `channel_data` property in the request is browser related.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsValidationError'
        '501':
          description: Not Implemented
        '502':
          description: Bad gateway
  /sessions/{id}:
    get:
      tags:
        - Sessions
      security:
        - OAuth:
          - sessions:app
          - sessions:browser
        - SessionSecret: []
      summary: Get session details
      description: |
        Returns the details of the session with the specified identifier string.
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
        - name: channel
          in: header
          description: Optionally provide the type of channnel so you only get the relevant actions
          schema:
            type: string
            enum: 
              - browser
              - app
            description: If a value is not provided, and if the `status` is `pending`, then `next_actions` will return `collect_channel_data` and if available, `issuer_fingerprint`.
            example: browser
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the session was initiated with the scope `sessions:browser`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Session not found
        '502':
          description: Bad gateway
  /sessions/{id}/collect-data:
    put:
      security:
        - SessionSecret: []
      summary: Update a session
      description: Update a session by providing information about the environment.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        '200':
          description: Session updated. DS has processed the authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Session not found
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsValidationError'
  /sessions/{id}/complete:
    post:
      security:
        - SessionSecret: []
      summary: Complete a session
      description: Completes a session by authorizing the associated payment.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session completed successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Session not found
  /sessions/{id}/issuer-fingerprint:
    put:
      security:
        - SessionSecret: []
      summary: Update session 3DS Method completion indicator
      description: Update the session's 3DS Method completion indicator based on the result of accessing the 3DS Method URL.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreeDsMethodCompletion'
      responses:
        '200':
          description: Session updated. Directory Server (DS) has processed the authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponseAfterChannelDataSupplied'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Session not found
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsValidationError'
  /tokens:
    post:
      tags:
        - Tokens
      security: 
        - ApiPublicKey: []
      summary: Request a token
      description: |
        Exchange card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes. 
        To create a token, please authenticate using your public key. 
    
        **Please note:** You should only use this for testing purposes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Reference token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node (Beta)
          source: "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\", { pk: \"pk_YYYY\" });\n\ntry {\n  const token = await cko.tokens.request({\n    // infered type: \"applepay\"\n    token_data: {\n      version: \"EC_v1\",\n      data: \"t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...\",\n      signature: \"MIAGCSqGbGUg...\",\n      header: {\n        ephemeralPublicKey: \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...\",\n        transactionId: \"3cee89679130a4b...\",\n      },\n    },\n  });\n} catch (err) {\n  console.log(err.name);\n}"
  /validation/bank-accounts/{country}/{currency}:
    get:
      tags:
        - Instruments
      security: 
        - OAuth: 
          - payout:bank-details
      summary: Get bank account fields
      description: |
        Returns the bank account fields required to create bank account instruments or perform payouts for the specified country and currency.
      parameters:
        - in: path
          name: country
          schema:
            type: string
            minLength: 2
            maxLength: 2
          required: true
          description: | 
            The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a>
        - in: path
          name: currency
          schema:
            type: string
            minLength: 3
            maxLength: 3
          required: true
          description: | 
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
        - in: query
          name: account-holder-type
          schema:
            type: string
            enum:
              - individual
              - corporate
              - government
          description: | 
            The type of account holder that will be used to filter the fields returned
        - in: query
          name: payment-network
          schema:
            type: string
            enum:
              - local
              - sepa
              - fps
              - ach
              - fedwire
              - swift
          description: | 
            The banking network that will be used to filter the fields returned
      responses:
        '200':
          description: Bank account fields retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountFields'
          headers:
            Cko-Request-Id:
              $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '404':
          description: Fields not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
components:
  schemas:
    Address:
      type: object
      properties:
        address_line1: 
          type: string
          description: The first line of the address
          example: Checkout.com
        address_line2:
          type: string
          description: The second line of the address
          example: 90 Tottenham Court Road
        city:
          type: string
          description: The address city
          example: London
        state:
          type: string
          description: The address state
          example: London
        zip:
          type: string
          description: The address zip/postal code
          example: W1T 4TJ
        country:
          type: string
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the address
          example: GB
          maxLength: 2
          minLength: 2
    Batch:
      type: object
      required:
        - id
        - status
        - _links
      properties:
        id:
          type: string
          description: Batch identifier
          pattern: "^bat_(\\w{26})$"
          example: bat_cyukd74c4xoezfuarvuwdcpzou
        status:
          type: string
          description: The status of the batch
          example: Processing
        _links:
          type: object
          required:
            - self
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the batch
              example:
                href: "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
    SubmitBatchRequest:
      type: object
      description: The batch request
      required:
        - file_id
        - action
      properties:
        file_id:
          type: string
          pattern: "^file_(\\w{26})$"
          description: The identifier of the batch file previously uploaded via the [Files API](#tag/Files)
          example: "file_6lbss42ezvoufcb2beo76rvwly"
        action:
          type: string
          description: The action to be performed against the batch
          enum:
            - payment
          example: "payment"
        reference:
          type: string
          description: Your reference for the batch. If provided, this will be validated against the batch file's header
          example: payments-20180701
    SubmitBatchResponse:
      type: object
      required:
        - id
        - status
        - _links
      properties:
        id:
          type: string
          description: Batch identifier
          pattern: "^bat_(\\w{26})$"
          example: bat_cyukd74c4xoezfuarvuwdcpzou
        status:
          type: string
          description: The batch status
          example: Processing
        _links:
          type: object
          required:
            - self
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the batch
              example:
                href: "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
    CustomerRequest:
      type: object
      description: The customer's details
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The identifier of an existing customer
          example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
        email:
          type: string
          format: email
          description: The customer's email address
          example: "jokershere@gmail.com"
        name:
          type: string
          description: The customer's name
          example: "Jack Napier"
    CustomerResponse:
      type: object
      description: Stored customer details
      required:
        - id
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The customer's unique identifier. This can be passed as a source when making a payment
          example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
        email:
          type: string
          description: The customer's email address
          example: "jokershere@gmail.com"
        name:
          type: string
          description: The customer's name
          example: "Jack Napier"
    Dispute:
      type: object
      properties:
        id:
          type: string
          pattern: "^(dsp)_(\\w{22})$"
          description: The dispute identifier. This is the same as the payment action ID
          example: "dsp_rbhwd2qrg13uhrp2newf"
        entity_id:
          type: string
          description: The client entity linked to this dispute
          example: "ent_wxglze3wwywujg4nna5fb7ldli"
        sub_entity_id:
          type: string
          description: The sub-entity linked to this dispute
          example: "ent_uzm3uxtssvmuxnyrfdffcyjxeu"
        category:
          type: string
          description: The reason for the dispute. [Find out more](https://docs.checkout.com/four/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)
          enum: [fraudulent, unrecognized, canceled_recurring, product_service_not_received, not_as_described, credit_not_issued, duplicate, incorrect_amount, general]
          example: "fraudulent"
        amount:
          type: number
          description: The amount that is being disputed, in the processing currency. This amount can be positive or negative depending on the type of transaction the dispute is received against
          example: 999
        currency:
          type: string
          description: The processing currency
          example: "GBP"
        reason_code:
          type: string
          description: The reason code provided by the card scheme
          example: "C42"
        status:
          type: string
          description: The current status of the dispute
          enum: [evidence_required, evidence_under_review, resolved, won, lost, canceled, expired, accepted, arbitration_under_review, arbitration_won, arbitration_lost]
          example: "evidence_required"
        relevant_evidence:
          type: array
          description: <i>This list and the dispute categories will change over time. Your evidence logic should be informed by this field, not hard coded.</i>
          items: 
            type: strings
            enum: [proof_of_delivery_or_service, invoice_or_receipt, invoice_showing_distinct_transactions, customer_communication, refund_or_cancellation_policy, recurring_transaction_agreement, additional_evidence]
            example: "proof_of_delivery_or_service"
        evidence_required_by:
          type: string
          format: ISO-8601
          description: The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer
          example: "2018-08-21T00:00:00Z"
        received_on:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was issued
          example: "2018-08-01T04:00:10Z"
        last_update:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was last updated
          example: "2018-08-04T10:53:13Z"
        payment:
          type: object
          description: Provides details for the payment linked to the dispute
          allOf:
            - $ref: '#/components/schemas/PaymentData'
        _links:
          type: object
          properties:
            self:
              description: The dispute retrieval endpoint
              properties:    
                href:
                  example: "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
            evidence:
              description: The dispute evidence retrieval endpoint
              properties:    
                href:
                  example: "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence"
    DisputePaged:
      type: object
      properties:
        limit:
          type: integer
          description: The numbers of items to return
          example: 10
        skip:
          type: integer
          description: The number of results to skip
          example: 10
        from:
          type: string
          format: ISO-8601
          description: The date and time from which to filter disputes, based on the dispute's `last_update` field
          example: "2018-08-12T01:15:56Z"
        to:
          type: string
          format: ISO-8601
          description: The date and time until which to filter disputes, based on the dispute's `last_update` field
          example: "2018-08-13T11:09:01Z"
        id:
          type: string
          pattern: "^(dsp)_(\\w{22})$"
          description: The unique identifier of the dispute
          example: "dsp_rbhwd2qrg13uhrp2newf"
        entity_ids:
          type: string
          description: One or more comma-separated client entities. This works like a logical *OR* operator
          example: "ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku"
        sub_entity_ids:
          type: string
          description: One or more comma-separated sub-entities. This works like a logical *OR* operator
          example: "ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi"
        statuses:
          type: string
          description: One or more comma-separated statuses. This works like a logical *OR* operator
          example: "evidence_required,evidence_under_review"
        payment_id:
          type: string
          pattern: "^(pay)_(\\w{26})$"
          description: The unique identifier of the payment
          example: "pay_88cb4e671m1da22e9bbbyx"
        payment_reference:
          type: string
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
          example: "th7zxa1kcnqmes8"
        payment_arn:
          type: string
          description: The acquirer reference number (ARN) that you can use to query the issuing bank
          example: "74548998294293193445538"
        payment_mcc:
          type: string
          description: The merchant category code (MCC) of the payment (ISO 18245)
          example: "5021"
        this_channel_only:
          type: boolean
          description: If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business
          example: true
        total_count:
          type: integer
          description: The total number of disputes retrieved (without taking into consideration skip and limit parameters)
          example: 1
        data:
          type: array
          description: The list of disputes
          items:
            $ref: "#/components/schemas/DisputeSummary"
    DisputeSummary:
      type: object
      properties:
        id:
          type: string
          pattern: "^(dsp)_(\\w{22})$"
          description: The dispute identifier. This is the same as the action ID in the reconciliation API or the charge ID in the Hub.
          example: "dsp_rbhwd2qrg13uhrp2newf"
        entity_id:
          type: string
          description: The client entity linked to this dispute
          example: "ent_wxglze3wwywujg4nna5fb7ldli"
        sub_entity_id:
          type: string
          description: The sub-entity linked to this dispute
          example: "ent_uzm3uxtssvmuxnyrfdffcyjxeu"
        category:
          type: string
          description: The reason for the dispute. [Find out more](https://docs.checkout.com/four/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)
          enum: [fraudulent, unrecognized, canceled_recurring, product_service_not_received, not_as_described, credit_not_issued, duplicate, incorrect_amount, general]
          example: "fraudulent"
        status:
          type: string
          description: The current status of the dispute
          enum: [evidence_required, evidence_under_review, resolved, won, lost, canceled, expired, accepted, arbitration_under_review, arbitration_won, arbitration_lost]
          example: "evidence_required"
        amount:
          type: number
          description: The amount that is being disputed, in the processing currency
          example: 999
        currency:
          type: string
          description: The currency the payment was made in
          example: "GBP"
        payment_id:
          type: string
          description: The unique payment identifier
          example: "pay_88cb4e671m1da22e9bbbyx"
        payment_action_id:
          type: string
          description: The unique identifier of the payment action
          example: "act_mbabizu24mvu3mela5njyhpit4"
        payment_reference:
          type: string
          description: An optional reference (such as an order ID) a merchant can use to later identify the charge. Previously known as TrackId
          example: "th7zxa1kcnqmes8"
        payment_arn:
          type: string
          description: The acquirer reference number that can be used to query the issuing bank
          example: "74548998294293193445538"
        payment_mcc:
          type: string
          description: The merchant category code (MCC) of the payment (ISO 18245)
          example: "5021"
        payment_method:
          type: string
          description: The payment method/card scheme
          example: VISA
        evidence_required_by:
          type: string
          format: ISO-8601
          description: The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer
          example: "2018-08-22T00:00:00Z"
        received_on:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was issued
          example: "2018-08-01T01:15:56Z"
        last_update:
          type: string
          format: ISO-8601
          description: The date and time at which the dispute was last updated
          example: "2018-08-12T04:15:56Z"
        _links:
          type: object
          properties:
            self:
              description: The dispute retrieval endpoint
              properties:    
                href:
                  example: 'https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf'
    Evidence:
      type: object
      properties:
        proof_of_delivery_or_service_file:
          type: string
          description: The file ID of the file you uploaded as a proof of delivery or service
          example: "file_jmbfgkjromvcrn9t4qu4"
        proof_of_delivery_or_service_text:
          type: string
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Delivery slip signed by the customer"
        proof_of_delivery_or_service_date_text:
          type: string
          description: The date on which the item was delivered. You can also use this field to provide a link
          example: "Merchandise was delivered on 2018-12-30"
    File:
      type: object
      required:
          - path
          - purpose
      properties:
        path:
          type: string
          description: The path of the file to upload and its type
          example: "file=@/path/receipt.png;type=image/png"
        purpose:
          type: string
          description: The purpose of the file upload. You must set this to `dispute_evidence`
          example: "dispute_evidence"
      
    FilePurpose:
      type: string
      description: The list of file upload purposes. Currently this is only `dispute_evidence`
      example: "dispute_evidence"
      enum:
        - dispute_evidence
    FileResult:
      type: object
      description: File was retrieved successfully
      properties:
        id:
          type: string
          description: The file identifier
          example: "file_6lbss42ezvoufcb2beo76rvwly"
        filename:
          type: string
          description: The filename, including its extension
          example: "receipt.jpg"
        purpose:
          $ref: "#/components/schemas/FilePurpose"
        size:
          type: integer
          description: The size of the file upload object (in bytes)
          example: 1024
        uploaded_on:
          type: string
          format: ISO-8601
          description: The date and time file was uploaded (in UTC)
          example: "2019-05-17T16:48:52Z"
        _links:
          type: object
          properties:
            self:
              description: The file information retrieval URL
              properties:    
                href:
                  example: "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
            download:
              description: The temporary file download URL. This expires after 60 minutes
              properties:    
                href:
                  example: "https://cabinet-upload-prod.s3.eu-west-1.amazonaws.com/ucdac/ucdac/6lbss42ezvoufcb2beo76rvwly?X-Amz-Expires=3600&x-amz-security-token=FQoDYXdzENL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEa"
    FileUploadResponse:
      type: object
      description: File uploaded successfully
      properties:
        id:
          type: string
          description: The file identifier
          example: "file_6lbss42ezvoufcb2beo76rvwly"
        _links:
          type: object
          properties:
            self:
              description: The file information retrieval URL
              properties:    
                href:
                  example: "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
    PaymentData:
      type: object
      properties:
        id:
          type: string
          description: The payment's unique identifier
          example: "pay_mbabizu24mvu3mela5njyhpit4"
        action_id:
          type: string
          description: The unique identifier of the payment action
          example: "act_mbabizu24mvu3mela5njyhpit4"
        processing_channel_id:
          type: string
          description: The processing channel used for the payment
          example: "mer_q4dbxom5jbgudnjzjpz7j2z6uq"
        amount:
          type: number
          description: The amount that is being disputed, in the processing currency
          example: 999
        currency:
          type: string
          description: The payment currency
          example: "GBP"
        method:
          type: string
          description: The payment method used
          example: "Visa"
        arn:
          type: string
          description: The acquirer reference number (ARN)
          example: "AA246873253573571073808"
        mcc:
          type: string
          description: The merchant category code (MCC) for the payment (ISO 18245)
          example: "5021"
        3ds:
          type: object
          description: Provides information relating to the processing of 3D Secure payments
          properties:
            enrolled:
              type: string
              description: >
                Indicates the 3D Secure enrollment status of the issuer
                  * `Y` - Issuer enrolled
                  * `N` - Customer not enrolled
                  * `U` - Unknown
              example: Y
            version:
              type: string
              description: Indicates the version of 3D Secure that was used for authentication
              example: "2.1.0"
        eci:
          type: string
          description: |
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: "06"
        has_refund:
          type: boolean
          description: Indicates if there is any refund against the payment
        processed_on:
          type: string
          format: ISO-8601
          description: The date and time at which the payment was requested
          example: "2018-08-01T08:18:10Z" 
    ProvideEvidenceRequest:
      type: object
      properties:
        proof_of_delivery_or_service_file:
          type: string
          description: A file containing proof of delivery of goods or services
          example: "file_jmbfgkjromvcrn9t4qu4"
        proof_of_delivery_or_service_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "http://checkout.com/document.pdf"
        invoice_or_receipt_file:
          type: string
          description: A file containing an invoice/receipt
          example: "file_jmbfgkjromvcrn9t4qu4"
        invoice_or_receipt_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Copy of the invoice"
        invoice_showing_distinct_transactions_file:
          type: string
          description: A file containing invoice showing two distinct transactions
          example: "file_jmbfgkjromvcrn9t4qu4"
        invoice_showing_distinct_transactions_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Copy of invoice #1244 showing two transactions"
        customer_communication_file:
          type: string
          description: A file containing customer cummunication
          example: "file_jmbfgkjromvcrn9t4qu4"
        customer_communication_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Copy of an email exchange with the cardholder"
        refund_or_cancellation_policy_file:
          type: string
          description: A file containing refund/cancellation policy
          example: "file_jmbfgkjromvcrn9t4qu4"
        refund_or_cancellation_policy_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Copy of the refund policy"
        recurring_transaction_agreement_file:
          type: string
          description: A file containing the recurring transaction agreement
          example: "file_jmbfgkjromvcrn9t4qu4"
        recurring_transaction_agreement_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Copy of the recurring transaction agreement"
        additional_evidence_file:
          type: string
          description: A file containing additional supporting documents
          example: "file_jmbfgkjromvcrn9t4qu4"
        additional_evidence_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Scanned document"
        proof_of_delivery_or_service_date_file:
          type: string
          description: A file showing the delivery date of the provided service/merchandise
          example: "file_jmbfgkjromvcrn9t4qu4"
        proof_of_delivery_or_service_date_text:
          type: string
          maximum: 500
          description: A brief text description of the file. You can also use this field to provide a link
          example: "Copy of the customer receipt showing the merchandise was delivered on 2018-12-20"
          _links:
            type: object
            properties:
              self:
                description: The evidence retrieval endpoint
                properties:    
                  href:
                    example: "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence"
              parent:
                description: The dispute retrieval endpoint
                properties:    
                  href:
                     example: "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
    EntityAddress:
      type: object
      title: Address
      properties:
        address_line1:
          type: string
          description: "The first line of the address. Note that the length of line 1 and line 2 combined must be at least 5 characters long"
          minLength: 1
          maxLength: 300
          example: "90 Tottenham Court Road"
        address_line2:
          type: string
          description: "The second line of the address"
          minLength: 0
          maxLength: 300
          example: null
        city:
          type: string
          description: "The address city"
          minLength: 2
          maxLength: 300
          example: "London"
        state:
          type: string
          description: "The address state (in the US, this is required and needs to be an ISO 3166-1 state code)"
          minLength: 0
          maxLength: 300
          example: null
        zip:
          type: string
          description: "The address zip/postal code"
          minLength: 1
          maxLength: 16
          example: "W1T4TJ"
        country:
          type: string
          description: The two-letter <a href="https://docs.checkout.com/docs/country-codes" target="blank">ISO country code</a> of the address
          minLength: 2
          maxLength: 2
          pattern: "[a-zA-Z]{2}"
          format: ISO 3166-1
          example: "GB"
    EntityBasicResponse:
      type: object
      title: BasicResponse
      readOnly: true
      properties:
        id:
          type: string
          description: The unique identifier of the sub-entity
          example: ent_wxglze3wwywujg4nna5fb7ldli
        reference:
          type: string
          description: A unique reference you can later use to identify this sub-entity
          minLength: 1
          maxLength: 15
          example: superhero1234
        capabilities:
          $ref: "#/components/schemas/EntityCapabilities"
    EntityBasicResponseWithLinks:
      type: object
      title: BasicResponseWithLinks
      allOf:
        - $ref: "#/components/schemas/EntityBasicResponse"
        - $ref: "#/components/schemas/EntityLinks"
    EntityCapabilities:
      type: object
      title: Capabilities
      properties:
        payments:
          type: object
          description: "Payment related capabilities of a sub-entity"
          properties:
            enabled:
              type: boolean
              description: True if payments are enabled
          example:
            enabled: false
    EntityCompany:
      type: object
      title: Company
      description: "Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted."
      properties:
        business_registration_number:
          type: string
          description: "The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number"
          minLength: 2
          maxLength: 16
          example: "452349600005"
        legal_name:
          type: string
          description: "The legal name of the sub-entity"
          minLength: 2
          maxLength: 300
          example: Super Hero Masks Inc.
        trading_name:
          type: string
          description: "The trading name of the sub-entity, also referred to as 'doing business as'"
          minLength: 2
          maxLength: 300
          example: Super Hero Masks
        principal_address:
          description: "The primary location of the company where business is performed"
          allOf:
            - $ref: "#/components/schemas/EntityAddress"
        registered_address:
          description: "The registered address of the company"
          allOf:
            - $ref: "#/components/schemas/EntityAddress"
        representatives:
          type: array
          title: Representatives
          description: "Information about representatives of this company"
          minItems: 1
          maxItems: 5
          items:
            $ref: "#/components/schemas/EntityRepresentative"
    EntityContactDetails:
      type: object
      title: ContactDetails
      description: "Contact details of this sub-entity"
      properties:
        phone:
          $ref: "#/components/schemas/EntityPhone"
    EntityCreateRequest:
      type: object
      title: CreateRequest
      allOf:
        - type: object
          properties:
            reference:
              type: string
              description: "A unique reference you can later use to identify this sub-entity"
              minLength: 1
              maxLength: 15
              example: superhero1234
        - $ref: "#/components/schemas/EntityUpdateRequest"
      required:
        - reference
    EntityExtendedResponse:
      type: object
      title: ExtendedResponse
      allOf:
        - $ref: "#/components/schemas/EntityBasicResponse"
        - type: object
          properties:
            contact_details:
              $ref: "#/components/schemas/EntityContactDetails"
            profile:
              $ref: "#/components/schemas/EntityProfile"
            company:
              $ref: "#/components/schemas/EntityCompany"
            individual:
              $ref: "#/components/schemas/EntityIndividual"
        - $ref: "#/components/schemas/EntityLinks"
    EntityIndividual:
      type: object
      title: Individual
      description: "Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted."
      properties:
        first_name:
          type: string
          description: "The individual's first name"
          minLength: 2
          maxLength: 50
          example: "John"
        middle_name:
          type: string
          description: "The individual's middle name"
          maxLength: 50
          example: "Paul"
        last_name:
          type: string
          description: "The individual's last name"
          minLength: 2
          maxLength: 50
          example: "Doe"
        trading_name:
          type: string
          description: "If applicable, the individual's trading name"
          minLength: 2
          maxLength: 300
          example: Super Hero Masks
        national_tax_id:
          type: string
          description: "The sub-entity's Tax Identification Code; for example, a Value Added Tax (VAT) Number in the UK"
          minLength: 2
          maxLength: 16
          example: "1234567"
        registered_address:
          title: Address
          description: "The registered address of the individual"
          allOf:
            - $ref: "#/components/schemas/EntityAddress"
    EntityLinks:
      type: object
      title: Links
      properties:
        _links:
          additionalProperties:
            $ref: "#/components/schemas/Link"
          example:
            self:
              href: "https://api.checkout.com/marketplace/entities/ent_wxglze3wwywujg4nna5fb7ldli"
    EntityPhone:
      type: object
      title: Phone
      properties:
        number:
          type: string
          description: "The phone number. This must not contain non-numeric characters and can't contain only zeros (For US numbers: Cannot start with 0 or 1 and must be at least 10 characters in length)"
          minLength: 8
          maxLength: 16
          example: "2345678910"
    EntityProfile:
      type: object
      title: Profile
      description: "Information about the profile of the sub-entity, primarily regarding the products/services offered."
      properties:
        urls:
          type: array
          description: "A collection of URLs of websites the sub-entity accepts payments on. All URLs joined with a space must be no longer than 4000 characters."
          minItems: 1
          maxItems: 100
          items:
            type: string
            description: "A URL of a website the sub-entity accepts payments on."
            minLength: 4
            maxLength: 300
            example: "https://www.superheroexample.com"
        mccs:
          type: array
          description: "A collection of 4-digit ISO 18245 merchant category codes classifying the sub-entity's industry"
          minItems: 1
          maxItems: 5
          items:
            type: string
            description: "A 4-digit ISO 18245 merchant category code classifying the sub-entity's industry"
            minLength: 4
            maxLength: 4
            example: "5669"
    EntityRepresentative:
      type: object
      title: Representative
      properties:
        first_name:
          type: string
          description: "The person's first name"
          minLength: 2
          maxLength: 300
          example: "John"
        middle_name:
          type: string
          description: "The person's middle name"
          maxLength: 300
          example: null
        last_name:
          type: string
          description: "The person's last name"
          minLength: 2
          maxLength: 300
          example: "Doe"
        address:
          title: Address
          description: "The representative's address"
          allOf:
            - type: object
              properties:
                address_line1:
                  type: string
                  description: "The first line of the address. If provided, the length of line 1 and line 2 combined must be at least 5 characters long"
                  minLength: 0
                  maxLength: 300
                  example: "90 Tottenham Court Road"
            - $ref: "#/components/schemas/EntityAddress"
        identification:
          type: object
          title: Identification
          description: "Identification of the representative, used for verification"
          properties:
            national_id_number:
              type: string
              description: "The official ID number, as applicable in the representative's country (For US, this must be numeric otherwise alpha-numeric)"
              minLength: 1
              maxLength: 25
              example: AB123456C
        phone:
          description: "The phone number of the representative"
          allOf:
            - $ref: "#/components/schemas/EntityPhone"
    EntityUpdateRequest:
      type: object
      title: UpdateRequest
      properties:
        contact_details:
          title: ContactDetails
          allOf:
            - $ref: "#/components/schemas/EntityContactDetails"
            - type: object
              properties:
                phone:
                  description: "The phone number of the sub-entity"
                  allOf:
                    - $ref: "#/components/schemas/EntityPhone"
                  required:
                    - number
              required:
                - phone
        profile:
          title: Profile
          allOf:
            - $ref: "#/components/schemas/EntityProfile"
          required:
            - urls
            - mccs
        company:
          type: object
          title: Company
          description: "Information about the company represented by the sub-entity. Include this object if you are onboarding a company or business. This is required if the individual object is omitted."
          required:
            - legal_name
            - trading_name
            - principal_address
            - registered_address
            - representatives
          properties:
            business_registration_number:
              type: string
              description: "The Business Registration Number of the sub-entity, such as Commercial Registration, Ministry of Commerce certificate number or equivalent registration number"
              minLength: 2
              maxLength: 16
              example: "452349600005"
            legal_name:
              type: string
              description: "The legal name of the sub-entity"
              minLength: 2
              maxLength: 300
              example: Super Hero Masks Inc.
            trading_name:
              type: string
              description: "The trading name of the sub-entity, also referred to as 'doing business as'"
              minLength: 2
              maxLength: 300
              example: Super Hero Masks
            principal_address:
              title: Address
              description: "The primary location of the company where business is performed"
              allOf:
                - $ref: "#/components/schemas/EntityAddress"
              required:
                - address_line1
                - city
                - zip
                - country
            registered_address:
              title: Address
              description: "The registered address of the company"
              allOf:
                - $ref: "#/components/schemas/EntityAddress"
              required:
                - address_line1
                - city
                - zip
                - country
            representatives:
              type: array
              title: Representatives
              description: "Information about representatives of this company"
              minItems: 1
              maxItems: 5
              items:
                allOf:
                  - $ref: "#/components/schemas/EntityRepresentative"
                  - type: object
                    required:
                      - first_name
                      - last_name
                      - address
                    properties:
                      address:
                        required:
                          - country
        individual:
          type: object
          title: Individual
          description: "Information about the individual represented by the sub-entity. Include this object if you are onboarding a sole proprietor. This is required if the company object is omitted."
          required:
            - first_name
            - last_name
            - trading_name
            - registered_address
          properties:
            first_name:
              type: string
              description: "The individual's first name"
              minLength: 2
              maxLength: 50
              example: "John"
            middle_name:
              type: string
              description: "The individual's middle name"
              maxLength: 50
              example: "Paul"
            last_name:
              type: string
              description: "The individual's last name"
              minLength: 2
              maxLength: 50
              example: "Doe"
            trading_name:
              type: string
              description: "If applicable, the individual's trading name"
              minLength: 2
              maxLength: 300
              example: Super Hero Masks
            national_tax_id:
              type: string
              description: "The sub-entity's Tax Identification Code; for example, a Value Added Tax (VAT) Number in the UK"
              minLength: 2
              maxLength: 16
              example: "1234567"
            registered_address:
              title: Address
              description: "The registered address of the individual"
              allOf:
                - $ref: "#/components/schemas/EntityAddress"
              required:
                - address_line1
                - city
                - zip
                - country
      required:
        - contact_details
        - profile
      example:
        contact_details: 
          phone:
            number: 2345678910
        profile:
          urls:
            - https://www.superheroexample.com
          mccs:
            - 5669
        company:
          business_registration_number: "452349600005"
          legal_name: "Super Hero Masks Inc."
          trading_name: "Super Hero Masks"
          principal_address: 
            address_line1: "90 Tottenham Court Road"
            address_line2: null
            city: "London"
            state: null
            zip: "W1T4TJ"
            country: "GB"
          registered_address:
            address_line1: "90 Tottenham Court Road"
            address_line2: null
            city: "London"
            state: null
            zip: "W1T4TJ"
            country: "GB"
          representatives: 
            - first_name: "John"
              middle_name: null
              last_name: "Doe"
              address: 
                address_line1: "90 Tottenham Court Road"
                address_line2: null
                city: "London"
                state: null
                zip: "W1T4TJ"
                country: "GB"
              identification:
                national_id_number: "AB123456C"
              phone:
                number: 2345678910
    Error:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_malformed
    BillingDetails:
      type: object
      properties:
        address_line_1:
          type: string
          example: 372 Weimann Lane
        address_line_2:
          type: string
          example: Rolfson Alley
        post_code:
          type: string
          example: ew1 7zb
        country:
          type: string
          example: SJ
        city:
          type: string
          example: North Benedicthaven
        state:
          type: string
          example: Georgia
        phone:
          $ref: '#/components/schemas/Phone'
    Card:
      type: object
      properties:
        customer_id:
          type: string
          example: cust_7508EA38E86A4569AF12E483519E332D
        expiry_month:
          type: string
          example: '06'
        expiry_year:
          type: string
          example: 2018
        billing_details:
          $ref: '#/components/schemas/BillingDetails'
        id:
          type: string
          example: card_D44D7F4CCC6348698717CD80072808B0
        last4:
          type: string
          example: 424242******4242
        payment_method:
          type: string
          example: VISA
        fingerprint:
          type: string
          example: f639cab2745bee4140bf86df6b6d6e255c5945aac3788d923fa047ea4c208622
        name:
          type: string
          example: Test Customer
        cvv_check:
          type: string
          example: 'Y'
        avs_check:
          type: string
          example: S
    CustomerPaymentPlan:
      type: object
      properties:
        id:
          type: string
        customer_plan_id:
          type: string
        card_id:
          type: string
        customer_id:
          type: string
        name:
          type: string
        plan_track_id:
          type: string
        auto_cap_time:
          type: string
        value:
          type: integer
        currency:
          type: string
        cycle:
          type: string
        recurring_count:
          type: integer
        recurring_count_left:
          type: integer
        total_collected_value:
          type: integer
        total_collected_count:
          type: integer
        current_recurring_status:
          type: integer
        start_date:
          type: string
        previous_recurring_date:
          type: string
        next_recurring_date:
          type: string
    Data:
      type: object
      description: The event data
      properties:
        id:
          description: The payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        action_id:
          description: The unique identifier for the action performed against this payment
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The payment amount
          example: 6540
        currency:
          type: string
          description: The currency in which the payment was made (<a href="https://docs.checkout.com/docs/currency-codes" target="blank">three-letter ISO code</a>)
          example: USD
          maxLength: 3
          minLength: 3
        approved:
          type: boolean
          description: Whether the payment request was approved
          example: true
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
            - Authorized
            - Voided
            - Partially Captured
            - Captured
            - Partially Refunded
            - Refunded
            - Declined
            - Cancelled
          example: Authorized
        auth_code:
          type: string
          description: The acquirer authorization code, if the payment was authorized.
          example: "643381"
        response_code:
          type: string
          description: The gateway response code
          example: "10000"
        response_summary:
          type: string
          description: The gateway response summary
          example: "Approved"
        3ds:
          type: object
          description: Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure
          allOf:
            - $ref: '#/components/schemas/3dsEnrollmentData'
          example:
            downgraded: true
            enrolled: N
        flagged:
          type: boolean
          description: Whether the payment was flagged by a risk check
          default: false
          example: true
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseSource'
        customer:
          type: object
          description: The customer to which this payment is linked
          allOf:
            - $ref: '#/components/schemas/CustomerResponse'
        processed_on:
          description: The date/time the payment was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format.
          example:
            coupon_code: "NY2018"
            partner_id: 123989
    EventId:
      type: string
      description: The unique event identifier
      maxLength: 30
      minLength: 30
      example: "evt_az5sblvku4ge3dwpztvyizgcau"
    EventLinks:
      type: object
      description: The links related to the event
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the event
          example:
            href: "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau"
        webhooks-retry:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: A link to retry all of the webhooks configured for the event
          example:
            href: "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/retry"
    EventObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EventId'
        type:
          type: string
          description: The event type
          example: payment_approved
        version:
          type: string
          description: Determines the version of the event sent
          example: "2.0"
        created_on:
          description: The date/time the event occurred
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        data:
          $ref: '#/components/schemas/Data'
        notifications:
          type: array
          description: The notifications (e.g., webhooks) that have been sent for the event
          items:
            $ref: '#/components/schemas/NotificationSummary'
        _links:
          $ref: '#/components/schemas/EventLinks'
    EventResult:
      type: object
      properties:
        total_count:
          type: integer
          example: 100
          description: The total number of events
        limit:
          type: integer
          description: The `limit` query parameter
          example: 10
        skip:
          type: integer
          example: 10
          description: The `skip` query parameter
        from:
          type: string
          format: date-time
          description: The `from` query parameter
          example: "2018-01-01T00:00:00Z"
        to:
          type: string
          format: date-time
          example: "2018-01-15T12:00:00Z"
          description: The `to` query parameter
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventSummary'
    EventSummary:
      type: object
      properties:
        id:
          type: string
          maxLength: 30
          minLength: 30
          description: The event identifier
          example: evt_az5sblvku4ge3dwpztvyizgcau
        type:
          type: string
          description: The event type
          example: payment_approved
        created_on:
          description: The date/time the event occurred
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        _links:
          $ref: '#/components/schemas/EventLinks'
    EventTypesObject:
      type: object
      properties:
        version:
          type: string
          example: "2.0"
        event_types:
          type: array
          items:
            type: string
          example:
            - card_verification_declined
            - card_verified
            - dispute_canceled
            - dispute_evidence_required
            - dispute_expired
            - dispute_lost
            - dispute_resolved
            - dispute_won
            - payment_approved
            - payment_risk_matched
            - payment_pending
            - payment_declined
            - payment_expired
            - payment_cancelled
            - payment_voided
            - payment_void_declined
            - payment_captured
            - payment_capture_declined
            - payment_capture_pending
            - payment_refunded
            - payment_refund_declined
            - payment_refund_pending
            - payment_chargeback
            - payment_retrieval
    Notification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/NotificationId'
        url:
          type: string
          description: The notification endpoint
          example: https://example.com/webhooks
        success:
          type: boolean
          description: Whether the notification eventually succeeded
          example: false
        content_type:
          type: string
          description: The content type of the data sent to the endpoint
          example: json
        attempts:
          type: array
          description: The notification events ordered by timestamp in descending order (latest first)
          items:
            $ref: '#/components/schemas/NotificationAttempt'
        _links:
          type: object
          description: The links related to the notification
          properties:
            self:
              type: object
              description: The URI of the notification
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau
            retry:
              type: object
              description: A link to retry the notification to the configured webhook
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/wh_5nuzkt62ddxuho5rwsvt6pyesi/retry
    NotificationAttempt:
      type: object
      properties:
        status_code:
          type: integer
          description: The HTTP status code returned from the target server
          example: 400
        response_body:
          type: string
          description: The response body returned from the target server
          example: Bad Request
        retry_mode:
          type: string
          description: Whether the notification was sent automatically or requested manually
          enum:
            - Automatic
            - Manual
        timestamp:
          type: string
          description: The date/time the attempt was made
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
    NotificationId:
      type: string
      description: The unique notification identifier
      maxLength: 30
      minLength: 30
      example: "ntf_az5sblvku4ge3dwpztvyizgcau"
    NotificationSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/NotificationId'
        url:
          type: string
          description: The notification endpoint
          example: https://example.com/webhooks
        success:
          type: boolean
          description: Whether the notification eventually succeeded
          example: false
        _links:
          type: object
          description: The links related to the notification
          properties:
            self:
              type: string
              example:
                href: https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau
    Phone:
      type: object
      properties:
        country_code:
          type: string
          example: '975'
        number:
          type: string
          example: '174217187'
    Product:
      type: object
      properties:
        name:
          type: string
          example: Tablet 1 gold limited
        description:
          type: string
          example: Nokia Lumia
        sku:
          type: string
          example: 1aab2aa
        price:
          type: integer
          example: 100
        quantity:
          type: integer
          example: 1
        image:
          type: string
          example: 'http://www.test_Jabari.com/'
        shipping_cost:
          type: integer
          example: 10
        tracking_url:
          type: string
          example: 'https://www.tracker.com'
    ShippingDetails:
      type: object
      properties:
        address_line_1:
          type: string
          example: 333 Cormier Bypass
        address_line_2:
          type: string
          example: Rolfson Alley
        post_code:
          type: string
          example: BR3 6TK
        country:
          type: string
          example: GB
        city:
          type: string
          example: Bromley
        state:
          type: string
          example: Greater London
        phone:
          $ref: '#/components/schemas/Phone'
    get-event-action-response:
      type: object
      properties:
        event_id: 
          type: string
          description: The unique event identifier
          example: evt_az5sblvku4ge3dwpztvyizgcau
        workflow_action_id: 
          type: string
          description: The worfklow action identifier
          example: wfa_uzkxpffkvpiu5fe3h5ira7sqpa
        type:
          type: string
          description: The workflow action type
          example: webhook
        success:
          type: boolean
          description: Whether the workflow action was successful
          example: true
        invocations:
          type: array
          description: The results for each action invocation
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
                description: The date/time the action was invoked for the event
              success:
                type: boolean
                description: Whether the invocation completed successfully
              result:
                type: object
                description: The results returned from the action
              is_final:
                type: boolean
                description: Whether this is the final attempt
                example: false
          example:
            - timestamp: '2019-05-23T08:26:59Z'
              success: false
              result: 
                status_code: '500'
                summary: Server Error
              is_final: false
            - timestamp: '2019-05-23T08:27:01Z'
              success: true
              result: 
                status_code: '200'
                summary: OK
              is_final: true
    get-event-response:
      type: object
      additionalProperties: true
      properties:
        id: 
          type: string
          description: The unique event identifier
          example: evt_az5sblvku4ge3dwpztvyizgcau
        source:
          type: string
          description: The source of the event
          example: gateway
        type:
          type: string
          description: The event type
          example: payment_approved
        timestamp:
          type: string
          format: date-time
          description: The date/time the event occurred
        version:
          type: string
          description: The version of the event
          example: 1.0.0
        data:
          $ref: '#/components/schemas/event-data'
        # workflows:
        #   type: array
        #   description: The workflows that were invoked for this particular event
        #   items:
        #     type: object
        #     properties:
        #       id:
        #         type: string
        #         description: The unique identifier of the workflow
        #         example: wf_wlu3wxc26jounofs5iez75qaqa
        #       name:
        #         type: string
        #         description: The name you provided for your workflow
        #         example: Webhooks workflow
        #       actions:
        #         type: array
        #         description: The actions that were invoked for this workflow
        #         items:
        #           type: object
        #           properties:
        #             id: 
        #               type: string
        #               description: The worfklow action identifier
        #               example: wfa_uzkxpffkvpiu5fe3h5ira7sqpa
        #             type:
        #               type: string
        #               description: The type of workflow action
        #               example: webhook
        #             status:
        #               type: string
        #               enum:
        #                 - pending
        #                 - completed
        #                 - failed
        #               description: The status of the workflow action
        #               example: completed
        #             completed_on:
        #               type: string
        #               format: date-time
        #               description: The date/time the workflow action completed
        #             _links:
        #               type: object
        #               description: Links related to the workflow action
        #               minItems: 1
        #               required:
        #                 - self
        #               properties:
        #                 self:
        #                   type: object
        #                   allOf:
        #                     - $ref: '#/components/schemas/Link'
        #                   description: Workflow action results for this event
        #               example:
        #                 self:
        #                   href: "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/actions/wfa_uzkxpffkvpiu5fe3h5ira7sqpa"  
        _links:
          $ref: '#/components/schemas/event-links'
      
              
    get-event-types-response:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: The unique identifier of the event source
            example: gateway
          display_name:
            type: string
            description: The display name of the event source
            example: Gateway
          description:
            type: string
            description: A description of the event source
            example: Events from the Checkout.com payment gateway
          events:
            type: array
            description: The events raised by the source
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The event type identifier
                  example: payment_approved
                display_name:
                  type: string
                  description: The display name of the event
                  example: Payment Authorized
                description:
                  type: string
                  description: A description of the event
                  example: Occurs when a payment is successfully authorized by the Checkout.com payment gateway
    event-data:
      type: object
      description: The event data
      example:
        {
          "id": "pay_mbabizu24mvu3mela5njyhpit4",
          "action_id": "act_y3oqhf46pyzuxjbcn2giaqnb44",
          "amount": 6540,
          "currency": "USD",
          "approved": true,
          "status": "Authorized",
          "auth_code": "643381",
          "response_code": "10000",
          "response_summary": "Approved",
          "3ds": {
            "downgraded": true,
            "enrolled": "N"
          },
          "flagged": true,
          "source": {
            "type": "card",
            "id": "src_nwd3m4in3hkuddfpjsaevunhdy",
            "billing_address": {
              "address_line1": "Checkout.com",
              "address_line2": "90 Tottenham Court Road",
              "city": "London",
              "state": "London",
              "zip": "W1T 4TJ",
              "country": "GB"
            },
            "phone": {
              "country_code": "+1",
              "number": "415 555 2671"
            }
          },
          "customer": {
            "id": "cus_y3oqhf46pyzuxjbcn2giaqnb44",
            "email": "jokershere@gmail.com",
            "name": "Jack Napier"
          },
          "processed_on": "2020-02-27T11:26:59Z",
          "reference": "ORD-5023-4E89",
          "metadata": {
            "coupon_code": "NY2018",
            "partner_id": 123989
          }
        }
    event-links:
      type: object
      description: Links related to the event
      minItems: 1
      required:
        - self
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the event
      example:
        self:
          href: 'https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau'
    source-events-hashmap:
      type: object
      additionalProperties:
        description: The event source
        type: array
        items:
          type: string
          description: The source event types
          example: payment_approved
      example:
        gateway:
          - card_verified
          - card_verification_declined
          - payment_approved
          - payment_pending
          - payment_declined
          - payment_voided
          - payment_captured
          - payment_refunded
        disputes:
          - dispute_canceled
          - dispute_evidence_required
          - dispute_expired
          - dispute_lost
          - dispute_resolved
          - dispute_won
    subject-events-response:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
                description: The unique event identifier
                example: evt_az5sblvku4ge3dwpztvyizgcau
              type:
                type: string
                description: The event type
                example: payment_approved
              timestamp:
                type: string
                format: date-time
                description: The date/time the event occurred
              _links:
                $ref: '#/components/schemas/event-links'
          example:
            - id: evt_zrrgsvsr47ou7fng4shy4mtf64
              type: payment_approved
              timestamp: '2019-05-23T08:25:53Z'
              _links:
                self:
                  href: https://api.checkout.com/events/evt_zrrgsvsr47ou7fng4shy4mtf64
            - id: evt_wgwdfyem4ode5furs5swyy6b2u
              type: payment_captured
              timestamp: '2019-05-24T07:00:53Z'
              _links:
                self:
                  href: https://api.checkout.com/events/evt_zrrgsvsr47ou7fng4shy4mtf64
    webhook-action:
      type: object
      description: Action that sends a webhook
      required:
        - url
      allOf:
        - $ref: '#/components/schemas/workflow-action'
        - type: object
          required:
            - url
          properties:
            url:
              type: string
              format: uri
              description: Your webhook endpoint URL
              example: 'https://example.com/webhooks/checkout'
            headers:
              type: object
              description: Optional [HTTP headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) added to the request
              additionalProperties:
                type: string
                description: The HTTP header value
              example:
                Authorization: "70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf"
            signature:
              type: object
              description: Used to produce a signature of the webhook contents that will be included in the `Cko-Signature` header.
                This value can be computed by you on receipt of a webhook to validate its authenticity.
              required:
                - key
              properties:
                method:
                  type: enum
                    - HMACSHA256
                  description: The signing method, defaults to HMAC SHA256
                  example: HMACSHA256
                key:
                  type: string
                  description: The key used the sign the webhook
                  example: public-signing-key
    workflow-action:
      type: object
      description: The workflow action
      discriminator:
        propertyName: type
        mapping:
          webhook: '#/components/schemas/webhook-action'
      required: 
        - type
      properties:
        type:
          type: string
          description: The type of workflow action
          example: webhook
        
    add-workflow-request:
      type: object
      properties:
        name: 
          type: string
          description: A name you can use to describe your workflow
          example: Webhooks workflow
        conditions:
          type: array
          description: One or more workflow conditions
          minItems: 1
          items: 
            type: object
            properties:
              type:
                type: string
                enum:
                  - event
                example: event
              events:
                $ref: '#/components/schemas/source-events-hashmap'
        actions:
          type: array
          description: One or more workflow actions
          minItems: 1
          items:
            $ref: '#/components/schemas/workflow-action'
      example:
        {
          "name": "Webhooks workflow",
          "conditions": [
            {
              "type": "event",
              "events": {
                "gateway": [
                  "payment_approved",
                  "payment_pending",
                  "payment_declined"
                ]
              }
            }
          ],
          "actions": [
            {
              "type": "webhook",
              "url": "https://example.com/webhooks",
              "signature": {
                "key": "8V8x0dLK%AyD*DNS8JJr"
              },
              "headers": {
                "Authorization": "70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf"
              }
            }
          ]
        }
    add-workflow-response:
      type: object
      properties:
        id: 
          type: string
          description: The workflow identifier
          example: wf_wlu3wxc26jounofs5iez75qaqa
        _links:
          $ref: '#/components/schemas/workflow-links'
    get-all-workflows-response:
      
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                pattern: ^wf_[a-z0-9]{26}$
                description: The unique identifier of the workflow
                example: wf_wlu3wxc26jounofs5iez75qaqa
              name:
                type: string
                description: The name of your workflow
                example: Webhooks workflow
              _links:
                $ref: '#/components/schemas/workflow-links'
    get-workflow-response:
      type: object
      properties:
        name:
          type: string
          description: A name you can use to describe your workflow
          example: Webhooks workflow
        conditions:
          type: array
          description: One or more workflow conditions
          minItems: 1
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - event
                example: event
              events:
                $ref: '#/components/schemas/source-events-hashmap'
        actions:
          type: array
          description: One or more workflow actions
          minItems: 1
          items:
            $ref: '#/components/schemas/workflow-action'
        _links:
          $ref: '#/components/schemas/workflow-links'
    workflow-links:
      type: object
      description: Links related to the workflow
      minItems: 1
      required:
        - self
      properties:
        self:
          type: object
          allOf:
            - $ref: '#/components/schemas/Link'
          description: The URI of the workflow
      example:
        self:
          href: "https://api.checkout.com/workflows/wf_wlu3wxc26jounofs5iez75qaqa"
    QuoteId:
      type: string
      pattern: "^(qte)_(\\w{26})$"
      description: The FX quote identifier
      maxLength: 30
      minLength: 30
      example: "qte_mbabizu24mvu3mela5njyhpit4"
    QuoteRequest:
      type: object
      required:
        - source_currency
        - destination_currency
      properties:
        source_currency:
          type: string
          description: The source three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: GBP
        source_amount:
          type: integer
          description: | 
            The amount to be converted from the source currency in the minor currency unit.
      
            The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="_blank">minor currency unit</a>.
          example: 30000
        destination_currency:
          type: string
          description: The destination three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: USD
        destination_amount:
          type: integer
          description: | 
            The amount to be converted to the destination currency in the minor currency unit.
      
            The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="_blank">minor currency unit</a>.
      example:
        source_currency: GBP
        source_amount: 30000
        destination_currency: USD
    QuoteResponse:
      type: object
      properties:
        id:
          description: The quote's unique identifier
          allOf:
            - $ref: '#/components/schemas/QuoteId'
        source_currency:
          type: string
          description: The source three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: GBP
        source_amount:
          type: integer
          description: The source currency amount
          example: 30000
        destination_currency:
          type: string
          description: The destination three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
          example: USD
        destination_amount:
          type: integer
          description: The destination currency amount
          example: 35700
        rate:
          type: number
          description: The quoted rate
          example: 1.19
        expires_on:
          type: string
          format: date-time
          description: The date/time that the quote expires
        is_single_use:
          type: boolean
          description : If the quote is restricted to a single use, or can be confirmed multiple times before expiry
          example: false 
    AccountHolder:
      type: object
      description: The account holder details
      properties:
        type:
          description: The type of account holder
          type: string
          enum:
            - individual
            - corporate
            - government
          example: individual
      
        first_name:
          description: |
            The account holder's first name. 
            Required if `type` is `individual`.
          type: string
          example: "John"
      
        last_name:
          description: | 
            The account holder's last name.
            Required if `type` is `individual`.
          type: string
          example: "Smith"
      
        company_name:
          description: | 
            The legal name of a registered company that holds the account.
            Required if `type` is `corporate`.
          type: string
          example: Test company
      
        tax_id:
          description: The account holder's tax number/reference
          type: string
          example: "123456"
      
        date_of_birth:
          description: The account holder's date of birth in `YYYY-MM-DD` format
          type: string
          format: date
          example: "1986-01-01"
      
        country_of_birth:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the account holder's country of birth
          type: string
          example: GB
      
        residential_status:
          description: The account holder's residential status
          type: string
          enum:
            - resident
            - non_resident
          example: resident
      
        billing_address:
          description: The billing address of the account holder
          allOf:
            - $ref: "#/components/schemas/Address"
      
        phone:
          description: The phone number of the account holder
          allOf:
            - $ref: "#/components/schemas/PhoneNumber"
      
        identification:
          $ref: "#/components/schemas/AccountHolderIdentification"
      
        email:
          description: The account holder's email address
          type: string
          format: email
          example: test.user@checkout.com
    AccountHolderIdentification:
      type: object
      description: Bank account holder's proof of identification
      properties:
        type:
          description: The type of identification used to identify the account holder
          type: string
          enum: 
            - passport
            - driving_licence
            - national_id
            - company_registration
            - tax_id
          example: passport
        number:
          description: The identification number
          type: string
          example: 09876
        issuing_country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the country that issued the identification
          type: string
          example: US
    BankDetails:
      type: object
      description: Details of the bank
      properties:
        name:
          description: The bank's name
          type: string
          example: Lloyds TSB
      
        branch:
          description: The bank branch's name
          type: string
          example: Bournemouth
      
        address:
            allOf: 
              - $ref: "#/components/schemas/Address"
            description: The bank's contact address
    StoreBankAccountInstrumentRequest:
      type: object
      description: Store bank account details
      allOf:
        - $ref: "#/components/schemas/StoreInstrumentRequest"
        - type: object
      required:
        - currency
        - country
      properties:
        type:
          description: The type of instrument
          type: string
      
        account_type:
          description: The type of account
          type: string
          enum: 
            - savings
            - current
            - cash
          example: savings
      
        account_number:
          description: Number (which can contain letters) that identifies the account
          type: string
          example: '13654567455'
      
        bank_code:
          description: Code that identifies the bank
          type: string
          example: 123-456
      
        branch_code:
          description: Code that identifies the bank branch
          type: string
          example: '6443'
      
        iban:
          description: Internationally agreed standard for identifying bank account
          type: string
          example: HU93116000060000000012345676
      
        bban:
          description: The combination of bank code and/or branch code and account number
          type: string
          example: 3704 0044 0532 0130 00
      
        swift_bic:
          description: 8 or 11 character code which identifies the bank or bank branch
          type: string
          example: '37040044'
      
        currency:
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the account's currency
          type: string
          example: GBP
      
        country:
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of where the account is based
          type: string
          example: GB
      
        account_holder:
          $ref: "#/components/schemas/AccountHolder"
      
        bank:
          $ref: "#/components/schemas/BankDetails"
      
        # intermediary_bank:
        #   $ref: "#/components/schemas/bank_account_intermediary_bank"
        #   description: Details of the intermediary bank
      
        customer:
          $ref: "#/components/schemas/CustomerRequest"
      
      
    StoreBankAccountInstrumentResponse:
      type: object
      description: Store bank account instrument response
      allOf:
        - $ref: '#/components/schemas/StoreInstrumentResponse'
      required:
        - fingerprint
      properties:
        type:
          description: The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized)
          type: string
          example: "card"
        fingerprint:
          type: string
          description: A token that can uniquely identify this instrument across all customers
          pattern: ^([a-z0-9]{26})$
          example: vnsdrvikkvre3dtrjjvlm5du4q
        customer:
          $ref: '#/components/schemas/CustomerResponse'
    StoreInstrumentRequest:
      type: object
      description: The type of instrument to be stored
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/StoreBankAccountInstrumentRequest'
      required:
        - type
      properties:
        type:
          description: The type of instrument
          type: string
    StoreInstrumentResponse:
      type: object
      description: The response for type of instrument stored
      required:
        - type
        - id
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/StoreBankAccountInstrumentResponse'
      properties:
        type:
          description: The type of instrument
          type: string
        id:
          description: The unique identifier of the payment source or destination that can be used later for payments
          type: string
          example: "src_wmlfc3zyhqzehihu7giusaaawu"
      
    InvalidError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            details:
              type: array
              items:
                type: string
    IPAddress:
      type: string
      format: ipv4
      example: "90.197.169.245"
    Link:
      type: object
      properties:
        href:
          description: The link URL
          type: string
      required:
        - href
    SelfLink:
      type: object
      allOf:
        - $ref: "#/components/schemas/Link"
      properties:
        rel:
          description: The link type
          type: string
          enum:
            - self
      required:
        - rel
    PagingError:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: paging_limit_invalid
    3dsData:
      type: object
      properties:
        downgraded:
          type: boolean
          description: Inidicates whether this was a 3D Secure payment downgraded to non-3D Secure (when `attempt_n3d` is specified)
          example: false
        enrolled:
          type: string
          description: >
            Indicates the 3D Secure enrollment status of the issuer
              * `Y` - Issuer enrolled
              * `N` - Customer not enrolled
              * `U` - Unknown
          example: Y
        signature_valid:
          type: string
          description: Verification to ensure the integrity of the response
          example: Y
        authentication_response:
          type: string
          description: >
            Indicates whether or not the cardholder was authenticated
              * `Y` - Customer authenticated
              * `N` - Customer not authenticated
              * `A` - An authentication attempt occurred but could not be completed
              * `U` - Unable to perform authentication
          example: Y
        cryptogram:
          type: string
          description: Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the integrity of the 3D secure payment data
          example: hv8mUFzPzRZoCAAAAAEQBDMAAAA=
        xid:
          type: string
          description: Unique identifier for the transaction assigned by the MPI
          example: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
        version:
          type: string
          description: Indicates the version of 3D Secure that was used for authentication
          example: "2.1.0"
    3dsEnrollmentData:
      type: object
      properties:
        downgraded:
          type: boolean
          description: Indicates whether this was a 3D Secure payment downgraded to non-3D-Secure (when `attempt_n3d` is specified)
          example: false
        enrolled:
          type: string
          description: >
            Indicates the 3D Secure enrollment status of the issuer
              * `Y` - Issuer enrolled
              * `N` - Customer not enrolled
              * `U` - Unknown
          example: Y
    3dsRequest:
      type: object
      description: Information required for 3D Secure payments
      properties:
        enabled:
          type: boolean
          description: Whether to process this payment as a 3D Secure payment
          default: false
          example: true
        attempt_n3d:
          type: boolean
          description: |
            Determines whether to attempt a 3D Secure payment as non-3D Secure
            should the card issuer not be enrolled
          default: false
          example: true
        eci:
          type: string
          description: The Electronic Commerce Indicator security level associated with the 3D Secure enrollment result. Required if using a third-party merchant plug-in (MPI)
          example: "05"
        cryptogram:
          type: string
          description: A Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the cardholder authentication result (3D Secure). Required if using an external MPI
          example: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
        xid:
          type: string
          description: The 3D Secure transaction identifier. Required if using an external MPI with 3D Secure 2.X.X and a Mastercard card, or with 3D Secure 1.X.X for any supported card scheme
          example: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
        version:
          type: string
          description: Indicates the version of 3D Secure that was used for authentication. Defaults to 1.0.0 if not provided
          example: "2.0.1"
    ActionId:
      type: string
      pattern: "^(act)_(\\w{26})$"
      description: The action identifier
      maxLength: 30
      minLength: 30
      example: "act_y3oqhf46pyzuxjbcn2giaqnb44"
    AuthorizationRequest:
      type: object
      properties:
        amount:
          type: integer
          description: |
            The amount to increase the authorization by. Omit the amount or provide a value of `0` to extend the authorization validity period (Mastercard-only)
          minimum: 0
          example: 6540
        reference:
          type: string
          description: A reference you can later use to identify this authorization request
          example: "ORD-5023-4E89"
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the authorization request. This can be useful for storing additional information in a structured format
          example:
            coupon_code: "NY2018"
            partner_id: 123989
    AuthorizationResponse:
      type: object
      description: Authorization Response
      required:
        - action_id
        - amount
        - currency
        - approved
        - status
        - response_code
        - processed_on
        - _links
      properties:
        action_id:
          description: The unique identifier for the action performed against this payment
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        approved:
          type: boolean
          description: Whether or not the authorization was successful
          example: true
        status:
          type: string
          description: The status of the payment
          enum:
            - Authorized
            - Declined
          example: Authorized
        auth_code:
          type: string
          description: The acquirer authorization code if the payment was authorized
          example: "643381"
        response_code:
          type: string
          description: The Gateway response code
          example: "10000"
        response_summary:
          type: string
          description: The Gateway response summary
          example: "Approved"
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period ends
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        processed_on:
          description: The date/time the payment was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        processing:
          type: object
          description: Returns information related to the processing of the payment
          properties:
            retrieval_reference_number: 
              type: string
              description: "A unique identifier for the authorization that is submitted to the card scheme during processing"
              example: "909913440644"
            acquirer_transaction_id:
              type: string
              description: "A unique identifier for the transaction generated by the acquirer"
              example: "440644309099499894406"
        eci:
          type: string
          description:
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: "06"  
        scheme_id:
          type: string
          description:
            The scheme transaction identifier
          example: "489341065491658"
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
            actions:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
            authorize:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
            void:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
            capture:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
    BankAccountFields:
      type: object
      properties:
        sections:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The name of the section
                example: Account Details
              fields:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - display
                    - type
                    - required
                  properties:
                    id:
                      type: string
                      desription: The field identifier
                      example: account_holder.first_name
                    section:
                      type: string
                      description: The section to display the field in
                      example: account
                    display:
                      type: string
                      description: The field's display name
                      example: First name
                    help_text:
                      type: string
                      description: The help text that explains the purpose of the field
                      example: The account holder's first name. Required if type is individual.
                    type:
                      type: string
                      description: The type of field
                      example: string
                    required:
                      type: boolean
                      description: Whether the field is required
                      example: true
                    validation_regex:
                      type: string
                      description: A regular expression that can be used to validate the input of the field
                      example: ^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,18}$
                    min_length:
                      type: integer
                      description: The minimum length of the field
                      example: 22
                    max_length:
                      type: integer
                      description: The maximum length of the field
                      example: 22
                    allowed_options:
                      type: array
                      description: The allowed options for the field
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: The option identifier
                            example: "1"
                          display:
                            type: string
                            description: The option display value
                            example: Beneficiary
                    dependencies:
                      type: array
                      description: The field's dependencies
                      items:
                        type: object
                        properties:
                          field_id:
                            type: string
                            description: The field identifier
                            example: entity_type
                          value:
                            type: string
                            description: The value of the dependent field that match in order for this field to be displayed
      example:
        sections:
          - name: Account Details
            fields:
              - id: iban
                type: string
                display: IBAN
                description: Number (which can contain letters) that identifies the account
                section: account
                required: true
                validation_regex: ^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,18}$
                min_length: 22
                max_length: 22
              - id: account_holder.first_name
                type: string
                display: First name
                description: The account holder's first name
                section: account
                required: true
              - id: account_holder.last_name
                type: string
                display: First name
                description: The account holder's last name
                section: account
                required: true
    BillingDescriptor:
      type: object
      description: |
        An optional dynamic billing descriptor displayed on the account owner's statement. <br />
        <i>Not supported for <a href="https://docs.checkout.com/four/marketplaces/sub-entity-payments" target="_blank">sub-entity payments</a>.</i>
      properties:
        name:
          type: string
          description: | 
            A dynamic description of the payment. 
            Applies to card payments only.
          example: "SUPERHEROES.COM"
          maxLength: 25
        city:
          type: string
          description: |
            The city from which the payment originated. 
            Applies to card payments only.
          minimum: 1
          example: "GOTHAM"
          maxLength: 13
        reference:
          type: string
          description: | 
            The reference that should be shown on the statement. 
            Required for payouts to bank accounts.
    CaptureAcceptedResponse:
      type: object
      description: Capture response
      required:
        - action_id
      properties:
        action_id:
          description: The unique identifier for the capture action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        reference:
          type: string
          description: Your reference for the capture request
          example: "ORD-5023-4E89"
        _links:
          type: object
          description: The links related to the capture
          readOnly: true
          minItems: 2
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment to be captured. Use this to check the status of the payment
              example:
                href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
            redirect:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: For some alternative payments, the URI that the customer should be redirected to to complete the capture
              example:
                href: "https://api.checkout.com/redirect/act_y3oqhf46pyzuxjbcn2giaqnb44"
          required:
            - payment
      
    CaptureRequest:
      type: object
      properties:
        amount:
          type: integer
          description: |
            The amount to capture. If not specified, the full payment amount will be captured
          minimum: 0
          example: 6540
        capture_type:
          type: string
          description: The type of capture. If set to `Final`, the remaining available-to-capture balance will be voided 
          enum:
            - NonFinal
            - Final
          example: Final
        reference:
          type: string
          description: A reference you can later use to identify this capture request
          example: "ORD-5023-4E89"
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the capture request. This can be useful for storing additional information in a structured format
          example:
            coupon_code: "NY2018"
            partner_id: 123989
    Item:
      type: object
      description: The order line item or product that is being purchased
      properties:
        sku:
          type: string
          description: The stock-keeping unit (SKU) identifier of the item
          example: 858818ac
        name:
          type: string
          description: The name of the item or product
          example: Kevlar batterang
        description:
          type: string
          description: A description of the item or product
          example: The fastest, hardest batterang known to man
        image_url:
          type: string
          format: uri
          description: The URL of an image of the item or product
          example: http://example.com/batterang.jpg
        price:
          type: number
          description: The unit price of the item or product in the minor currency unit
          example: 34.50
        quantity:
          type: number
          description: The number of the items purchased
          example: 2
        shipping_cost:
          type: number
          description: The shipping cost of the item
          example: 2.99
        shipping_tracking_url:
          type: string
          format: uri
          description: A URL to track the shipping status of the item
          example: http://www.dhl.co.uk/en/express/tracking.html?AWB=41f280bbe12cd787b47c&brand=DHL
    MarketplaceData:
      type: object
      description: Information related to marketplace payments
      properties:
        sub_entity_id:
          type: string
          description: The sub-entity that the payment is being processed on behalf of
          example: "ent_rgyzti4x74xubmu72m6r3pvksa"
    Payment:
      type: object
      description: Payment response
      required:
        - id
        - requested_on
        - amount
        - currency
        - status
        - approved
        - _links
      properties:
        id:
          description: Payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        requested_on:
          description: The date/time the payment was requested
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseSource'
        destination:
          description: The destination of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseDestination'
        amount:
          type: integer
          description: The original payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/docs/currency-codes" target="blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        description:
          type: string
          description: A description of the payment
          example: Set of 3 masks
        approved:
          type: boolean
          description: Whether the payment was successful
          example: true
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period expires
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
            - Authorized
            - Card Verified
            - Voided
            - Partially Captured
            - Captured
            - Partially Refunded
            - Refunded
            - Declined
            - Cancelled
            - Paid
          example: Authorized
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        3ds:
          type: object
          description: Provides information relating to the processing of 3D Secure payments
          allOf:
            - $ref: '#/components/schemas/3dsData'
        risk:
          type: object
          description: Returns the payments risk assessment results
          properties:
            flagged:
              type: boolean
              description: Whether the payment was flagged by a risk check
              default: false
              example: true
        customer:
          type: object
          description: The customer to which this payment is linked
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: The unique identifier of the customer. This can be passed as a source when making a payment
              example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
            email:
              type: string
              description: The customer's email address
              example: "jokershere@gmail.com"
            name:
              type: string
              description: The customer's name
              example: "Jack Napier"
          required:
            - id
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The payment shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        payment_ip:
          description: The IP address used to make the payment
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format
          example:
            coupon_code: "NY2018"
            partner_id: 123989
        eci:
          type: string
          description: |
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: "06"  
        scheme_id:
          type: string
          description: |
            The scheme transaction identifier
          example: "488341541494658"
        actions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentActionSummary'
          description: |
            A summary of the payment's actions, 
            returned when a session ID is used to get the payment details
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
            actions:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
            authorize:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
            refund:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
    PaymentAcceptedResponse:
      type: object
      description: Payment response
      required:
        - id
        - status
      properties:
        id:
          description: The payment's unique identifier
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
        reference:
          type: string
          description: Your reference for the payment request
          example: ORD-5023-4E89
        customer:
          type: object
          description: The customer associated with the payment, if provided in the request
          allOf:
            - $ref: '#/components/schemas/CustomerResponse'
        3ds:
          type: object
          description: Provides 3D Secure enrollment status
          allOf:
            - $ref: '#/components/schemas/3dsEnrollmentData'
        instruction:
          type: object
          description: Instruction details for payouts to bank accounts
          allOf:
            - $ref: '#/components/schemas/PaymentInstructionResponse'
        _links:
          type: object
          description: The links related to the payment
          readOnly: true
          minItems: 2
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
              example:
                href: "https://api.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
            redirect:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI that the customer should be redirected to in order to complete the payment
              example:
                href: "https://api.checkout.com/3ds/pay_mbabizu24mvu3mela5njyhpit4"
          required:
            - self
      
    PaymentAction:
      type: object
      required:
        - id
        - type
        - amount
        - response_code
        - processed_on
      properties:
        id:
          description: The unique identifier of the payment action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        type:
          type: string
          description: The type of action
          enum:
            - Authorization
            - Card Verification
            - Void
            - Capture
            - Refund
            - Payout
        processed_on:
          description: The date/time the action was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        amount:
          type: integer
          description: The action amount
          example: 6540
        approved:
          type: boolean
          description: Whether the action was successful
          example: true
        auth_code:
          type: string
          description: The acquirer authorization code for cards
          example: "643381"
        response_code:
          type: string
          description: The Gateway response code
          example: "10000"
        response_summary:
          type: string
          description: The Gateway response summary
          example: "Approved"
        authorization_type:
          type: string
          description: The authorization type
          enum:
            - Final
            - Estimated
            - Incremental
          default: Final
          Example: Estimated 
        reference:
          type: string
          description: Your reference for the action
          example: "ORD-5023-4E89"
        processing:
          type: object
          description: Returns information related to the processing of the payment
          properties:
            retrieval_reference_number:
              type: string
              description: "A unique identifier for the authorization that is submitted to the card scheme during processing"
              example: "909913440644"
            acquirer_reference_number:
              type: string
              description: "A unique identifier for the capture that is submitted to the card scheme during processing"
              example: "24021219099007452440793"
            acquirer_transaction_id:
              type: string
              description: "A unique identifier for the transaction generated by the acquirer"
              example: "440644309099499894406"
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to an action
      
      
    PaymentActionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/PaymentAction'
      minItems: 1
      description: |
        The payment actions
      example:
        - "id": "act_fd3h6evhpn3uxdoqbuu3lqnqbm"
          "type": "Refund"
          "processed_on": "2018-01-20T10:30:48Z"
          "amount": 1000
          "approved": true
          "response_code": "10000"
          "response_summary": "Approved"
        - "id": "act_gefycn3jcvuupboxfmqrhk2aym"
          "type": "Capture"
          "processed_on": "2018-01-17T10:30:48Z"
          "amount": 6540
          "approved": true
          "response_code": "10000"
          "response_summary": "Approved"
          "processing": 
            "acquirer_reference_number": "24021219099007452440793"
            "acquirer_transaction_id": "00745244079"
          "metadata":
            "shipping_ref": "MQIBN2"
        - "id": "act_y3oqhf46pyzuxjbcn2giaqnb44"
          "type": "Authorization"
          "processed_on": "2018-01-17T09:30:48Z"
          "amount": 6540
          "approved": true
          "auth_code": "643381"
          "response_code": "10000"
          "response_summary": "Approved"
          "reference": "ORD-5023-4E89"
          "processing":
            "retrieval_reference_number": "909913440644"
            "acquirer_transaction_id": "440644309099499894406"
    PaymentActionSummary:
      type: object
      required:
        - id
        - type
        - response_code
      properties:
        id:
          description: The unique identifier of the payment action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        type:
          type: string
          description: The type of action
          enum:
            - Authorization
            - Card Verification
            - Void
            - Capture
            - Refund
        response_code:
          type: string
          description: The Gateway response code
          example: "10000"
        response_summary:
          type: string
          description: The Gateway response summary
          example: "Approved"
      
    PaymentDestination:
      type: object
      description: |
        A destination for OpenPay payments 
      properties:
        id:
          type: string
          description: The OpenPay account identifier
          example: "vendor-123456"
        amount:
          type: integer
          description: The amount to be credited to the destination in the major currency unit
          example: 10.50 
      required:
        - id
        - amount
    PaymentDetails:
      type: object
      description: Payment response
      required:
        - id
        - requested_on
        - amount
        - currency
        - status
        - approved
        - _links
      properties:
        id:
          description: Payment unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        requested_on:
          description: The date/time the payment was requested
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentDetailsResponseSource'
        destination:
          description: The destination of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseDestination'
        amount:
          type: integer
          description: The original payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        description:
          type: string
          description: A description of the payment
          example: Set of 3 masks
        approved:
          type: boolean
          description: Whether the payment was successful
          example: true
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period expires
        status:
          type: string
          description: The status of the payment
          enum:
            - Pending
            - Authorized
            - Card Verified
            - Voided
            - Partially Captured
            - Captured
            - Partially Refunded
            - Refunded
            - Declined
            - Cancelled
            - Paid
          example: Authorized
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        3ds:
          type: object
          description: Provides information relating to the processing of 3D Secure payments
          allOf:
            - $ref: '#/components/schemas/3dsData'
        risk:
          type: object
          description: Returns the payments risk assessment results
          properties:
            flagged:
              type: boolean
              description: Whether the payment was flagged by a risk check
              default: false
              example: true
        customer:
          type: object
          description: The customer to which this payment is linked
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: The unique identifier of the customer. This can be passed as a source when making a payment
              example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
            email:
              type: string
              description: The customer's email address
              example: "jokershere@gmail.com"
            name:
              type: string
              description: The customer's name
              example: "Jack Napier"
          required:
            - id
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The payment shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        payment_ip:
          description: The IP address used to make the payment
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format
          example:
            coupon_code: "NY2018"
            partner_id: 123989
        eci:
          type: string
          description: |
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: "06"  
        scheme_id:
          type: string
          description: |
            The scheme transaction identifier
          example: "488341541494658"
        actions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentActionSummary'
          description: |
            A summary of the payment's actions, 
            returned when a session ID is used to get the payment details
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
            actions:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
            authorize:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
            refund:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
    PaymentDetailsResponseSource:
      type: object
      description: Payment source
      
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_PaymentResponseCardSource'
          currency_account: '#/components/schemas/02_PaymentResponseCurrencyAccountSource'
      required:
        - type
      
      properties:
        type:
          type: string
          description: |
            The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),
            this will be `card`
          example: "card"
    PaymentId:
      type: string
      pattern: "^(pay)_(\\w{26})$"
      description: The payment identifier
      maxLength: 30
      minLength: 30
      example: "pay_mbabizu24mvu3mela5njyhpit4"
    PaymentInstruction:
      type: object
      description: Instruction details for payouts to bank accounts
      properties:
        purpose:
          type: string
          description: An optional description of the payout purpose, for example Insurance claim or Remittance.
        desired_value_date:
          type: string
          format: date
          description: The date (in ISO 8601 format) on which the recipient's account will be credited
        desired_value_date_behavior:
          type: string
          enum: 
            - pay_early
            - pay_later
            - do_not_pay
          default: pay_later
          example: pay_later
          description: The behavior if the desired payout date is not achievable
        charge_bearer:
          type: string
          enum:
            - OUR
            - SHA
            - BEN
          description: Who should be charged the payout fee
        repair:
          type: boolean
          description: Determines if the payment details can be modified to prevent payment return
          example: false
        scheme:
          type: string
          description: The preferred payment scheme or network the bank transfer will be sent through
          enum:
            - swift
            - local
            - instant
        quote_id:
          allOf:
            - $ref: '#/components/schemas/QuoteId'
          description: | 
            The FX quote identifier. 
            If omitted, and the source and destination currencies differ, the current market exchange rate will be used. 
    PaymentInstructionResponse:
      type: object
      description: Instruction details for payouts to bank accounts
      properties:
        value_date:
          description: The date (in ISO 8601 format) on which the recipient's account will be credited
          type: string
          format: date
    PaymentRecipient:
      type: object
      description: Information about the recipent of the payment's funds. Relevant for VISA or Mastercard [domestic UK transactions processed by financial institutions](https://docs.checkout.com/four/risk-management/requirements-for-financial-institutions).
      properties:
        dob:
          type: string
          format: date
          description: The recipient's date of birth (yyyy-mm-dd)
          example: "1985-05-15"
        account_number:
          type: string
          description: The first six digits and the last four digits of the primary recipient's card, without spaces, or up to ten digits of the primary recipient's account number
          minLength: 10
          maxLength: 10
          example: "5555554444"
        zip:
          type: string
          description: The first part of the UK postcode (e.g., W1T 4TJ would be W1T)
          example: "W1T"
        first_name:
          type: string
          description: The recipient's first name
          example: "John"
        last_name:
          type: string
          description: The recipient's last name
          example: "Jones"
    PaymentRequest:
      type: object
      required:
        - currency
        - processing_channel_id
      properties:
        source:
          $ref: '#/components/schemas/PaymentRequestSource'
        destination:
          $ref: '#/components/schemas/PaymentRequestDestination'
        amount:
          type: integer
          description: |
            The payment amount. If a `destination` is specified, indicates the payout amount.
            Omit the amount or provide a value of `0` to perform a card verification.       
      
            The amount must be provided in the <a href="https://docs.checkout.com/four/resources/calculating-the-amount" target="blank">minor currency unit</a>.
          minimum: 0
          example: 6540
        currency:
          type: string
          description: |
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="blank">ISO currency code</a>
      
            If a `destination` is specified, indicates the currency of the payout.
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number
          example: "ORD-5023-4E89"
        description:
          type: string
          description: A description of the payment
          example: "Set of 3 masks"
        authorization_type:
          type: string
          description: The authorization type
          enum:
            - Final
            - Estimated
          default: Final
          Example: Estimated 
        capture:
          type: boolean
          description: Whether to capture the payment (if applicable)
          default: true
          example: true
        capture_on:
          description: |
            A timestamp (ISO 8601 code) that determines when the payment should be captured.
            Providing this field will automatically set `capture` to true
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        customer:
          $ref: '#/components/schemas/CustomerRequest'
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        3ds:
          $ref: '#/components/schemas/3dsRequest'
        processing_channel_id:
          type: string
          description: The processing channel to be used for the payment
          example: "mer_q4dbxom5jbgudnjzjpz7j2z6uq"
        previous_payment_id:
          type: string
          description: |
            For payments that use <a href="https://docs.checkout.com/four/payments/use-saved-card-details/about-stored-card-details" target="blank">stored card details</a>, such as recurring payments â€“
            an existing payment identifier from the recurring series or the Scheme Transaction Id
          example: "pay_fun26akvvjjerahhctaq2uzhu4"
        risk:
          $ref: '#/components/schemas/RiskRequest'
        success_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default success redirect URL configured on your account
          example: "http://example.com/payments/success"
        failure_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default failure redirect URL configured on your account
          example: "http://example.com/payments/fail"
        payment_ip:
          description: The IP address used to make the payment. Required for some risk checks
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        sender:
          $ref: '#/components/schemas/PaymentSender'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        instruction:
          $ref: '#/components/schemas/PaymentInstruction'
        processing:
          $ref: '#/components/schemas/ProcessingSettings'
        metadata:
          type: object
          description: Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.
          example:
            coupon_code: "NY2018"
    PaymentRequestDestination:
      type: object
      description: The destination of the payout.<br><i>Use to request a payout to a bank account instrument.</i>
      discriminator:
        propertyName: type
        mapping:
          id: '#/components/schemas/01_PaymentRequestIdDestination'
      required:
        - type
      properties:
        type:
          type: string
          description: The payout destination type
          example: "token"
    PaymentRequestSource:
      type: object
      description: The source of the payment.<br><i>Use to request a payment</i>.
      discriminator:
        propertyName: type
        mapping:
          token: '#/components/schemas/01_PaymentRequestTokenSource'
          id: '#/components/schemas/02_PaymentRequestIdSource'
          card: '#/components/schemas/03_PaymentRequestCardSource'
          network_token: '#/components/schemas/04_PaymentRequestNetworkTokenSource'
          currency_account: '#/components/schemas/05_PaymentRequestCurrencyAccountSource'
      required:
        - type
      properties:
        type:
          type: string
          description: The payment source type <br> *Note:* *To make a payment with full card details, you must be <a href="https://docs.checkout.com/four/risk-management/pci-compliance" target="_blank">SAQ D PCI compliant</a>*
          example: "card"
    PaymentResponse:
      type: object
      description: Payment Response
      required:
        - id
        - action_id
        - amount
        - currency
        - approved
        - status
        - response_code
        - processed_on
        - _links
      properties:
        id:
          description: The payment's unique identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        action_id:
          description: The unique identifier for the action performed against this payment
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The payment amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        approved:
          type: boolean
          description: Whether or not the authorization or capture was successful
          example: true
        status:
          type: string
          description: The status of the payment
          enum:
            - Authorized
            - Pending
            - Card Verified
            - Captured
            - Declined
            - Paid
          example: Authorized
        auth_code:
          type: string
          description: The acquirer authorization code if the payment was authorized
          example: "643381"
        response_code:
          type: string
          description: The Gateway response code
          example: "10000"
        response_summary:
          type: string
          description: The Gateway response summary
          example: "Approved"
        expires_on:
          type: string
          description: The timestamp (ISO 8601 code) for when the authorization's validity period expires
        3ds:
          type: object
          description: Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure
          allOf:
            - $ref: '#/components/schemas/3dsEnrollmentData'
          example:
            downgraded: true
            enrolled: N
        risk:
          type: object
          description: Returns the payment's risk assessment results
          properties:
            flagged:
              type: boolean
              description: Whether or not the payment was flagged by a risk check
              default: false
              example: true
        source:
          description: The source of the payment
          type: object
          allOf:
            - $ref: '#/components/schemas/PaymentResponseSource'
        #destination:
          #description: The destination of the payment
          #type: object
          #allOf:
           # - $ref: '#/components/schemas/PaymentResponseDestination'
        customer:
          type: object
          description: The customer associated with the payment, if provided in the request
          allOf:
            - $ref: '#/components/schemas/CustomerResponse'
        balances:
          type: object
          description: The payment balances
          allOf:
            - $ref: '#/components/schemas/PaymentResponseBalances'
        processed_on:
          description: The date/time the payment was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the payment
          example: ORD-5023-4E89
        processing:
          type: object
          description: Returns information related to the processing of the payment
          properties:
            retrieval_reference_number: 
              type: string
              description: "A unique identifier for the authorization that is submitted to the card scheme during processing"
              example: "909913440644"
            acquirer_transaction_id:
              type: string
              description: "A unique identifier for the transaction generated by the acquirer"
              example: "440644309099499894406"
        eci:
          type: string
          description:
            The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. 
            Applicable for 3D Secure and network token payments
          example: "06"  
        scheme_id:
          type: string
          description:
            The scheme transaction identifier
          example: "489341065491658"
        _links:
          type: object
          description: The links related to the payment
          minItems: 2
          required:
            - self
            - actions
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
            actions:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to the payment's associated actions
            authorize:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to increment the authorization, where applicable
            void:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to void the payment, where applicable
            capture:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to capture the payment, where applicable
            refund:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: A link to refund the payment, where applicable
          example:
            self:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
            actions:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
            authorize:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/authorizations"
            void:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
            capture:
              href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
    PaymentResponseBalances:
      type: object
      description: The balances of the payment
      required:
        - id
      properties:
        total_authorized:
          type: integer
          description: The total amount that has been authorized
          example: 6540
        total_voided:
          type: integer
          description: The total amount that has been voided
          example: 0
        available_to_void:
          type: integer
          description: The total amount that is still available for voiding
          example: 6540
        total_captured:
          type: integer
          description: The total amount that has been captured
          example: 0
        available_to_capture:
          type: integer
          description: The total amount that is still available for capture
          example: 6540
        total_refunded:
          type: integer
          description: The total amount that has been refunded
          example: 0
        available_to_refund:
          type: integer
          description: The total amount that is still available for refund
          example: 0
    PaymentResponseDestination:
      type: object
      description: Payment destination
      discriminator:
        propertyName: type
        mapping:
          #card: '#/components/schemas/01_PaymentResponseCardDestination'
          bank_account: '#/components/schemas/02_PaymentResponseBankAccountDestination'
      required:
        - type
      properties:
        type:
          type: string
          description: |
            The payment destination type.
          example: "card"
    PaymentResponseSource:
      type: object
      description: Payment source
      
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_PaymentResponseCardSource'
      required:
        - type
      
      properties:
        type:
          type: string
          description: |
            The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),
            this will be `card`
          example: "card"
    PaymentSender:
      type: object
      description: Information about the sender of the payment's funds
      discriminator:
        propertyName: type
        mapping:
          individual: '#/components/schemas/01_IndividualSender'
          corporate: '#/components/schemas/02_CorporateSender'
          instrument: '#/components/schemas/03_InstrumentSender'
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - individual
            - corporate
            - instrument
          description: The type of sender
      
        reference:
          type: string
          description: The sender's reference for the payout
        
        # p2c
        account_number:
          type: string
          description: The sender's account number (card payouts only)
          example: "424242424242424242"
    Payout:
      type: object
      required:
        - currency
      properties:
        destination:
          $ref: '#/components/schemas/PaymentRequestDestination'
        amount:
          type: integer
          description: |
            The payment amount.
            The exact format <a href="https://docs.checkout.com/docs/calculating-the-value" target="blank">depends on the currency</a>.
            Omit the amount or provide a value of `0` to perform a card verification.
          minimum: 0
          example: 6540
        currency:
          type: string
          description: |
            The three-letter <a href="https://docs.checkout.com/docs/currency-codes" target="blank">ISO currency code</a>
          example: USD
          maxLength: 3
          minLength: 3
        payment_type:
          type: string
          description: This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)
          enum:
            - Regular
            - Recurring
            - MOTO
            - Installment
          default: Regular
          example: Recurring
        reference:
          type: string
          description: A reference you can later use to identify this payment, such as an order number
          example: "ORD-5023-4E89"
        description:
          type: string
          description: A description of the payment
          example: "Set of 3 masks"
        capture:
          type: boolean
          description: Whether to capture the payment (if applicable)
          default: true
          example: true
        capture_on:
          
          description: |
            A timestamp (ISO 8601 code) that determines when the payment should be captured.
            Providing this field will automatically set `capture` to true
      
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        customer:
          type: object
          description: The customer's details
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: |
                The identifier of an existing customer. If neither customer `id` nor `email` is provided, then 
                a new customer will be registered
              example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
            email:
              type: string
              format: email
              description: An optional email address to associate with the customer
              example: "jokershere@gmail.com"
            name:
              type: string
              description: The customer's name. This will only set the name for *new* customers
              example: "Jack Napier"
        billing_descriptor:
          $ref: '#/components/schemas/BillingDescriptor'
        shipping:
          type: object
          description: The shipping details
          properties:
            address:
              description: The shipping address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number associated with the shipping address
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
        3ds:
          $ref: '#/components/schemas/3dsRequest'
        previous_payment_id:
          type: string
          description: |
            For payments that use <a href="https://docs.checkout.com/docs/stored-card-details" target="blank">stored card details</a>, such as recurring payments â€“
            an existing payment identifier from the recurring series or the Scheme Transaction Id
          example: "pay_fun26akvvjjerahhctaq2uzhu4"
        risk:
          $ref: '#/components/schemas/RiskRequest'
        success_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default success redirect URL configured on your account
          example: "http://example.com/payments/success"
        failure_url:
          type: string
          format: uri
          description: For redirect payment methods, this overrides the default failure redirect URL configured on your account
          example: "http://example.com/payments/fail"
        payment_ip:
          description: The IP address used to make the payment. Required for some risk checks
          allOf:
            - $ref: '#/components/schemas/IPAddress'
        sender:
          $ref: '#/components/schemas/PaymentSender'
        recipient:
          $ref: '#/components/schemas/PaymentRecipient'
        processing:
          type: object
          description: Use the processing object to influence or override the data sent during card processing
          properties:
            mid:
              type: string
              description: Overrides the default merchant/acceptor identifier (MID) configured on your account
              example: "1234567"
            senderInformation:
              type: object
              description: Allows you to send <a href="https://docs.checkout.com/docs/sender-data-for-payouts" target="_blank">additional data</a> required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments.
        metadata:
          type: object
          description: Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.
          example:
            coupon_code: "NY2018"
            partner_id: 123989
    ProcessingSettings:
      type: object
      description: Use the processing object to influence or override the data sent during card processing
      properties:
        mid:
          type: string
          description: Overrides the default merchant/acceptor identifier (MID) configured on your account
          example: "1234567"
        senderInformation:
          type: object
          description: | 
            Allows you to send additional data required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments.
        aft:
          type: boolean
          description: Indicates whether the payment is an Account Funding Transaction
        dlocal:
          type: object
          description: Processing information required for dLocal payments.
          properties:
            country:
              type: string
              description: The two-letter ISO code of the cardholder's country.
              example: "MX"
            payer:
              type: object
              description: Details about the cardholder.
              properties:
                document:
                  type: string
                  description: The cardholder's personal identification number. The identification required is country-specific. See the <a href="https://docs.dlocal.com/api-documentation/payins-api-reference/country-reference#documents" target="_blank">dLocal documentation</a> for more information.
                  example: "DocumentId"
                name:
                  type: string
                  description: The cardholder's full name.
                  example: "John Doe"
                email:
                  type: string
                  description: The cardholder's email address.
                  example: "john.doe@example.com"
            installments:
              type: object
              description: Details about the installments.
              properties:
                count:
                  type: string
                  description: The number of payments to be made in the installment plan.
                  example: "3"
    RefundAcceptedResponse:
      type: object
      description: Refund response
      required:
        - action_id
      properties:
        action_id:
          description: The unique identifier for the refund action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        reference:
          type: string
          description: Your reference for the refund request
          example: ORD-5023-4E89
        _links:
          type: object
          description: The links related to the refund
          readOnly: true
          minItems: 2
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment to be refunded. Use this to check the status of the payment
              example:
                href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
          required:
            - payment
      
    RefundRequest:
      type: object
      properties:
        amount:
          type: integer
          description: |
            The amount to refund. If not specified, the full payment amount will be refunded
          minimum: 0
          example: 6540
        reference:
          type: string
          description: A reference you can later use to identify this refund request
          example: "ORD-5023-4E89"
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the refund request. It can be useful for storing additional information in a structured format
          example:
            coupon_code: "NY2018"
            partner_id: 123989
    01_PaymentRequestIdDestination:
      type: object
      description: An existing payment instrument
      required:
        - id
      allOf:
        - $ref: "#/components/schemas/PaymentRequestDestination"
        - type: object
          properties:
            id:
              type: string
              description: The payment instrument identifier
              example: src_wmlfc3zyhqzehihu7giusaaawu
    01_PaymentRequestTokenSource:
      type: object
      description: A token payment source
      required:
        - token
      allOf:
        - $ref: "#/components/schemas/PaymentRequestSource"
        - type: object
          properties:
            token:
              type: string
              pattern: "^(tok)_(\\w{26})$"
              description: The Checkout.com token (e.g., a card token)
              example: tok_ubfj2q76miwundwlk72vxt2i7q
            billing_address:
              description: The customer's billing address. This will override the billing address specified during tokenization
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The customer's phone number. This will override the phone number specified during tokenization
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
      
    02_PaymentRequestIdSource:
      type: object
      description: An existing payment source
      required:
        - id
      allOf:
        - $ref: "#/components/schemas/PaymentRequestSource"
        - type: object
          properties:
            id:
              type: string
              pattern: "^(src)_(\\w{26})$"
              description: The payment source identifer (e.g., a card source identifier)
              example: src_wmlfc3zyhqzehihu7giusaaawu
            cvv:
              type: string
              description: The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)
              example: "956"
              minLength: 3
              maxLength: 4
    03_PaymentRequestCardSource:
      type: object
      description: A card payment source
      allOf:
        - $ref: "#/components/schemas/PaymentRequestSource"
        - type: object
          required:
            - type
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number (without separators)
              example: "4543474002249996"
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year of the card
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The name of the cardholder
              example: "Bruce Wayne"
            cvv:
              type: string
              description: The card verification value/code. 3 digits, except for Amex (4 digits)
              example: "956"
              minLength: 3
              maxLength: 4
            stored:
              type: boolean
              description: This must be set to `true` for payments that use <a href="https://docs.checkout.com/docs/stored-card-details" target="blank">stored card details</a>
              default: false
              example: true
            billing_address:
              description: The billing address of the cardholder
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The phone number of the cardholder
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    04_PaymentRequestNetworkTokenSource:
      type: object
      description: A network token payment source
      allOf:
        - $ref: "#/components/schemas/PaymentRequestSource"
        - type: object
          required:
            - type
            - token
            - expiry_month
            - expiry_year
            - token_type
            - cryptogram
            - eci
          properties:
            token:
              type: string
              description: The network token PAN
              example: "4543474002249996"
            expiry_month:
              type: integer
              description: The expiry month of the token
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year of the token
              example: 2025
              minLength: 4
              maxLength: 4
            token_type:
              type: string
              description: The type of token 
              enum:
                - vts
                - mdes
                - applepay
                - googlepay 
            cryptogram:
              type: string
              description: The Base64 encoded cryptographic identifier (TAVV) used by card schemes to validate the token verification result. Optional if `previous_payment_id` is specified and `3ds.enabled` is false
              example: hv8mUFzPzRZoCAAAAAEQBDMAAAA=
            eci:
              type: string
              description: |
                The Electronic Commerce Indicator (ECI) security level associated with the token. Optional if `previous_payment_id` is specified and `3ds.enabled` is false
              example: "05"
            stored:
              type: boolean
              description: This must be set to `true` for payments that use <a href="https://docs.checkout.com/docs/stored-card-details" target="blank">stored card details</a>
              default: false
              example: true
            name:
              type: string
              description: The customer's name
              example: "Bruce Wayne"
            cvv:
              type: string
              description: The card verification value/code. 3 digits, except for Amex (4 digits)
              example: "956"
              minLength: 3
              maxLength: 4
            billing_address:
              description: The customer's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The customer's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    05_PaymentRequestCurrencyAccountSource:
      type: object
      description: A currency account source
      required:
        - id
      allOf:
        - $ref: "#/components/schemas/PaymentRequestSource"
        - type: object
          properties:
            id:
              type: string
              pattern: "^(ca)_(\\w{26})$"
              description: The ID of the currency account to be debited
              example: ca_y3oqhf46pyzuxjbcn2giaqnb44
            amount:
              type: integer
              description: |
                If specified, indicates the amount in the _source_ currency to be paid out. If omitted, the root `amount` in the _destination_ currency will be used.
      
                The amount must be provided in the <a href="https://docs.checkout.com/docs/calculating-the-value" target="blank">minor currency unit</a>.
              minimum: 1
              example: 6540
    02_PaymentResponseBankAccountDestination:
      type: object
      description: A bank account payment destination
      allOf:
        - $ref: "#/components/schemas/PaymentResponseDestination"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: The payment instrument identifier
              pattern: ^(src)_(\w{26})$
    01_PaymentResponseCardSource:
      type: object
      description: A card payment source
      allOf:
        - $ref: "#/components/schemas/PaymentResponseSource"
        - type: object
          required:
            - expiry_month
            - expiry_year
            - last4
            - fingerprint
            - bin
          properties:
            id:
              type: string
              description: The payment source identifier that can be used for subsequent payments. For new sources, this will only be returned if the payment was approved
              example: "src_nwd3m4in3hkuddfpjsaevunhdy"
            billing_address:
              description: The payment source owner's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The payment source owner's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
            expiry_month:
              type: integer
              description: The expiry month
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The cardholder's name
              example: "Bruce Wayne"
            scheme:
              type: string
              description: The card scheme
              example: "VISA"
            last4:
              type: string
              description: The last four digits of the card number
              example: "9996"
            fingerprint:
              type: string
              description: Uniquely identifies this particular card number. You can use this to compare cards across customers.
              example: "F639CAB2745BEE4140BF86DF6B6D6"
            bin:
              type: string
              description: The card issuer's Bank Identification Number (BIN)
              maxLength: 6
              example: "454347"
            card_type:
              type: string
              description: The card type
              enum:
                - Credit
                - Debit
                - Prepaid
                - Charge
              example: Credit
            card_category:
              type: string
              description: The card category
              enum:
                - Consumer
                - Commercial
              example: Consumer
            issuer:
              type: string
              description: The name of the card issuer
              example: "GOTHAM STATE BANK"
            issuer_country:
              type: string
              maxLength: 2
              minLength: 2
              description: The card issuer's country (<a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">two-letter ISO code</a>)
              example: "US"
            product_id:
              type: string
              description: The issuer/card scheme product identifier
              example: "F"
            product_type:
              type: string
              description: The issuer/card scheme product type
              example: CLASSIC
            avs_check:
              type: string
              description: The Address Verification System check result
              example: S
            cvv_check:
              type: string
              description: The card verification value (CVV) check result
              example: Y
            payouts:
              type: boolean
              description: Whether the card supports payouts
              example: true
            fast_funds:
              type: string
              description: The fast funds eligibility of the card
              example: d
            payment_account_reference:
              type: string
              description: A unique reference to the underlying card for network tokens (e.g., Apple Pay, Google Pay)
              example: "EUNIX9AX7THOOJIEJ2AP6OOFAHGH4"
    02_PaymentResponseCurrencyAccountSource:
      type: object
      description: A currency account source
      allOf:
        - $ref: "#/components/schemas/PaymentResponseSource"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: The ID of the currency account
              pattern: ^(ca)_(\w{26})$
            amount:
              type: integer
              description: If specified, indicates the amount in the source currency to be paid out. If omitted, the root amount in the destination currency will be used.<br>The amount must be provided in the minor currency unit.
    RiskRequest:
      type: object
      description: Configures the risk assessment performed during the processing of the payment
      required:
        - enabled
      properties:
        enabled: 
          type: boolean
          description: Whether a risk assessment should be performed
          default: true
          example: false
    01_IndividualSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentSender'
      required:
        - type
        - first_name
        - last_name
      properties:
        type:
          type: string
          description: The sender type
        first_name:
          type: string
          description: The sender's first name
          example: "John"
        last_name:
          type: string
          description: The sender's last name
          example: "Jones"
        address:
          description: The sender's address
          allOf:
            - $ref: '#/components/schemas/Address'
    02_CorporateSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentSender'
      required:
        - type
        - company_name
      properties:
        type:
          type: string
          description: The sender type
        company_name:
          type: string
          description: The sender's company name
        address:
          description: The sender's address
          allOf:
            - $ref: '#/components/schemas/Address'
    03_InstrumentSender:
      type: object
      description: Store a previously tokenized instrument
      allOf:
        - $ref: '#/components/schemas/PaymentSender'
      required:
        - type
      properties:
        type:
          type: string
          description: The sender type
    VoidAcceptedResponse:
      type: object
      description: Void response
      required:
        - action_id
      properties:
        action_id:
          description: The unique identifier for the void action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        reference:
          type: string
          description: Your reference for the void request
          example: "ORD-5023-4E89"
        _links:
          type: object
          description: The links related to the void
          readOnly: true
          minItems: 2
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              example:
                href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
          required:
            - payment
      
    VoidRequest:
      type: object
      properties:
        reference:
          type: string
          description: A reference you can later use to identify this void request
          example: "ORD-5023-4E89"
        metadata:
          type: object
          description: A set of key-value pairs that you can attach to the void request. It can be useful for storing additional information in a structured format
          example:
            coupon_code: "NY2018"
            partner_id: 123989
    VoidResponse:
      type: object
      description: Payment response
      required:
        - id
        - action_id
        - amount
        - currency
        - status
        - response_code
        - processed_on
        - _links
      properties:
        id:
          description: The unique payment identifier
          allOf:
            - $ref: '#/components/schemas/PaymentId'
        action_id:
          description: The unique identifier for the void action
          allOf:
            - $ref: '#/components/schemas/ActionId'
        amount:
          type: integer
          description: The void amount
          example: 6540
        currency:
          type: string
          description: The three-letter <a href="https://docs.checkout.com/docs/currency-codes" target="blank">ISO currency code</a> of the payment
          example: USD
          maxLength: 3
          minLength: 3
        status:
          type: string
          description: The status of the payment
          example: "Voided"
        response_code:
          type: string
          description: The Gateway response code
          example: "10000"
        response_summary:
          type: string
          description: The Gateway response summary
          example: "Approved"
        processed_on:
          description: The date/time the void was processed
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        reference:
          type: string
          description: Your reference for the void request
          example: ORD-5023-4E89
        _links:
          type: object
          description: The links related to the payment
          minItems: 1
          properties:
            payment:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment
              example:
                href: "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
          required:
            - payment
      
      
    PhoneNumber:
      type: object
      description: A phone number
      properties:
        country_code: 
          type: string
          description: The international <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">country calling code</a>. Required for some risk checks
          minLength: 1
          maxLength: 7
          example: "+1"
        number:
          type: string
          description: The phone number
          minLength: 6
          maxLength: 25
          example: 415 555 2671
    ResourceId:
      type: string
      description: The resource ID. Defaults to UUID v4
      maxLength: 50
      example: "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
    ServerTimestamp:
      type: string
      description: Read-only UTC timestamp, automatically assigned by us
      format: date-time
      readOnly: true
    3dsId:
      description: Universally unique transaction identifier assigned by the 3DS Server to identify a single transaction.
      type: string
      minLength: 36
      maxLength: 36
      example: sid_y3oqhf46pyzuxjbcn2giaqnb441
    Acs:
      type: object
      required:
        - reference_number
        - transaction_id
        - operator_id
        - url
        - challenge_mandated
        - authentication_type
        - authentication_method
      description: "The access control server (ACS) information. Can be empty if the session is still pending or if communication with the ACS failed. This will be available when the channel data and issuer fingerprint result have been provided."
      properties:
        reference_number:
          description: EMVCo-assigned unique identifier to track approved ACS
          type: string
          maxLength: 32
          example: ACSRefNum1234
        transaction_id:
          description: Universally unique transaction identifier assigned by the ACS
          type: string
          minLength: 36
          maxLength: 36
          example: be481bd1-1f1d-4ef8-9fa8-0fb2a38e3c87
        operator_id:
          description: DS assigned ACS identifier
          type: string
          maxLength: 32
          example: ACSRefNum1234
        url:
          description: Fully qualified URL of the ACS to be used for the challenge
          type: string
          maxLength: 2048
          example: https://server.acsdomainname.com
        signed_content:
          description: >
            Contains the JSON web signature (JWS) compact serialization created by the ACS for a challenged app authentication.
            (Example has been truncated for readability.)
          type: string
          maxLength: 512
          example: eyJ4NWMiOlsiTUlJQjdEQ0NBWktnQXdJQkFnSVZBSzIxWEc5SVBCL083QzZjUTBvRlJJUkIwWDI0TUFvR0NDcUdTTTQ5QkFNQ01INHhDekFKQm
        challenge_mandated:
          type: boolean
          description: Indicates whether a challenge is required for the transaction to be authorized
        authentication_type:
          type: string
          description: The type of authentication
          enum:
            - static
            - dynamic
            - oob
            - decoupled
        authentication_method:
          type: string
          description: |
            Authentication approach that the ACS used to authenticate the cardholder for this specific transaction.
      
            Note: This is in the results request (RReq) message from the ACS only. It is not passed to the 3DS Server URL.
          enum:
            - static_passcode
            - sms_otp
            - fob_or_card_reader_otp
            - app_otp
            - otp_other
            - kba
            - oob_biometrics
            - oob_login
            - oob_other
            - other
        challenge_cancel_reason:
          type: string
          description: Indicator informing the ACS and the DS that the authentication has been cancelled
          enum:
            - cardholder_cancel
            - transaction_timed_out
            - challenge_timed_out
            - transaction_error
            - unknown
            - sdk_timed_out
        interface:
          type: string
          enum:
            - native_ui
            - html
        ui_template:
          type: string
          enum:
            - text
            - single_select
            - multi_select
            - oob
            - html_other
    Amount:
      type: integer
      description: "The amount in the major currency"
      example: 120
      minimum: 0
      maximum: 18446744073709551615
    App:
      allOf:
        - $ref: '#/components/schemas/ChannelData'
        - type: object
          required:
            - sdk_app_id
            - sdk_max_timeout
            - sdk_ephem_pub_key
            - sdk_encrypted_data
            - sdk_reference_number
            - sdk_transaction_id
            - sdk_interface_type
            - sdk_ui_elements
          properties:
            channel:
              type: string
              enum:
                - app
            sdk_app_id:
              description: >
                Universally unique ID created upon all installations and updates of the 3DS Requestor App on a consumer device. This will be newly generated and stored by the 3DS SDK for each installation or update.
              type: string
              minLength: 36
              maxLength: 36
              example: dbd64fcb-c19a-4728-8849-e3d50bfdde39
            sdk_max_timeout:
              description: >
                Indicates maximum amount of time (in minutes) for all exchanges
              type: integer
              minimum: 5
              example: 5
            sdk_ephem_pub_key:
              $ref: '#/components/schemas/SdkEphemeralPublicKey'
            sdk_reference_number:
              description: >
                Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App, assigned by EMVCo when the 3DS SDK is approved.
              type: string
              maxLength: 32
              example: "3DS_LOA_SDK_PPFU_020100_00007"
            sdk_encrypted_data:
              description: >
                A JSON web encryption (JWE) object in compact serialization, containing data encrypted by the SDK for the Directory Server to decrypt.
              type: string
              maxLength: 64000
              example: "<device-information>"
            sdk_transaction_id:
              description: >
                Universally unique transaction identifier assigned by the 3DS SDK to identify a single transaction
              type: string
              minLength: 36
              maxLength: 36
              example: "b2385523-a66c-4907-ac3c-91848e8c0067"
            sdk_interface_type:
              description: >
                Lists all of the SDK interface types that the device supports for displaying specific challenge user interfaces within the SDK
              type: string
              enum:
                - native
                - html
                - both
            sdk_ui_elements:
              description: >
                Lists all the user interface elements that the cardholder's device supports for displaying specific challenge user interfaces within the SDK
              type: array
              items:
                type: string
                enum:
                  - text
                  - single_select
                  - multi_select
                  - oob
                  - html_other
    Approved:
      type: boolean
      description: "Whether the authentication was successful. This will only be set if the Session is in a final state"
      example: false
    AuthenticationType:
      type: string
      enum:
        - regular
      description: Indicates the type of payment this session is for
      example: regular
      default: regular
    Browser:
      allOf:
        - $ref: '#/components/schemas/ChannelData'
        - type: object
          required:
            - accept_header
            - java_enabled
            - language
            - color_depth
            - screen_height
            - screen_width
            - timezone
            - user_agent
            - ip_address
          properties:
            channel:
              type: string
              enum:
                - browser
            three_ds_method_completion:
              type: string
              description: >
                Indicates whether the 3DS Method successfully completed<br/>
                â€¢ Y = Successfully completed <br/>
                â€¢ N = Did not successfully complete <br/>
                â€¢ U = Unavailable (3DS Method URL was not present in the preperation response (PRes) message data for the card range associated with the cardholder's account number)
              enum:
                - Y
                - N
                - U
              minLength: 1
              maxLength: 1
              default: U  
              example: U
            accept_header:
              type: string
              maxLength: 2048
              description: >
                Exact content of the HTTP accept headers as sent to the 3DS Requestor from the cardholderâ€™s browser
              example: "Accept:  *.*, q=0.1"
            java_enabled:
              type: boolean
              description: >
                Boolean that represents the ability of the cardholder's browser to execute Java. Value is returned from the `navigator.javaEnabled` property.
              example: true
            language:
              type: string
              minLength: 1
              maxLength: 12
              description: >
                Value representing the browser language as defined in IETF BCP47. Returned from the `navigator.language` property.
              example: "FR-fr"
            color_depth:
              type: string
              minLength: 1
              maxLength: 2
              description: >
                Value representing the bit depth of the colour palette for displaying images, in bits per pixel. Obtained from the cardholder's browser from the `screen.colorDepth` property.
              example: "16"
            screen_height:
              type: string
              minLength: 1
              maxLength: 6
              description: >
                Total height of the cardholderâ€™s screen in pixels. Value is returned from the `screen.height` property.
              example: "1080"
            screen_width:
              type: string
              minLength: 1
              maxLength: 6
              description: >
                Total width of the cardholderâ€™s screen in pixels. Value is returned from the `screen.width` property.
              example: "1920"
            timezone:
              type: string
              minLength: 1
              maxLength: 5
              description: >
                Time difference between UTC time and the local time of the cardholder's browser, in minutes.
              example: "60"
            user_agent:
              type: string
              maxLength: 2048
              description: >
                Exact content of the HTTP user-agent header
              example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"
            ip_address:
              description: >
                IP address of the browser as returned by the HTTP headers to the 3DS Requestor
              type: string 
              maxLength: 45
              example: "1.12.123.255"
    Cardholder:
      type: object
      description: "The cardholder information"
      properties:
        name:
          description: Name of the Cardholder.
          type: string
          minLength: 2
          maxLength:  45
          example: Cardholder Name
        email:
          type: string
          description: The email address associated with the account that is either entered by the Cardholder, or is on file with the 3DS Requestor.
          maxLength: 254
          example: "example@example.com"
        billing_address:
          $ref: '#/components/schemas/Address'
    CardSource:
      type: object
      description: A card payment source
      allOf:
        - $ref: "#/components/schemas/SessionSource"
        - type: object
          required:
            - type
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number (without separators)
              example: "4543474002249996"
              minLength: 13
              maxLength: 19
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              minLength: 1
              maxLength: 2
              example: 6
            expiry_year:
              type: integer
              description: The expiry year of the card
              minLength: 4
              maxLength: 4
              example: 2025
            name:
              type: string
              description: The name of the cardholder
              minLength: 2
              maxLength: 45
              example: "Bruce Wayne"
            email:
              type: string
              description: The email of the cardholder
              maxLength: 254
              example: "bruce.wayne@email.com"
            billing_address:
              description: The billing address of the cardholder
              allOf:
                - $ref: '#/components/schemas/SessionAddress'
            home_phone:
              description: The cardholder's home phone number
              allOf:
                - $ref: '#/components/schemas/SessionPhone'
            mobile_phone:
              description: The cardholder's mobile phone number
              allOf:
                - $ref: '#/components/schemas/SessionPhone'
            work_phone:
              description: The cardholder's work phone number
              allOf:
                - $ref: '#/components/schemas/SessionPhone'
    Category:
      type: string
      enum:
        - payment
        - non_payment
      description: Indicates the category of the authentication request
      default: payment
    ChallengeIndicator:
      type: string
      enum:
        - no_preference
        - no_challenge_requested
        - challenge_requested
        - challenge_requested_mandate
      description: Indicates whether a challenge is requested for this session
      maxLength: 50
      example: no_preference
      default: no_preference
    ChannelData:
      required:
        - channel
      description: The information gathered from the environment used to initiate the session
      discriminator:
        propertyName: channel
        mapping:
          browser: '#/components/schemas/Browser'
          app: '#/components/schemas/App'
      properties:
        channel:
          type: string
          description: Indicates the type of channel interface being used to initiate the transaction.</br>
            If the channel is `app` then `501 Not Implemented` is returned.
          default: "browser"
      example: 
        channel: browser
        accept_header: "Accept:  *.*, q=0.1"
        java_enabled: true
        language: "FR-fr"
        color_depth: "16"
        screen_height: "1080"
        screen_width: "1920"
        timezone: "60"
        user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"
        three_ds_method_completion: "Y"
        ip_address: "1.12.123.255"
    CompletionInfo:
      required:
        - type
      description: The redirect information needed for callbacks or redirects after the payment is completed 
      discriminator:
        propertyName: type
        mapping:
          hosted: '#/components/schemas/HostedCompletionInfo'
          non_hosted: '#/components/schemas/NonHostedCompletionInfo'
      properties:
        type:
          type: string
          enum: 
            - hosted
            - non_hosted
          description: >
            Whether the session should be hosted by Checkout.com.</br>
            When this value is `hosted`, the response will be `501 Not Implemented`.
          maxLength: 10
          example: non_hosted
      example: 
        type: non_hosted
        callback_url: https://merchant.com/callback
        
    CreateSessionAcceptedResponse:
      required:
        - session_secret
        - id
        - transaction_id
        - scheme
        - amount
        - currency
        - authentication_type
        - authentication_category
        - status
        - protocol_version
        - _links
      properties:
        session_secret:
          $ref: '#/components/schemas/SessionSecret'
        id:
          $ref: '#/components/schemas/SessionId'
        transaction_id:
          description: The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
        scheme:    
          type: string
          description: Indicates the scheme this authentication is carried out against
          enum:
            - visa
            - mastercard
            - jcb
            - amex
            - diners
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
        next_actions:
          $ref: '#/components/schemas/NextActions'
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        reference:
          $ref: '#/components/schemas/Reference'
        _links:
          $ref: '#/components/schemas/CreateSessionLinks'
    CreateSessionLinks:
      allOf:
        - $ref: '#/components/schemas/GetSessionLinks'  
      properties:
        redirect:
          type: object
          description: >
            The link to which the cardholder should be redirected. </br>
            Only available when the `hosted` value is `true`.
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: http://3ds2.checkout.com/interceptor/sid_y3oqhf46pyzuxjbcn2giaqnb44
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
    CreateSessionOkResponse:
      allOf:
        - $ref: '#/components/schemas/GetSessionResponse'
      required:
        - session_secret
      properties:
        session_secret:
          $ref: '#/components/schemas/SessionSecret'
    Cryptogram:
      description: Payment system-specific value provided as part of the ACS registration for each supported DS
      type: string
      minLength: 28
      maxLength: 28
      example: "MTIzNDU2Nzg5MDA5ODc2NTQzMjE="
    Currency:
      type: string
      description: The three-letter ISO currency code
      example: USD
    Ds:
      type: object
      description: "The directory server (DS) information. Can be empty if the session is pending or communication with the DS failed"
      required:
        - ds_id
        - reference_number
        - transaction_id
      properties:
        ds_id:
          description: Registered application provider identifier (RID) that is unique to the payment system. RIDs are defined by the ISO 7816-5 standard. Used as part of the device data encryption process.
          type: string
          maxLength: 32
          example: A000000003
        reference_number:
          description: EMVCo-assigned unique identifier to track approved DS
          type: string
          maxLength: 32
          example: VISA.V 17 0003
        transaction_id:
          description: Universally unique transaction identifier assigned by the DS
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
    DsPublicKeys:
      type: object
      description: Public certificates specific to a Directory Server (DS) for encrypting device data and verifying ACS signed content. Required when channel is `app`.  
      required:
        - ds_public
        - ca_public
      properties:
        ds_public: 
          type: string
          maxLength: 1024
          description: A public certificate provided by the DS for encrytion of device data. It is a base64 URL encoded <a href="https://tools.ietf.org/html/rfc7517" target="_blank">JSON web key</a>.
          example: eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6Ik1LQkNUTkljS1VTRGlpMTF5U3MzNTI2aURaOEFpVG83VHU2S1BBcXY3RDQiLCJ5IjoiNEV0bDZTUlcyWWlMVXJONXZmdlZIdWhwN3g4UHhsdG1XV2xiYk00SUZ5TSIsInVzZSI6ImVuYyIsImtpZCI6IjEifQ
        ca_public:
          type: string
          maxLength: 1024
          description: Certificate authority (CA) public certificate (root) of the DS-CA. This certificate is used to validate the ACS signed content JSON web signature (JWS) object. It is a base64 URL encoded DER encoded X.509.
          example: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxWEvDZRhKEefZ5sQS7RJZXWbSOPxus-ZyLQjtmrrAQawnKI-AG8BKpVdZVGlpcdxCnGbCIy8CKk2Oi7Mgdqfv5R_4_jI7yl4j7Svmh1Sw934eeF9RyB59Ihl36Y0pNfVW9hBqJuq2o8ulrA1TOtpTpje23CY8sjFE5QnJm1evZRB_ZZQ1txl4nrAiHkno4cVJPouBesryVGVQ0zi1bM0P-05Ydgksvph-1nyjnDldD68mejVF69Tijxa22b6BUCXEuPfbXZcW2NpM_W3msnvKiTWFaMlnIzGYIoFnAnCIVU7Min6CPn565tv0iyIt8BrcezsGzefUw17NEq0J4tCvWwIDAQAB
    Eci:
      description: Electronic Commerce Indicator
      type: string
      minLength: 2
      maxLength: 2
      example: "05"
    ErrorResponse:
      type: object
      required:
        - request_id
        - error_type
        - error_codes
      properties:
        request_id:
          type: string
          example: 5342217f-7fa2-4626-a6c9-c979a04671a6
        error_type:
          type: string
          enum:
            - invalid_input
            - forbidden
        error_codes:
          description: Error response code. Full list of error codes is on GitHub
          type: array
          items:
            type: string
            enum:
              - amount_required
              - card_required
    ForbiddenErrorResponse:
      type: object
      required:
        - request_id
        - error_type
        - error_codes
      properties:
        request_id:
          type: string
          example: 5342217f-7fa2-4626-a6c9-c979a04671a6
        error_type:
          type: string
          enum:
            - operation_not_allowed
        error_codes:
          description: Error response code. Full list of error codes is on GitHub
          type: array
          items:
            type: string
            enum:
              - update_not_allowed_due_to_state
    GetBaseSessionLinks:
      type: object
      description: The links related to the session
      required:
        - self
      properties:
        self:
          type: object
          description: The URI of the session
          required:
            - href
          properties:
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441
    GetCompleteSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
    GetSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        issuer_fingerprint:
          type: object
          description: >
            The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session. 
            Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
        three_ds_method_url:
          type: object
          description: The URI of the issuer fingerprint (3DS method). Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/3dsmethod?tx=123456
        acs_url:
          type: object
          description: Fully qualified URL of the ACS to be used for the challenge. Only available if `next_actions` contains `authenticate`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/challenge
        term_url:
          type: object
          description: Fully qualified URL that will receive and process the PaReq (payer authentication response). Only available if `next_actions` contains `authenticate`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/challenge
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
    GetSessionResponse:
      required:
        - session_secret
        - id
        - transaction_id
        - scheme
        - amount
        - currency
        - authentication_type
        - authentication_category
        - status
        - protocol_version
        - _links
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        transaction_id:
          description: The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
        scheme:    
          type: string
          description: Indicates the scheme this authentication is carried out against
          enum:
            - Visa
            - Mastercard
            - Jcb
            - Amex
            - Diners
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        completed:
          type: bool
          description: Indicates whether this session has been completed
          example: false
        challenged:
          type: bool
          description: Indicates whether this session involved a challenge. This will only be set after communication with the scheme is finished. 
          example: true
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        certificates:
          $ref: '#/components/schemas/DsPublicKeys'
        status:
          $ref: '#/components/schemas/Status'
        approved:
          $ref: '#/components/schemas/Approved'
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        reference:
          $ref: '#/components/schemas/Reference'
        transaction_type:
          $ref: '#/components/schemas/TransactionType'
        next_actions:
          $ref: '#/components/schemas/NextActions'
        ds:
          $ref: '#/components/schemas/Ds'
        acs:
          $ref: '#/components/schemas/Acs'
        response_code:
          $ref: '#/components/schemas/ResponseCode'
        response_status_reason:
          $ref: '#/components/schemas/ResponseStatusReason'
        pareq:
          $ref: '#/components/schemas/Pareq'
        cryptogram:
          $ref: '#/components/schemas/Cryptogram'
        eci:
          $ref: '#/components/schemas/Eci'
        xid:
          type: string
          description: The xid value to use for authorization
          example: XSUErNftqkiTdlkpSk8p32GWOFA
        _links:
          $ref: '#/components/schemas/GetSessionLinks'
    GetSessionResponseAfterChannelDataSupplied:
      required:
        - session_secret
        - id
        - transaction_id
        - scheme
        - amount
        - currency
        - authentication_type
        - authentication_category
        - status
        - protocol_version
        - _links
      properties:
        id:
          $ref: '#/components/schemas/SessionId'
        transaction_id:
          description: The transaction identifier that needs to be provided when communicating directly with the Access Control Server (ACS)
          type: string
          minLength: 36
          maxLength: 36
          example: 9aea641d-0549-4222-9ca9-d90b43a4f38c
        scheme:    
          type: string
          description: Indicates the scheme this authentication is carried out against
          enum:
            - Visa
            - Mastercard
            - Jcb
            - Amex
            - Diners
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/Currency'
        completed:
          type: bool
          description: Indicates whether this session has been completed
          example: false
        challenged:
          type: bool
          description: Indicates whether this session involved a challenge. This will only be set after communication with the scheme is finished.
          example: true
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
        approved:
          $ref: '#/components/schemas/Approved'
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        reference:
          $ref: '#/components/schemas/Reference'
        transaction_type:
          $ref: '#/components/schemas/TransactionType'
        next_actions:
          $ref: '#/components/schemas/NextActions'
        ds:
          $ref: '#/components/schemas/Ds'
        acs:
          $ref: '#/components/schemas/Acs'
        response_code:
          $ref: '#/components/schemas/ResponseCode'
        response_status_reason:
          $ref: '#/components/schemas/ResponseStatusReason'
        pareq:
          $ref: '#/components/schemas/Pareq'    
        cryptogram:
          $ref: '#/components/schemas/Cryptogram'
        eci:
          $ref: '#/components/schemas/Eci'
        xid:
          type: string
          description: The xid value to use for authorization
          example: XSUErNftqkiTdlkpSk8p32GWOFA
        _links:
          $ref: '#/components/schemas/GetCompleteSessionLinks'
    GetUpdateSessionLinks:
      type: object
      description: The links related to the session
      allOf:
        - $ref: '#/components/schemas/GetBaseSessionLinks'
      properties:
        issuer_fingerprint:
          type: object
          description: >
            The URI to send the 3ds method completion indicator to. Use this if device information was sent when requesting a session. 
            Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/issuer-fingerprint
        collect_channel_data:
          type: object
          description: The URI to send device information to. Only available if `next_actions` contains `collect_data`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/collect-data
        three_ds_method_url:
          type: object
          description: The URI of the Issuer FingerPrint (3DS Method). Only available if `next_actions` contains `issuer_fingerprint`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.hbsc.com/3dsmethod?tx=123456
        complete:
          type: object
          description: The URI to signal the session as complete. Only available if `next_actions` contains `complete`
          properties:
            required:
              - href
            href:
              type: string
              maxLength: 100
              example: https://api.checkout.com/sessions/sid_y3oqhf46pyzuxjbcn2giaqnb441/complete
    HostedCompletionInfo:
      allOf:
        - $ref: '#/components/schemas/CompletionInfo'
        - type: object
          required:
            - success_url
            - failure_url
          properties:
            success_url:
              type: string
              format: uri
              description: For `hosted` sessions, this overrides the default success redirect URL configured on your account
              maxLength: 256
              example: "http://example.com/payments/success"
            failure_url:
              type: string
              format: uri
              description: For `hosted` sessions, this overrides the default failure redirect URL configured on your account
              maxLength: 256
              example: "http://example.com/payments/fail"
    NetworkTokenSource:
      type: object
      description: A network token payment source
      allOf:
        - $ref: "#/components/schemas/SessionSource"
        - type: object
          required:
            - type
            - token
            - expiry_month
            - expiry_year
            - token_type
            - cryptogram
          properties:
            token:
              type: string
              description: The network token PAN
              example: "4543474002249996"
              minLength: 9
              maxLength: 19
            expiry_month:
              type: integer
              description: The expiry month of the token
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year of the token
              example: 2025
              minLength: 4
              maxLength: 4
            name:
              type: string
              description: The customer's name
              minLength: 2
              maxLength: 45
              example: "Bruce Wayne"
            billing_address:
              description: The customer's billing address
              allOf:
                - $ref: '#/components/schemas/SessionAddress'
            home_phone:
              description: The cardholder's home phone number
              allOf:
                - $ref: '#/components/schemas/SessionPhone'
            mobile_phone:
              description: The cardholder's mobile phone number
              allOf:
                - $ref: '#/components/schemas/SessionPhone'
            work_phone:
              description: The cardholder's work phone number
              allOf:
                - $ref: '#/components/schemas/SessionPhone'
    NextActions:
      type: array
      description: >
        Identifies what actions to take in order to complete the session. `redirect_cardholder` only applies to hosted sessions.
        `authenticate` only applies to sessions that have been downgraded to 3DS1 (`protocol_version 1.0.2`)
      items:
        enum:
          - collect_channel_data
          - issuer_fingerprint
          - challenge_cardholder
          - redirect_cardholder
          - complete
          - authenticate
          - redirect_cardholder
    NonHostedCompletionInfo:
      allOf:
        - $ref: '#/components/schemas/CompletionInfo'
        - type: object
          required:
            - callback_url
          properties:
            callback_url:
              type: string
              format: uri
              description: For `non-hosted` sessions, you can define a URL to be called once the session is complete
              maxLength: 256
              example: "http://example.com/payments/callback/pay_mbabizu24mvu3mela5njyhpit4"
    Pareq:
      type: string
      description: Payer authentication request required in the form post to the `acs.url` given a 3DS1 transaction
      example: eJyNVF1vmzAUfd+vQLwTOzbgJDKu0mZVk6pTvtXuzTN3CWqBxMCW/fsZN6k2rSvmBa59zuWe+8WvTvmL9wN0lZVF4vd72PegUGWaFbvE36xvg4F/JT55/z58vdcAkxWoRsO7CIt6gKqSO/CyNPElpXJIyCCIYKiCUEY0GELcDwjDISMyZt++Y/+/rqy7+XgJxw8hFnYWJIyeHuHoYnbyHkCrvSzqTqRFS3W8nn4RlDEWYY7OphM1Bz2dCHx5CA4pZRy9Hjt5KGQOIj/H622zSno0rTzSM5HYOycvqmyKWv8SAxJzdDGcmI1+Efu6PlQjhOy7lnWvqRDBJoD2sjPZyDnbfN60yMpR1ClLxf1sGpfRCTb4CE8r9Vkdv7LBXIf34SLhqEU4uUplDYKY+uAhxV6fjfrhiEYc2XO3JsnbrIq+t1lNTI+8Wk7MQyt6fKa3Wf3zwK26jdZmmk15Q0N/s5y4cDqUBZg/mfl5++6uqXOl+M2d65Sp2gwFmm2vl+rpbr2NF4+7m9nj8ieoxeZ2vHtO2tmzIFdlmelyQjGz0jKHlueoI1yj/MPV1Ha73YTvL1P01zb9DeVWJeg=
    ProcessedOn:
      type: string
      description: The date/time the authentication was processed
      example: "2019-01-15T12:44:33Z"
    ProtocolVersion:
      type: string
      description: The protocol version number of the specification used by the API for authentication
      maxLength: 50
      example: "2.2.0"
    RedirectUrl:
      type: string
      description: >
        Fully qualified URL where the cardholder will be redirected after the authentication is complete in the Interceptor.
      example: "https://www.xml.com"
    Reference:
      type: string
      description: A reference you can later use to identify this payment, such as an order number
      maxLength: 100
      example: "ORD-5023-4E89"
    ResponseCode:
      description: >
        The response from the DS or ACS which indicates whether a transaction qualifies as an authenticated transaction or account verification. <br/>
        Only available if communication with the scheme was successful and the Session is in a final state. <br/><br/>
        â€¢ Y = Authentication Verification Successful. <br/>
        â€¢ N = Not Authenticated /Account Not Verified; Transaction denied. <br/>
        â€¢ U = Authentication/ Account Verification Could Not Be Performed; Technical or other problem, as indicated in ARes or RReq. <br/>
        â€¢ A = Attempts Processing Performed; Not Authenticated/Verified, but a proof of attempted authentication/verification is provided. <br/>
        â€¢ C = Challenge Required; Additional authentication is required using the CReq/CRes. <br/>
        â€¢ D = Challenge Required; Decoupled Authentication confirmed. <br/>
        â€¢ R = Authentication/ Account Verification Rejected; Issuer is rejecting authentication/verification and request that authorization not be attempted. <br/>
        â€¢ I = Informational Only; 3DS Requestor challenge preference acknowledged.
      type: string
      enum:
        - "Y"
        - "N"
        - "U"
        - "A"
        - "C"
        - "D"
        - "R"
        - "I"
    ResponseStatusReason:
      description: >
        The response from the DS or ACS which provides information on why the `response_code` field has the specified value.  <br/>
        Only available when `response_code` is not `Y`.  <br/><br/>
      
        â€¢ 01 = Card authentication failed <br/>
        â€¢ 02 = Unknown Device <br/>
        â€¢ 03 = Unsupported Device <br/>
        â€¢ 04 = Exceeds authentication frequency limit <br/>
        â€¢ 05 = Expired card <br/>
        â€¢ 06 = Invalid card number <br/>
        â€¢ 07 = Invalid transaction <br/>
        â€¢ 08 = No Card record <br/>
        â€¢ 09 = Security failure <br/>
        â€¢ 10 = Stolen card <br/>
        â€¢ 11 = Suspected fraud <br/>
        â€¢ 12 = Transaction not permitted to cardholder <br/>
        â€¢ 13 = Cardholder not enrolled in service <br/>
        â€¢ 14 = Transaction timed out at the ACS <br/>
        â€¢ 15 = Low confidence <br/>
        â€¢ 16 = Medium confidence <br/>
        â€¢ 17 = High confidence <br/>
        â€¢ 18 = Very High confidence <br/>
        â€¢ 19 = Exceeds ACS maximum challenges <br/>
        â€¢ 20 = Non-Payment transaction not supported <br/>
        â€¢ 21 = 3RI transaction not supported <br/>
        â€¢ 22 = ACS technical issue <br/>
        â€¢ 23 = Decoupled Authentication required by ACS but not requested by 3DS Requestor <br/>
        â€¢ 24 = 3DS Requestor Decoupled Max Expiry Time exceeded <br/>
        â€¢ 25 = Decoupled Authentication was provided insufficient time to authenticate cardholder. ACS will not make attempt <br/>
        â€¢ 26 = Authentication attempted but not performed by the cardholder <br/>
      example: "01"
      type: string
    SchemeToken:
      type: string
      description: "The scheme generated token (replaces the `card` object)"
    SdkEphemeralPublicKey:
      type: object
      description: "Public key component of the ephemeral key pair generated by the 3DS SDK and used to establish session keys between the 3DS SDK and ACS. Refer to https://tools.ietf.org/html/rfc7517#appendix-A.1"
      properties:
        kty:
          description: The key type.
          type: string
          enum: ['EC']
          example: EC
        crv:
          type: string
          description: The type of elliptic curve.
          maxLength: 40
          example: "P-256"
        x:
          type: string
          description: x coordinate of the elliptic curve that is base64url-encoded.
          maxLength: 100
          example: "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
        y:
          type: string
          description: y coordinate of the elliptic curve that is base64url-encoded.
          maxLength: 100
          example: "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
    Session:
      type: object
      description: The session information
      properties:
        id:
          description: Session Id generated for external usage
          type: string
          minLength: 36
          maxLength: 36
          example: sid_y3oqhf46pyzuxjbcn2giaqnb44
        expires_on:
          description: Expiration date of the session id
          type: string
          example: 01-09-2019 10:12:30
    SessionAddress:
      type: object
      description: The shipping address
      properties:
        address_line1: 
          type: string
          description: The first line of the address
          maxLength: 50
          example: Checkout.com
        address_line2:
          type: string
          description: The second line of the address
          maxLength: 50
          example: ABC building
        address_line3:
          type: string
          description: The third line of the address
          maxLength: 50
          example: 14 Wells Mews
        city:
          type: string
          description: The address city
          maxLength: 50
          example: London
        state:
          type: string
          description: The country subdivision code defined in ISO 3166-2
          minLength: 3
          maxLength: 3
          example: ENG
        zip:
          type: string
          description: The address zip/postal code
          maxLength: 16
          example: W1T 4TJ
        country:
          type: string
          description: The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a> of the address
          example: GB
          maxLength: 2
          minLength: 2
    SessionId:
      description: Session unique identifier
      type: string
      pattern: "^(sid)_(\\w{26})$"  
      minLength: 36
      maxLength: 36
      example: sid_y3oqhf46pyzuxjbcn2giaqnb441
    SessionPhone:
      type: object
      properties:
          country_code:
            description: Country code
            type: string
            minLength: 1
            maxLength: 3
            example: 234
          number:
            type: string
            description: The rest of the number
            maxLength: 15
            example: "0204567895"
    SessionRequest:
      type: object
      required:
        - currency
        - source
        - completion
      properties:
        source:
          $ref: '#/components/schemas/SessionSource'
        amount:
          type: integer
          description: |
            The payment amount in the major currency.
            
            This value is required for 3DS1 authentications.
            
            
            Omitting this value will set `authentication_category` to `non_payment` and renders the authentication as 3DS2 only.
          minimum: 0
          maxLength: 48
          example: 6540
        currency:
          type: string
          description: |
            The three-letter ISO currency code
          example: USD
          maxLength: 3
          minLength: 3
        processing_channel_id:
          type: string
          description: |
            The processing channel to be used for the session. Required if this was not set in the request for the OAuth token.
        marketplace:
          $ref: '#/components/schemas/MarketplaceData'
        authentication_type:
          $ref: '#/components/schemas/AuthenticationType'
        authentication_category:
          $ref: '#/components/schemas/Category'
        challenge_indicator:
          $ref: '#/components/schemas/ChallengeIndicator'
        reference:
          $ref: '#/components/schemas/Reference'
        transaction_type:
            $ref: '#/components/schemas/TransactionType'
        shipping_address:
            $ref: '#/components/schemas/SessionAddress'
        completion:
          $ref: '#/components/schemas/CompletionInfo'
        channel_data:
          $ref: '#/components/schemas/ChannelData'
    SessionSecret:
      description: A base64 encoded value prefixed with `sek_` that gives access to client-side operations for a single authentication within the Sessions API. This value is returned as the `session_secret` when requesting a session. Client-side operations include getting session details and those specified in `next_actions`.
      type: string
      pattern: "^(sek)_(\\w{44})$"
      minLength: 48
      maxLength: 48
      example: sek_Dal7UyiH8rIFXA4PfgiIk2jUyQkVDeEWgVBEL4TsRTE=
    SessionSource:
      type: object
      description: The source of the payment
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/CardSource'
          network_token: '#/components/schemas/NetworkTokenSource'
      required:
        - type
      properties:
        type:
          type: string
          default: "card"
          description: The payment source type
          example: "card"
    SessionsValidationError:
      type: object
      required:
        - request_id
        - error_type
        - error_codes
      properties:
        request_id:
          type: string
          example: 5342217f-7fa2-4626-a6c9-c979a04671a6
        error_type:
          type: string
          enum:
            - unprocessable_entity
        error_codes:
          description: Error response code. Full list of error codes is on GitHub
          type: array
          items:
            type: string
            enum:
              - currency_required
    Status:
      type: string
      enum:
        - pending
        - processing
        - challenged
        - challenge_abandoned
        - expired
        - approved
        - attempted
        - unavailable
        - declined
        - rejected
      description: Indicates the status of the session
    ThreeDsMethodCompletion:
      required:
        - three_ds_method_completion
      description: The result of the 3DS method url
      properties:
        three_ds_method_completion:
          type: string
          enum: 
            - Y
            - N
            - U
          description: >
            The result of the 3DS method URL.<br> 
            Default to `U` if a response is not received from the 3DS Method URL within 10 seconds.
          minLength: 1
          maxLength: 1
          example: Y
      example: 
        three_ds_method_completion: Y
        
    TransactionType:
      type: string
      enum:
        - goods_service
        - check_acceptance
        - account_funding
        - quashi_card_transaction
        - prepaid_activation_and_load
      description: Identifies the type of transaction being authenticated
      maxLength: 50
      example: goods_service
      default: goods_service
    Type:
      type: string
      enum:
        - payment_transaction
        - recurring_transaction
        - instalment_transaction
        - add_card
        - maintain_card
        - token_cardholder_verification
      description: Indicates the type of Authentication request.
      default: payment_transaction
    01_SepaSource:
      type: object
      description: A SEPA payment source
      required:
        - billing_address
        - source_data
      allOf:
        - $ref: '#/components/schemas/SourceRequest'
        - type: object
          properties:
            source_data:
              type: object
              description: Additional data required to create SEPA payment sources
              required:
                - first_name
                - last_name
                - account_iban
                - bic
                - billing_descriptor
                - mandate_type
              properties:
                first_name:
                  type: string
                  description: The account holder's first name
                  example: "Marcus"
                last_name:
                  type: string
                  description: The account holder's last name
                  example: "Barrilius Maximus"
                account_iban:
                  type: string
                  description: The account IBAN
                  example: "DE25100100101234567893"
                bic:
                  type: string
                  description: The account BIC
                  example: "PBNKDEFFXXX"
                billing_descriptor:
                  type: string
                  description: The billing descriptor
                  example: "ExampleCompany.com"
                mandate_type:
                  type: string
                  description: The type of mandate
                  enum:
                    - "single"
                    - "recurring"
                  example: "recurring"
    01_SepaSourceResponse:
      type: object
      description: The SEPA mandate details
      allOf:
        - $ref: '#/components/schemas/AddSourceResponse'
        - type: object
          properties:
            response_data:
              type: object
              description: SEPA Direct Debit details
              properties:
                mandate_reference:
                  type: string
                  description: The Direct Debit mandate reference
                  example: "MANDXI9809809"
            _links:
              type: object
              description: The links related to the SEPA payment source
              readOnly: true
              minItems: 1
              properties:
                self:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Link'
                  description: The URI of the payment source
                cancel:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Link'
                  description: A link to cancel the SEPA Direct Debit mandate
    02_AchSource:
      type: object
      description: An ACH payment source
      required:
        - billing_address
        - source_data
      allOf:
        - $ref: '#/components/schemas/SourceRequest'
        - type: object
          properties:
            source_data:
              type: object
              description: Additional data required to create ACH payment sources
              required:
                - account_type
                - account_number
                - routing_number
                - account_holder_name
                - billing_descriptor
              properties:
                account_type:
                  type: string
                  description: The type of Direct Debit account
                  enum:
                    - "Checking"
                    - "Savings"
                    - "Corporate"
                    - "CorpSavings"
                  example: "Checking"
                account_number:
                  type: integer
                  description: The account number of the Direct Debit account
                  minLength: 4
                  maxLength: 17
                  example: 4099999992
                routing_number:
                  type: integer
                  description: The routing number of the Direct Debit account
                  minLength: 8
                  maxLength: 9
                  example: 211370545
                account_holder_name:
                  type: string
                  description: The account holder's full name
                  minLength: 1
                  maxLength: 100
                  example: "John Doe"
                billing_descriptor:
                  type: string
                  description: The billing descriptor
                  minLength: 1
                  maxLength: 15
                  example: "ExampleCompany.com"
                company_name:
                  type: string
                  description: The name of the company (required for corporate accounts)
                  minLength: 1
                  maxLength: 40
                  example: "Checkout.com"
    AddSourceResponse:
      type: object
      discriminator:
        propertyName: type
        mapping:
          sepa: '#/components/schemas/01_SepaSourceResponse'
          ach: '#/components/schemas/AddSourceResponse'
      required:
        - type
        - response_code
      properties:
        id:
          type: string
          description: The unique identifier of the payment source that can be used later for payments
          example: src_y3oqhf46pyzuxjbcn2giaqnb44
        type:
          type: string
          description: The payment source type
          example: "sepa"
        response_code:
          type: string
          description: The Gateway response code
          example: "10000"
        customer:
          type: object
          description: The customer associated with the payment source if provided in the request
          allOf:
            - $ref: '#/components/schemas/SourceResponseCustomer'
    Source:
      type: object
      required:
        - type
      properties:
        id:
          type: string
          description: The unique identifier of the payment source that can be later used for payments
          example: src_y3oqhf46pyzuxjbcn2giaqnb44
        type:
          type: string
          description: The payment source type
          example: "sepa"
        _links:
          type: object
          description: The links related to the payment source
          readOnly: true
          minItems: 1
          required:
            - self
          properties:
            self:
              type: object
              allOf:
                - $ref: '#/components/schemas/Link'
              description: The URI of the payment source
              example:
                href: https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44
          example:
            self:
              href: https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44
            "sepa:mandate":
              href: https://api.checkout.com/sepa/mandates/src_y3oqhf46pyzuxjbcn2giaqnb44
    SourceRequest:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          sepa: '#/components/schemas/01_SepaSource'
          ach: '#/components/schemas/02_AchSource'
      properties:
        type:
          type: string
          description: The payment source type
          example: sepa
        reference:
          type: string
          description: A reference you can later use to identify the source
          example: "X-080957-N34"
        billing_address:
          description: The payment source owner's billing address
          allOf:
            - $ref: '#/components/schemas/Address'
        phone:
          description: The payment source owner's phone number
          allOf:
            - $ref: '#/components/schemas/PhoneNumber'
        customer:
          type: object
          description: Details of the customer to associate with the source
          properties:
            id:
              type: string
              pattern: "^(cus)_(\\w{26})$"
              description: |
                The identifier of an existing customer. If neither customer `id` or `email` is provided, then 
                a new customer will be registered
              example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
            email:
              type: string
              format: email
              description: An optional email address to associate with the customer
              example: "jokershere@gmail.com"
            name:
              type: string
              description: The customer's name. This will only set the name for *new* customers
              example: "Jack Napier"
    SourceResponseCustomer:
      type: object
      description: The customer to which the payment source is linked
      required:
        - id
      properties:
        id:
          type: string
          pattern: "^(cus)_(\\w{26})$"
          description: The unique identifier of the customer
          example: "cus_y3oqhf46pyzuxjbcn2giaqnb44"
        email:
          type: string
          description: The customer's email address
          example: "jokershere@gmail.com"
        name:
          type: string
          description: The customer's name
          example: "Jack Napier"
    Timestamp:
      type: string
      description: ISO 8601 timestamp
      format: date-time
    01_CardTokenRequest:
      type: object
      description: Card Token Request
      allOf:
        - $ref: '#/components/schemas/TokenRequest'
        - type: object
          required:
            - number
            - expiry_month
            - expiry_year
          properties:
            number:
              type: string
              description: The card number
              example: "4543474002249996"
            expiry_month:
              type: integer
              description: The expiry month of the card
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year of the card
              example: 2025
              minLength: 4
              maxLength: 4
            name:
              type: string
              description: The cardholder's name
              example: "Bruce Wayne"
            cvv:
              type: string
              description: The card verification value/code. 3 digits, except for Amex (4 digits)
              example: "956"
              minLength: 3
              maxLength: 4
            billing_address:
              description: The payment source owner's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The payment source owner's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
    01_CardTokenResponse:
      type: object
      description: Card Token Response
      required:
        - expiry_month
        - expiry_year
        - last4
        - bin
      allOf:
        - $ref: '#/components/schemas/TokenResponse'
        - type: object
          properties:
            billing_address:
              description: The payment source owner's billing address
              allOf:
                - $ref: '#/components/schemas/Address'
            phone:
              description: The payment source owner's phone number
              allOf:
                - $ref: '#/components/schemas/PhoneNumber'
            expiry_month:
              type: integer
              description: The expiry month
              minimum: 1
              example: 6
              minLength: 1
              maxLength: 2
            expiry_year:
              type: integer
              description: The expiry year
              example: 2025
              minLength: 4
              maxLength: 4
            name:
              type: string
              description: The cardholder's name
              example: "Bruce Wayne"
            scheme:
              type: string
              description: The card scheme
              example: "VISA"
            last4:
              type: string
              description: The last four digits of the card number
              example: "9996"
              minLength: 4
              maxLength: 4
            bin:
              type: string
              description: The card issuer's Bank Identification Number (BIN)
              example: "454347"
              maxLength: 6
            card_type:
              type: string
              description: The card type
              enum:
                - Credit
                - Debit
                - Prepaid
                - Charge
              example: Credit
            card_category:
              type: string
              description: The card category
              enum:
                - Consumer
                - Commercial
              example: Consumer
            issuer:
              type: string
              description: The name of the card issuer
              example: "GOTHAM STATE BANK"
            issuer_country:
              type: string
              maxLength: 2
              minLength: 2
              description: The card issuer's country (<a href="https://docs.checkout.com/docs/country-codes" target="blank">two-letter ISO code</a>)
              example: "US"
            product_id:
              type: string
              description: The issuer/card scheme product identifier
              example: "F"
            product_type:
              type: string
              description: The issuer/card scheme product type
              example: CLASSIC
    TokenRequest:
      type: object
      description: The source of the payment
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_CardTokenRequest'
      required:
        - type
      properties:
        type:
          type: string
          description: The type of card details to be tokenized
          example: "card"
    TokenResponse:
      type: object
      description: The source of the payment
      discriminator:
        propertyName: type
        mapping:
          card: '#/components/schemas/01_CardTokenResponse'
      required:
        - type
        - token
        - expires_on
        - expiry_month
        - expiry_year
        - last4
        - bin
      properties:
        type:
          type: string
          description: The type of card details to be tokenized
          example: "card"
        token:
          type: string
          description: The reference token
          example: tok_ubfj2q76miwundwlk72vxt2i7q
        expires_on:
          description: The date/time the token will expire
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
        expiry_month:
          type: integer
          description: The expiry month
          minimum: 1
          example: 6
          minLength: 1
          maxLength: 2
        expiry_year:
          type: integer
          description: expiry year
          example: 2025
          minLength: 4
          maxLength: 4
        scheme:
          type: string
          description: The card scheme
          example: "VISA"
        last4:
          type: string
          description: The last four digits of the card number
          example: "9996"
        bin:
          type: string
          description: The card issuer BIN
          example: "454347"
        card_type:
          type: string
          description: The card type
          enum:
            - Credit
            - Debit
            - Prepaid
            - Charge
          example: Credit
        card_category:
          type: string
          description: The card category
          enum:
            - Consumer
            - Commercial
          example: Consumer
        issuer:
          type: string
          description: The name of the card issuer
          example: "GOTHAM STATE BANK"
        issuer_country:
          type: string
          maxLength: 2
          minLength: 2
          description: The card issuer country ISO-2 code
          example: "US"
        product_id:
          type: string
          description: The issuer/card scheme product identifier
          example: "F"
        product_type:
          type: string
          description: The issuer/card scheme product type
          example: CLASSIC
    ValidationError:
      type: object
      properties:
        request_id:
          type: string
          example: 0HL80RJLS76I7
        error_type:
          type: string
          example: request_invalid
        error_codes:
          type: array
          items:
            type: string
            example: payment_source_required
  headers:
    Cko-Request-Id:
      description: The unique identifier of the request
      schema:
        type: string
    Cko-Version:
      description: The version of the API
      schema:
        type: string
  parameters:
    collectionCriteria:
      name: criteria
      in: query
      schema:
        type: string
      description: The json criteria for collection
    collectionExpand:
      name: expand
      in: query
      schema:
        type: string
      description: >-
        Expand response to get full related object intead of ID.  See the expand
        guide for more info.
    collectionFields:
      name: fields
      in: query
      schema:
        type: string
      description: >-
        Limit the returned fields to the list specified, separated by comma.  Note
        that id is always returned.
    collectionFilter:
      name: filter
      in: query
      schema:
        type: string
      description: |
        The collection items filter requires a special format.
        Use "," for multiple allowed values.  Use ";" for multiple fields.
        See the filter guide for more options and examples about this format.
    collectionLimit:
      name: limit
      in: query
      description: The collection items limit
      schema:
        type: integer
        minimum: 0
        maximum: 1000
    collectionOffset:
      name: offset
      in: query
      description: The collection items offset
      schema:
        type: integer
        minimum: 0
    collectionQuery:
      name: q
      in: query
      schema:
        type: string
      description: The partial search of the text fields.
    collectionSort:
      name: sort
      in: query
      style: form
      schema:
        type: array
        items:
          type: string
      description: >-
        The collection items sort field and order (prefix with "-" for descending
        sort).
    hash:
      name: hash
      in: path
      description: The token identifier string
      schema:
        type: string
      required: true
    mediaType:
      name: Accept
      in: header
      schema:
        type: string
        enum:
          - application/json
        default: application/json
      description: The response media type
    resourceId:
      name: id
      in: path
      description: The resource identifier string
      schema:
        type: string
      required: true
    rulesVersion:
      name: version
      in: path
      schema:
        type: integer
        minimum: 1
      required: true
      description: >-
        The rule set version. Expand response to get full related object instead
        of ID.  See the expand guide for more info.
    systemEventType:
      name: eventType
      in: path
      description: The event type
      schema:
        type: string
      required: true
  responses:
    AccessForbidden:
      description: 'Access forbidden, invalid API-KEY was used'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidDataError:
      description: Invalid data was sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    NotFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiPublicKey:
      description: >
            Unless explicitly stated, all endpoints require authentication using OAuth. 
            Public keys should only be used in JavaScript or native applications.
            
            #### Format
      
            - Sandbox `pk_test_xxxxxxxxxxxxxxxxxxxxxxxxxx`
      
            - Production `pk_xxxxxxxxxxxxxxxxxxxxxxxxxx`
      name: Authorization
      type: apiKey
      in: Header
    OAuth:
      type: oauth2
      description: |
        For server-to-server communication, we support the OAuth 2.0 client credentials flow.
        We will provide you with a set of access key credentials â€“ an access key ID and secret â€“ which you can exchange for an access token by calling the 'request an access token' endpoint below. 
        You will need to authenticate using basic authentication, using your access key ID and access key secret as your username and password:
      
        ```
        curl --location --request POST 'https://access.checkout.com/connect/token' \
        --header 'Content-Type: application/x-www-form-urlencoded' \
        --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ=' \
        --data-urlencode 'grant_type=client_credentials' \
        --data-urlencode 'scope=gateway'
        ```
      
        The token server will return a Bearer `access_token` in JSON Web Token (JWT) format which you should use in the `Authorization`
        header of your API requests:
      
        ```
        curl --location --request POST 'https://api.checkout.com/payments' \
        --header 'Content-Type: application/json' \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer {{AccessToken}}' \
        --data-raw '{
          "amount": 10000,
          "currency": "USD",
          "reference": "Visa-USD-Test",
          ...
        }'
        ```
      
        Your access token will be valid for a length of time (in seconds) indicated by the `expires_in` field in the response. When it expires, you'll need to request a new one.
      
        Depending on the Environment against which you're making your requests against you'll need to request the token from a different Authorization Server.
      
        | Environment   |      Authorization Server                            |
        |---------------|------------------------------------------------------|
        | Sandbox       |  https://access.sandbox.checkout.com/connect/token   |
        | Production    |  https://access.checkout.com/connect/token           |
      
      flows:
        clientCredentials:
          tokenUrl: See table above
          scopes:
            vault: Access to all Vault resources
            "vault:instruments": Create instruments
            gateway: Access to all Gateway resources
            "gateway:payment": Request payments
            "gateway:payment-details": Get payment details
            "gateway:payment-authorizations": Increment authorizations
            "gateway:payment-voids": Void payments
            "gateway:payment-captures": Capture payments
            "gateway:payment-refunds": Refund payments
            "fx": Foreign exchange services
            "payouts:bank-details": Get bank details
            sessions: Access to all Sessions resources
            "sessions:app": App-based authentication
            "sessions:browser": Browser-based authentication
            disputes: Access to all Disputes resources
            "disputes:view": View disputes
            "disputes:provide-evidence": Provide dispute evidence
            "disputes:accept": Accept disputes
            martketplace:  Manage sub-entities
            flow: Access to all Flow resources
            "flow:workflows": Manage workflows
            "flow:events": Retrieve events
    SessionSecret:
      description: >
            A base64 encoded value prefixed with `sek_` that gives access to client-side operations for a single authentication within the Sessions API. This value is returned as the `session_secret` when requesting a session. 
      name: Authorization
      type: apiKey
      in: Header
      maxLength: 48
      example: sek_Dal7UyiH8rIFXA4PfgiIk2jUyQkVDeEWgVBEL4TsRTE=
